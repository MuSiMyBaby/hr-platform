model UserResume {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation("UserToResumes", fields: [userId], references: [id])

  primaryOf User? @relation("PrimaryResume")
  isPrimary Boolean @default(false)
  title     String?

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  identityNumber String? @unique
  workPermit     String? @unique
  passport       String? @unique
  email          String? @unique
  emailVerified  Boolean @default(false)
  phoneNumber    String? @unique
  phoneVerified  Boolean @default(false)
  profilePicture String?
  firstName      String
  lastName       String
  englishName    String?
  nickname       String?

  mailCountry         String?
  mailCity            String?
  mailDistrict        String?
  mailAddress         String?
  residentialCountry  String?
  residentialCity     String?
  residentialDistrict String?
  residentialAddress  String?

  isRegistered Boolean   @default(false)
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  languages            Language[]
  educations           Education[]
  experiences          Experience[]
  skills               Skill[]
  certificates         Certificate[]
  traits               Trait[]
  commuteOptions       Commute[]
  workingTimes         WorkingTime[]
  workIdentities       WorkIdentity[]
  jobPreferences       JobType[]
  emergencyContacts    EmergencyContact[]
  biography            Biography?
  portfolio            Portfolio[]
  profilePhotos        ProfilePhoto[]
  resumeVersions       ResumeVersion[]
  resumeVisibility     ResumeVisibility?
  resumeReviewStatuses ResumeReviewStatus[]
  resumeViewLogs       ResumeViewLog[]      @relation("ResumeViewLog")
  resumePDFs           ResumePDF[]
  resumeReviewLogs     ResumeReviewLog[]
  messageThreads       MessageThread[]      @relation("ResumeToThread")
  accessGrants         ResumeAccessGrant[]  @relation("ResumeToAccess")
  jobapplication JobApplication[]
  @@unique([userId, isPrimary])
  @@index([userId])
  @@index([companyId])
}

model Language {
  id         Int           @id @default(autoincrement())
  resume     UserResume    @relation(fields: [resumeId], references: [id])
  resumeId   Int
  name       String
  level      LanguageLevel
  levelOther String?
}

model Education {
  id          Int             @id @default(autoincrement())
  resume      UserResume      @relation(fields: [resumeId], references: [id])
  resumeId    Int
  school      String
  department  String
  status      EducationStatus
  statusOther String?
  startDate   DateTime
  endDate     DateTime
}

model Experience {
  id          Int        @id @default(autoincrement())
  resume      UserResume @relation(fields: [resumeId], references: [id])
  resumeId    Int
  company     String
  title       String
  startDate   DateTime
  endDate     DateTime
  description String
}

model Skill {
  id       Int        @id @default(autoincrement())
  resume   UserResume @relation(fields: [resumeId], references: [id])
  resumeId Int
  name     String
}

model Certificate {
  id       Int        @id @default(autoincrement())
  resume   UserResume @relation(fields: [resumeId], references: [id])
  resumeId Int
  name     String
  expiry   DateTime?
}

model Trait {
  id          Int        @id @default(autoincrement())
  resume      UserResume @relation(fields: [resumeId], references: [id])
  resumeId    Int
  personality String
  interest    String?
}

model Commute {
  id          Int           @id @default(autoincrement())
  resume      UserResume    @relation(fields: [resumeId], references: [id])
  resumeId    Int
  method      CommuteMethod
  methodOther String?
}

model WorkingTime {
  id            Int        @id @default(autoincrement())
  resume        UserResume @relation(fields: [resumeId], references: [id])
  resumeId      Int
  shift         ShiftType
  shiftOther    String?
  preference    String
  expectedStart DateTime?
  expectedEnd   DateTime?
}

model WorkIdentity {
  id            Int              @id @default(autoincrement())
  resume        UserResume       @relation(fields: [resumeId], references: [id])
  resumeId      Int
  identity      WorkIdentityType
  identityOther String?
}

model JobType {
  id        Int         @id @default(autoincrement())
  resume    UserResume  @relation(fields: [resumeId], references: [id])
  resumeId  Int
  type      JobTypeEnum
  typeOther String?
}

model EmergencyContact {
  id            Int             @id @default(autoincrement())
  resume        UserResume      @relation(fields: [resumeId], references: [id])
  resumeId      Int
  firstName     String
  lastName      String
  phoneNumber   String
  relation      ContactRelation
  relationOther String?
}

model Biography {
  id       Int        @id @default(autoincrement())
  resume   UserResume @relation(fields: [resumeId], references: [id])
  resumeId Int        @unique
  content  String
}

model Portfolio {
  id          Int        @id @default(autoincrement())
  resume      UserResume @relation(fields: [resumeId], references: [id])
  resumeId    Int
  externalUrl String
  title       String?
  description String?
}

model ProfilePhoto {
  id       Int        @id @default(autoincrement())
  resume   UserResume @relation(fields: [resumeId], references: [id])
  resumeId Int
  fileUrl  String
  type     String?
}

model ResumeVersion {
  id        Int        @id @default(autoincrement())
  resume    UserResume @relation(fields: [resumeId], references: [id])
  resumeId  Int
  snapshot  Json
  createdAt DateTime   @default(now())
  version   String?
  note      String?
  isCurrent Boolean    @default(false)
}

model ResumeVisibility {
  id              Int        @id @default(autoincrement())
  resume          UserResume @relation(fields: [resumeId], references: [id])
  resumeId        Int        @unique
  isPublic        Boolean    @default(false)
  allowedAudience String?
  startDate       DateTime?
  endDate         DateTime?
}

model ResumeReviewStatus {
  id         Int        @id @default(autoincrement())
  resume     UserResume @relation(fields: [resumeId], references: [id])
  resumeId   Int
  viewerId   Int
  viewerType String
  viewedAt   DateTime   @default(now())

  @@unique([resumeId, viewerId, viewerType])
}

model ResumePDF {
  id        Int        @id @default(autoincrement())
  resume    UserResume @relation(fields: [resumeId], references: [id])
  resumeId  Int
  fileUrl   String
  template  String?
  createdAt DateTime   @default(now())
}
