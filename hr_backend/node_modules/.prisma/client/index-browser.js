
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ResumeAccessGrantScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  grantedToId: 'grantedToId',
  grantedById: 'grantedById',
  createdAt: 'createdAt'
};

exports.Prisma.ResumeViewLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  userViewedById: 'userViewedById',
  resumeId: 'resumeId',
  viewedAt: 'viewedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  isApproved: 'isApproved',
  isActive: 'isActive'
};

exports.Prisma.AttendanceLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  clockIn: 'clockIn',
  clockOut: 'clockOut',
  note: 'note',
  scheduleId: 'scheduleId'
};

exports.Prisma.ShiftScheduleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  shiftDate: 'shiftDate',
  startTime: 'startTime',
  endTime: 'endTime',
  note: 'note'
};

exports.Prisma.PaySlipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  issuedById: 'issuedById',
  companyId: 'companyId',
  month: 'month',
  amount: 'amount',
  note: 'note',
  fileUrl: 'fileUrl',
  createdAt: 'createdAt'
};

exports.Prisma.JobPostingScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  title: 'title',
  description: 'description',
  location: 'location',
  jobType: 'jobType',
  salaryRange: 'salaryRange',
  isActive: 'isActive',
  postedAt: 'postedAt',
  expiredAt: 'expiredAt'
};

exports.Prisma.JobApplicationScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  resumeId: 'resumeId',
  status: 'status',
  appliedAt: 'appliedAt',
  note: 'note'
};

exports.Prisma.MessageThreadScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.MessageLogScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  senderId: 'senderId',
  content: 'content',
  sentAt: 'sentAt'
};

exports.Prisma.UserResumeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  isPrimary: 'isPrimary',
  title: 'title',
  companyId: 'companyId',
  identityNumber: 'identityNumber',
  workPermit: 'workPermit',
  passport: 'passport',
  email: 'email',
  emailVerified: 'emailVerified',
  phoneNumber: 'phoneNumber',
  phoneVerified: 'phoneVerified',
  profilePicture: 'profilePicture',
  firstName: 'firstName',
  lastName: 'lastName',
  englishName: 'englishName',
  nickname: 'nickname',
  mailCountry: 'mailCountry',
  mailCity: 'mailCity',
  mailDistrict: 'mailDistrict',
  mailAddress: 'mailAddress',
  residentialCountry: 'residentialCountry',
  residentialCity: 'residentialCity',
  residentialDistrict: 'residentialDistrict',
  residentialAddress: 'residentialAddress',
  isRegistered: 'isRegistered',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LanguageScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  name: 'name',
  level: 'level',
  levelOther: 'levelOther'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  school: 'school',
  department: 'department',
  status: 'status',
  statusOther: 'statusOther',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.ExperienceScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  company: 'company',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate',
  description: 'description'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  name: 'name'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  name: 'name',
  expiry: 'expiry'
};

exports.Prisma.TraitScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  personality: 'personality',
  interest: 'interest'
};

exports.Prisma.CommuteScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  method: 'method',
  methodOther: 'methodOther'
};

exports.Prisma.WorkingTimeScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  shift: 'shift',
  shiftOther: 'shiftOther',
  preference: 'preference',
  expectedStart: 'expectedStart',
  expectedEnd: 'expectedEnd'
};

exports.Prisma.WorkIdentityScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  identity: 'identity',
  identityOther: 'identityOther'
};

exports.Prisma.JobTypeScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  type: 'type',
  typeOther: 'typeOther'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  relation: 'relation',
  relationOther: 'relationOther'
};

exports.Prisma.BiographyScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  content: 'content'
};

exports.Prisma.PortfolioScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  externalUrl: 'externalUrl',
  title: 'title',
  description: 'description'
};

exports.Prisma.ProfilePhotoScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  fileUrl: 'fileUrl',
  type: 'type'
};

exports.Prisma.ResumeVersionScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  snapshot: 'snapshot',
  createdAt: 'createdAt',
  version: 'version',
  note: 'note',
  isCurrent: 'isCurrent'
};

exports.Prisma.ResumeVisibilityScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  isPublic: 'isPublic',
  allowedAudience: 'allowedAudience',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.ResumeReviewStatusScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  viewerId: 'viewerId',
  viewerType: 'viewerType',
  viewedAt: 'viewedAt'
};

exports.Prisma.ResumePDFScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  fileUrl: 'fileUrl',
  template: 'template',
  createdAt: 'createdAt'
};

exports.Prisma.UserReviewLogScalarFieldEnum = {
  id: 'id',
  targetUserId: 'targetUserId',
  reviewerId: 'reviewerId',
  score: 'score',
  reviewType: 'reviewType',
  isBlacklisted: 'isBlacklisted',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.ResumeReviewLogScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  reviewerId: 'reviewerId',
  score: 'score',
  status: 'status',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.UserReviewTagScalarFieldEnum = {
  id: 'id',
  tagId: 'tagId',
  reviewId: 'reviewId'
};

exports.Prisma.ResumeReviewTagScalarFieldEnum = {
  id: 'id',
  tagId: 'tagId',
  reviewId: 'reviewId'
};

exports.Prisma.ReviewTagOptionScalarFieldEnum = {
  id: 'id',
  label: 'label',
  type: 'type',
  isPublic: 'isPublic'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  googleId: 'googleId',
  facebookId: 'facebookId',
  lineId: 'lineId',
  lastLogin: 'lastLogin',
  lastLoginIp: 'lastLoginIp',
  skipRegistration: 'skipRegistration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  isAnonymized: 'isAnonymized',
  deletionReason: 'deletionReason',
  companyId: 'companyId',
  role: 'role',
  resumeId: 'resumeId'
};

exports.Prisma.IpRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipAddress: 'ipAddress',
  location: 'location',
  createdAt: 'createdAt'
};

exports.Prisma.DeviceRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceInfo: 'deviceInfo',
  platform: 'platform',
  createdAt: 'createdAt'
};

exports.Prisma.AccountHistoryLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  operatorId: 'operatorId',
  action: 'action',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CompanyType = exports.$Enums.CompanyType = {
  AGENCY: 'AGENCY',
  CLIENT: 'CLIENT',
  FREELANCER: 'FREELANCER',
  HEADHUNTER: 'HEADHUNTER',
  PLATFORM: 'PLATFORM',
  OTHER: 'OTHER'
};

exports.JobTypeEnum = exports.$Enums.JobTypeEnum = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  INTERNSHIP: 'INTERNSHIP',
  FREELANCE: 'FREELANCE',
  OTHER: 'OTHER'
};

exports.LanguageLevel = exports.$Enums.LanguageLevel = {
  BASIC: 'BASIC',
  INTERMEDIATECompany: 'INTERMEDIATECompany',
  UPPER_INTERMEDIATE: 'UPPER_INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  OTHER: 'OTHER'
};

exports.EducationStatus = exports.$Enums.EducationStatus = {
  ENROLLED: 'ENROLLED',
  SUSPENDED: 'SUSPENDED',
  GRADUATED: 'GRADUATED',
  DROPPED_OUT: 'DROPPED_OUT',
  OTHER: 'OTHER'
};

exports.CommuteMethod = exports.$Enums.CommuteMethod = {
  CAR: 'CAR',
  MOTORCYCLE: 'MOTORCYCLE',
  WALK: 'WALK',
  OTHER: 'OTHER'
};

exports.ShiftType = exports.$Enums.ShiftType = {
  DAY: 'DAY',
  SWING: 'SWING',
  EVENING: 'EVENING',
  NIGHT: 'NIGHT',
  OTHER: 'OTHER'
};

exports.WorkIdentityType = exports.$Enums.WorkIdentityType = {
  FRESH_GRADUATE: 'FRESH_GRADUATE',
  EXPAT: 'EXPAT',
  FREELANCER: 'FREELANCER',
  HOUSE_PARENT: 'HOUSE_PARENT',
  YOUTH: 'YOUTH',
  RETIREE: 'RETIREE',
  WORKING_WOMAN: 'WORKING_WOMAN',
  STUDENT: 'STUDENT',
  SOCIAL_EXPLORER: 'SOCIAL_EXPLORER',
  GAP_YEAR: 'GAP_YEAR',
  OTHER: 'OTHER'
};

exports.ContactRelation = exports.$Enums.ContactRelation = {
  FATHER: 'FATHER',
  MOTHER: 'MOTHER',
  CHILD: 'CHILD',
  OTHER: 'OTHER'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  NEEDS_REVISION: 'NEEDS_REVISION',
  OTHER: 'OTHER'
};

exports.UserRole = exports.$Enums.UserRole = {
  PLATFORM_ADMIN: 'PLATFORM_ADMIN',
  COMPANY_ADMIN: 'COMPANY_ADMIN',
  HR: 'HR',
  REVIEWER: 'REVIEWER',
  MEMBER: 'MEMBER',
  JOB_SEEKER: 'JOB_SEEKER'
};

exports.Prisma.ModelName = {
  ResumeAccessGrant: 'ResumeAccessGrant',
  ResumeViewLog: 'ResumeViewLog',
  Company: 'Company',
  AttendanceLog: 'AttendanceLog',
  ShiftSchedule: 'ShiftSchedule',
  PaySlip: 'PaySlip',
  JobPosting: 'JobPosting',
  JobApplication: 'JobApplication',
  MessageThread: 'MessageThread',
  MessageLog: 'MessageLog',
  UserResume: 'UserResume',
  Language: 'Language',
  Education: 'Education',
  Experience: 'Experience',
  Skill: 'Skill',
  Certificate: 'Certificate',
  Trait: 'Trait',
  Commute: 'Commute',
  WorkingTime: 'WorkingTime',
  WorkIdentity: 'WorkIdentity',
  JobType: 'JobType',
  EmergencyContact: 'EmergencyContact',
  Biography: 'Biography',
  Portfolio: 'Portfolio',
  ProfilePhoto: 'ProfilePhoto',
  ResumeVersion: 'ResumeVersion',
  ResumeVisibility: 'ResumeVisibility',
  ResumeReviewStatus: 'ResumeReviewStatus',
  ResumePDF: 'ResumePDF',
  UserReviewLog: 'UserReviewLog',
  ResumeReviewLog: 'ResumeReviewLog',
  UserReviewTag: 'UserReviewTag',
  ResumeReviewTag: 'ResumeReviewTag',
  ReviewTagOption: 'ReviewTagOption',
  User: 'User',
  IpRecord: 'IpRecord',
  DeviceRecord: 'DeviceRecord',
  AccountHistoryLog: 'AccountHistoryLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
