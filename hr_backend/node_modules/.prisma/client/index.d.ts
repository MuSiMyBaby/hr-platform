
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ResumeAccessGrant
 * 
 */
export type ResumeAccessGrant = $Result.DefaultSelection<Prisma.$ResumeAccessGrantPayload>
/**
 * Model ResumeViewLog
 * 
 */
export type ResumeViewLog = $Result.DefaultSelection<Prisma.$ResumeViewLogPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model AttendanceLog
 * 
 */
export type AttendanceLog = $Result.DefaultSelection<Prisma.$AttendanceLogPayload>
/**
 * Model ShiftSchedule
 * 
 */
export type ShiftSchedule = $Result.DefaultSelection<Prisma.$ShiftSchedulePayload>
/**
 * Model PaySlip
 * 
 */
export type PaySlip = $Result.DefaultSelection<Prisma.$PaySlipPayload>
/**
 * Model JobPosting
 * 
 */
export type JobPosting = $Result.DefaultSelection<Prisma.$JobPostingPayload>
/**
 * Model JobApplication
 * 
 */
export type JobApplication = $Result.DefaultSelection<Prisma.$JobApplicationPayload>
/**
 * Model MessageThread
 * 
 */
export type MessageThread = $Result.DefaultSelection<Prisma.$MessageThreadPayload>
/**
 * Model MessageLog
 * 
 */
export type MessageLog = $Result.DefaultSelection<Prisma.$MessageLogPayload>
/**
 * Model UserResume
 * 
 */
export type UserResume = $Result.DefaultSelection<Prisma.$UserResumePayload>
/**
 * Model Language
 * 
 */
export type Language = $Result.DefaultSelection<Prisma.$LanguagePayload>
/**
 * Model Education
 * 
 */
export type Education = $Result.DefaultSelection<Prisma.$EducationPayload>
/**
 * Model Experience
 * 
 */
export type Experience = $Result.DefaultSelection<Prisma.$ExperiencePayload>
/**
 * Model Skill
 * 
 */
export type Skill = $Result.DefaultSelection<Prisma.$SkillPayload>
/**
 * Model Certificate
 * 
 */
export type Certificate = $Result.DefaultSelection<Prisma.$CertificatePayload>
/**
 * Model Trait
 * 
 */
export type Trait = $Result.DefaultSelection<Prisma.$TraitPayload>
/**
 * Model Commute
 * 
 */
export type Commute = $Result.DefaultSelection<Prisma.$CommutePayload>
/**
 * Model WorkingTime
 * 
 */
export type WorkingTime = $Result.DefaultSelection<Prisma.$WorkingTimePayload>
/**
 * Model WorkIdentity
 * 
 */
export type WorkIdentity = $Result.DefaultSelection<Prisma.$WorkIdentityPayload>
/**
 * Model JobType
 * 
 */
export type JobType = $Result.DefaultSelection<Prisma.$JobTypePayload>
/**
 * Model EmergencyContact
 * 
 */
export type EmergencyContact = $Result.DefaultSelection<Prisma.$EmergencyContactPayload>
/**
 * Model Biography
 * 
 */
export type Biography = $Result.DefaultSelection<Prisma.$BiographyPayload>
/**
 * Model Portfolio
 * 
 */
export type Portfolio = $Result.DefaultSelection<Prisma.$PortfolioPayload>
/**
 * Model ProfilePhoto
 * 
 */
export type ProfilePhoto = $Result.DefaultSelection<Prisma.$ProfilePhotoPayload>
/**
 * Model ResumeVersion
 * 
 */
export type ResumeVersion = $Result.DefaultSelection<Prisma.$ResumeVersionPayload>
/**
 * Model ResumeVisibility
 * 
 */
export type ResumeVisibility = $Result.DefaultSelection<Prisma.$ResumeVisibilityPayload>
/**
 * Model ResumeReviewStatus
 * 
 */
export type ResumeReviewStatus = $Result.DefaultSelection<Prisma.$ResumeReviewStatusPayload>
/**
 * Model ResumePDF
 * 
 */
export type ResumePDF = $Result.DefaultSelection<Prisma.$ResumePDFPayload>
/**
 * Model UserReviewLog
 * 
 */
export type UserReviewLog = $Result.DefaultSelection<Prisma.$UserReviewLogPayload>
/**
 * Model ResumeReviewLog
 * 
 */
export type ResumeReviewLog = $Result.DefaultSelection<Prisma.$ResumeReviewLogPayload>
/**
 * Model UserReviewTag
 * 
 */
export type UserReviewTag = $Result.DefaultSelection<Prisma.$UserReviewTagPayload>
/**
 * Model ResumeReviewTag
 * 
 */
export type ResumeReviewTag = $Result.DefaultSelection<Prisma.$ResumeReviewTagPayload>
/**
 * Model ReviewTagOption
 * 
 */
export type ReviewTagOption = $Result.DefaultSelection<Prisma.$ReviewTagOptionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model IpRecord
 * 
 */
export type IpRecord = $Result.DefaultSelection<Prisma.$IpRecordPayload>
/**
 * Model DeviceRecord
 * 
 */
export type DeviceRecord = $Result.DefaultSelection<Prisma.$DeviceRecordPayload>
/**
 * Model AccountHistoryLog
 * 
 */
export type AccountHistoryLog = $Result.DefaultSelection<Prisma.$AccountHistoryLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const LanguageLevel: {
  BASIC: 'BASIC',
  INTERMEDIATECompany: 'INTERMEDIATECompany',
  UPPER_INTERMEDIATE: 'UPPER_INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  OTHER: 'OTHER'
};

export type LanguageLevel = (typeof LanguageLevel)[keyof typeof LanguageLevel]


export const EducationStatus: {
  ENROLLED: 'ENROLLED',
  SUSPENDED: 'SUSPENDED',
  GRADUATED: 'GRADUATED',
  DROPPED_OUT: 'DROPPED_OUT',
  OTHER: 'OTHER'
};

export type EducationStatus = (typeof EducationStatus)[keyof typeof EducationStatus]


export const ShiftType: {
  DAY: 'DAY',
  SWING: 'SWING',
  EVENING: 'EVENING',
  NIGHT: 'NIGHT',
  OTHER: 'OTHER'
};

export type ShiftType = (typeof ShiftType)[keyof typeof ShiftType]


export const WorkIdentityType: {
  FRESH_GRADUATE: 'FRESH_GRADUATE',
  EXPAT: 'EXPAT',
  FREELANCER: 'FREELANCER',
  HOUSE_PARENT: 'HOUSE_PARENT',
  YOUTH: 'YOUTH',
  RETIREE: 'RETIREE',
  WORKING_WOMAN: 'WORKING_WOMAN',
  STUDENT: 'STUDENT',
  SOCIAL_EXPLORER: 'SOCIAL_EXPLORER',
  GAP_YEAR: 'GAP_YEAR',
  OTHER: 'OTHER'
};

export type WorkIdentityType = (typeof WorkIdentityType)[keyof typeof WorkIdentityType]


export const JobTypeEnum: {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  INTERNSHIP: 'INTERNSHIP',
  FREELANCE: 'FREELANCE',
  OTHER: 'OTHER'
};

export type JobTypeEnum = (typeof JobTypeEnum)[keyof typeof JobTypeEnum]


export const ContactRelation: {
  FATHER: 'FATHER',
  MOTHER: 'MOTHER',
  CHILD: 'CHILD',
  OTHER: 'OTHER'
};

export type ContactRelation = (typeof ContactRelation)[keyof typeof ContactRelation]


export const CommuteMethod: {
  CAR: 'CAR',
  MOTORCYCLE: 'MOTORCYCLE',
  WALK: 'WALK',
  OTHER: 'OTHER'
};

export type CommuteMethod = (typeof CommuteMethod)[keyof typeof CommuteMethod]


export const ReviewStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  NEEDS_REVISION: 'NEEDS_REVISION',
  OTHER: 'OTHER'
};

export type ReviewStatus = (typeof ReviewStatus)[keyof typeof ReviewStatus]


export const UserRole: {
  PLATFORM_ADMIN: 'PLATFORM_ADMIN',
  COMPANY_ADMIN: 'COMPANY_ADMIN',
  HR: 'HR',
  REVIEWER: 'REVIEWER',
  MEMBER: 'MEMBER',
  JOB_SEEKER: 'JOB_SEEKER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CompanyType: {
  AGENCY: 'AGENCY',
  CLIENT: 'CLIENT',
  FREELANCER: 'FREELANCER',
  HEADHUNTER: 'HEADHUNTER',
  PLATFORM: 'PLATFORM',
  OTHER: 'OTHER'
};

export type CompanyType = (typeof CompanyType)[keyof typeof CompanyType]

}

export type LanguageLevel = $Enums.LanguageLevel

export const LanguageLevel: typeof $Enums.LanguageLevel

export type EducationStatus = $Enums.EducationStatus

export const EducationStatus: typeof $Enums.EducationStatus

export type ShiftType = $Enums.ShiftType

export const ShiftType: typeof $Enums.ShiftType

export type WorkIdentityType = $Enums.WorkIdentityType

export const WorkIdentityType: typeof $Enums.WorkIdentityType

export type JobTypeEnum = $Enums.JobTypeEnum

export const JobTypeEnum: typeof $Enums.JobTypeEnum

export type ContactRelation = $Enums.ContactRelation

export const ContactRelation: typeof $Enums.ContactRelation

export type CommuteMethod = $Enums.CommuteMethod

export const CommuteMethod: typeof $Enums.CommuteMethod

export type ReviewStatus = $Enums.ReviewStatus

export const ReviewStatus: typeof $Enums.ReviewStatus

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CompanyType = $Enums.CompanyType

export const CompanyType: typeof $Enums.CompanyType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ResumeAccessGrants
 * const resumeAccessGrants = await prisma.resumeAccessGrant.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ResumeAccessGrants
   * const resumeAccessGrants = await prisma.resumeAccessGrant.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.resumeAccessGrant`: Exposes CRUD operations for the **ResumeAccessGrant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeAccessGrants
    * const resumeAccessGrants = await prisma.resumeAccessGrant.findMany()
    * ```
    */
  get resumeAccessGrant(): Prisma.ResumeAccessGrantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeViewLog`: Exposes CRUD operations for the **ResumeViewLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeViewLogs
    * const resumeViewLogs = await prisma.resumeViewLog.findMany()
    * ```
    */
  get resumeViewLog(): Prisma.ResumeViewLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendanceLog`: Exposes CRUD operations for the **AttendanceLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttendanceLogs
    * const attendanceLogs = await prisma.attendanceLog.findMany()
    * ```
    */
  get attendanceLog(): Prisma.AttendanceLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shiftSchedule`: Exposes CRUD operations for the **ShiftSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShiftSchedules
    * const shiftSchedules = await prisma.shiftSchedule.findMany()
    * ```
    */
  get shiftSchedule(): Prisma.ShiftScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paySlip`: Exposes CRUD operations for the **PaySlip** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaySlips
    * const paySlips = await prisma.paySlip.findMany()
    * ```
    */
  get paySlip(): Prisma.PaySlipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobPosting`: Exposes CRUD operations for the **JobPosting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobPostings
    * const jobPostings = await prisma.jobPosting.findMany()
    * ```
    */
  get jobPosting(): Prisma.JobPostingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobApplication`: Exposes CRUD operations for the **JobApplication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobApplications
    * const jobApplications = await prisma.jobApplication.findMany()
    * ```
    */
  get jobApplication(): Prisma.JobApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageThread`: Exposes CRUD operations for the **MessageThread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageThreads
    * const messageThreads = await prisma.messageThread.findMany()
    * ```
    */
  get messageThread(): Prisma.MessageThreadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageLog`: Exposes CRUD operations for the **MessageLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageLogs
    * const messageLogs = await prisma.messageLog.findMany()
    * ```
    */
  get messageLog(): Prisma.MessageLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userResume`: Exposes CRUD operations for the **UserResume** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserResumes
    * const userResumes = await prisma.userResume.findMany()
    * ```
    */
  get userResume(): Prisma.UserResumeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.language`: Exposes CRUD operations for the **Language** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.language.findMany()
    * ```
    */
  get language(): Prisma.LanguageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.experience`: Exposes CRUD operations for the **Experience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Experiences
    * const experiences = await prisma.experience.findMany()
    * ```
    */
  get experience(): Prisma.ExperienceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificate`: Exposes CRUD operations for the **Certificate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Certificates
    * const certificates = await prisma.certificate.findMany()
    * ```
    */
  get certificate(): Prisma.CertificateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trait`: Exposes CRUD operations for the **Trait** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Traits
    * const traits = await prisma.trait.findMany()
    * ```
    */
  get trait(): Prisma.TraitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commute`: Exposes CRUD operations for the **Commute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commutes
    * const commutes = await prisma.commute.findMany()
    * ```
    */
  get commute(): Prisma.CommuteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workingTime`: Exposes CRUD operations for the **WorkingTime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkingTimes
    * const workingTimes = await prisma.workingTime.findMany()
    * ```
    */
  get workingTime(): Prisma.WorkingTimeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workIdentity`: Exposes CRUD operations for the **WorkIdentity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkIdentities
    * const workIdentities = await prisma.workIdentity.findMany()
    * ```
    */
  get workIdentity(): Prisma.WorkIdentityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobType`: Exposes CRUD operations for the **JobType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobTypes
    * const jobTypes = await prisma.jobType.findMany()
    * ```
    */
  get jobType(): Prisma.JobTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emergencyContact`: Exposes CRUD operations for the **EmergencyContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmergencyContacts
    * const emergencyContacts = await prisma.emergencyContact.findMany()
    * ```
    */
  get emergencyContact(): Prisma.EmergencyContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.biography`: Exposes CRUD operations for the **Biography** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Biographies
    * const biographies = await prisma.biography.findMany()
    * ```
    */
  get biography(): Prisma.BiographyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.portfolio`: Exposes CRUD operations for the **Portfolio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Portfolios
    * const portfolios = await prisma.portfolio.findMany()
    * ```
    */
  get portfolio(): Prisma.PortfolioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profilePhoto`: Exposes CRUD operations for the **ProfilePhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfilePhotos
    * const profilePhotos = await prisma.profilePhoto.findMany()
    * ```
    */
  get profilePhoto(): Prisma.ProfilePhotoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeVersion`: Exposes CRUD operations for the **ResumeVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeVersions
    * const resumeVersions = await prisma.resumeVersion.findMany()
    * ```
    */
  get resumeVersion(): Prisma.ResumeVersionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeVisibility`: Exposes CRUD operations for the **ResumeVisibility** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeVisibilities
    * const resumeVisibilities = await prisma.resumeVisibility.findMany()
    * ```
    */
  get resumeVisibility(): Prisma.ResumeVisibilityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeReviewStatus`: Exposes CRUD operations for the **ResumeReviewStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeReviewStatuses
    * const resumeReviewStatuses = await prisma.resumeReviewStatus.findMany()
    * ```
    */
  get resumeReviewStatus(): Prisma.ResumeReviewStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumePDF`: Exposes CRUD operations for the **ResumePDF** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumePDFS
    * const resumePDFS = await prisma.resumePDF.findMany()
    * ```
    */
  get resumePDF(): Prisma.ResumePDFDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userReviewLog`: Exposes CRUD operations for the **UserReviewLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserReviewLogs
    * const userReviewLogs = await prisma.userReviewLog.findMany()
    * ```
    */
  get userReviewLog(): Prisma.UserReviewLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeReviewLog`: Exposes CRUD operations for the **ResumeReviewLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeReviewLogs
    * const resumeReviewLogs = await prisma.resumeReviewLog.findMany()
    * ```
    */
  get resumeReviewLog(): Prisma.ResumeReviewLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userReviewTag`: Exposes CRUD operations for the **UserReviewTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserReviewTags
    * const userReviewTags = await prisma.userReviewTag.findMany()
    * ```
    */
  get userReviewTag(): Prisma.UserReviewTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeReviewTag`: Exposes CRUD operations for the **ResumeReviewTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeReviewTags
    * const resumeReviewTags = await prisma.resumeReviewTag.findMany()
    * ```
    */
  get resumeReviewTag(): Prisma.ResumeReviewTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reviewTagOption`: Exposes CRUD operations for the **ReviewTagOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewTagOptions
    * const reviewTagOptions = await prisma.reviewTagOption.findMany()
    * ```
    */
  get reviewTagOption(): Prisma.ReviewTagOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ipRecord`: Exposes CRUD operations for the **IpRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IpRecords
    * const ipRecords = await prisma.ipRecord.findMany()
    * ```
    */
  get ipRecord(): Prisma.IpRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.deviceRecord`: Exposes CRUD operations for the **DeviceRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceRecords
    * const deviceRecords = await prisma.deviceRecord.findMany()
    * ```
    */
  get deviceRecord(): Prisma.DeviceRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountHistoryLog`: Exposes CRUD operations for the **AccountHistoryLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountHistoryLogs
    * const accountHistoryLogs = await prisma.accountHistoryLog.findMany()
    * ```
    */
  get accountHistoryLog(): Prisma.AccountHistoryLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ResumeAccessGrant: 'ResumeAccessGrant',
    ResumeViewLog: 'ResumeViewLog',
    Company: 'Company',
    AttendanceLog: 'AttendanceLog',
    ShiftSchedule: 'ShiftSchedule',
    PaySlip: 'PaySlip',
    JobPosting: 'JobPosting',
    JobApplication: 'JobApplication',
    MessageThread: 'MessageThread',
    MessageLog: 'MessageLog',
    UserResume: 'UserResume',
    Language: 'Language',
    Education: 'Education',
    Experience: 'Experience',
    Skill: 'Skill',
    Certificate: 'Certificate',
    Trait: 'Trait',
    Commute: 'Commute',
    WorkingTime: 'WorkingTime',
    WorkIdentity: 'WorkIdentity',
    JobType: 'JobType',
    EmergencyContact: 'EmergencyContact',
    Biography: 'Biography',
    Portfolio: 'Portfolio',
    ProfilePhoto: 'ProfilePhoto',
    ResumeVersion: 'ResumeVersion',
    ResumeVisibility: 'ResumeVisibility',
    ResumeReviewStatus: 'ResumeReviewStatus',
    ResumePDF: 'ResumePDF',
    UserReviewLog: 'UserReviewLog',
    ResumeReviewLog: 'ResumeReviewLog',
    UserReviewTag: 'UserReviewTag',
    ResumeReviewTag: 'ResumeReviewTag',
    ReviewTagOption: 'ReviewTagOption',
    User: 'User',
    IpRecord: 'IpRecord',
    DeviceRecord: 'DeviceRecord',
    AccountHistoryLog: 'AccountHistoryLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "resumeAccessGrant" | "resumeViewLog" | "company" | "attendanceLog" | "shiftSchedule" | "paySlip" | "jobPosting" | "jobApplication" | "messageThread" | "messageLog" | "userResume" | "language" | "education" | "experience" | "skill" | "certificate" | "trait" | "commute" | "workingTime" | "workIdentity" | "jobType" | "emergencyContact" | "biography" | "portfolio" | "profilePhoto" | "resumeVersion" | "resumeVisibility" | "resumeReviewStatus" | "resumePDF" | "userReviewLog" | "resumeReviewLog" | "userReviewTag" | "resumeReviewTag" | "reviewTagOption" | "user" | "ipRecord" | "deviceRecord" | "accountHistoryLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ResumeAccessGrant: {
        payload: Prisma.$ResumeAccessGrantPayload<ExtArgs>
        fields: Prisma.ResumeAccessGrantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeAccessGrantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeAccessGrantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>
          }
          findFirst: {
            args: Prisma.ResumeAccessGrantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeAccessGrantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>
          }
          findMany: {
            args: Prisma.ResumeAccessGrantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>[]
          }
          create: {
            args: Prisma.ResumeAccessGrantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>
          }
          createMany: {
            args: Prisma.ResumeAccessGrantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeAccessGrantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>[]
          }
          delete: {
            args: Prisma.ResumeAccessGrantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>
          }
          update: {
            args: Prisma.ResumeAccessGrantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>
          }
          deleteMany: {
            args: Prisma.ResumeAccessGrantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeAccessGrantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeAccessGrantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>[]
          }
          upsert: {
            args: Prisma.ResumeAccessGrantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAccessGrantPayload>
          }
          aggregate: {
            args: Prisma.ResumeAccessGrantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeAccessGrant>
          }
          groupBy: {
            args: Prisma.ResumeAccessGrantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeAccessGrantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeAccessGrantCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeAccessGrantCountAggregateOutputType> | number
          }
        }
      }
      ResumeViewLog: {
        payload: Prisma.$ResumeViewLogPayload<ExtArgs>
        fields: Prisma.ResumeViewLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeViewLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeViewLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>
          }
          findFirst: {
            args: Prisma.ResumeViewLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeViewLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>
          }
          findMany: {
            args: Prisma.ResumeViewLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>[]
          }
          create: {
            args: Prisma.ResumeViewLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>
          }
          createMany: {
            args: Prisma.ResumeViewLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeViewLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>[]
          }
          delete: {
            args: Prisma.ResumeViewLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>
          }
          update: {
            args: Prisma.ResumeViewLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>
          }
          deleteMany: {
            args: Prisma.ResumeViewLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeViewLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeViewLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>[]
          }
          upsert: {
            args: Prisma.ResumeViewLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeViewLogPayload>
          }
          aggregate: {
            args: Prisma.ResumeViewLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeViewLog>
          }
          groupBy: {
            args: Prisma.ResumeViewLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeViewLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeViewLogCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeViewLogCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      AttendanceLog: {
        payload: Prisma.$AttendanceLogPayload<ExtArgs>
        fields: Prisma.AttendanceLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          findFirst: {
            args: Prisma.AttendanceLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          findMany: {
            args: Prisma.AttendanceLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>[]
          }
          create: {
            args: Prisma.AttendanceLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          createMany: {
            args: Prisma.AttendanceLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>[]
          }
          delete: {
            args: Prisma.AttendanceLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          update: {
            args: Prisma.AttendanceLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          deleteMany: {
            args: Prisma.AttendanceLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>[]
          }
          upsert: {
            args: Prisma.AttendanceLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          aggregate: {
            args: Prisma.AttendanceLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendanceLog>
          }
          groupBy: {
            args: Prisma.AttendanceLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceLogCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceLogCountAggregateOutputType> | number
          }
        }
      }
      ShiftSchedule: {
        payload: Prisma.$ShiftSchedulePayload<ExtArgs>
        fields: Prisma.ShiftScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShiftScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShiftScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>
          }
          findFirst: {
            args: Prisma.ShiftScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShiftScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>
          }
          findMany: {
            args: Prisma.ShiftScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>[]
          }
          create: {
            args: Prisma.ShiftScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>
          }
          createMany: {
            args: Prisma.ShiftScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShiftScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>[]
          }
          delete: {
            args: Prisma.ShiftScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>
          }
          update: {
            args: Prisma.ShiftScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>
          }
          deleteMany: {
            args: Prisma.ShiftScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShiftScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShiftScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>[]
          }
          upsert: {
            args: Prisma.ShiftScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSchedulePayload>
          }
          aggregate: {
            args: Prisma.ShiftScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShiftSchedule>
          }
          groupBy: {
            args: Prisma.ShiftScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShiftScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShiftScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ShiftScheduleCountAggregateOutputType> | number
          }
        }
      }
      PaySlip: {
        payload: Prisma.$PaySlipPayload<ExtArgs>
        fields: Prisma.PaySlipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaySlipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaySlipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          findFirst: {
            args: Prisma.PaySlipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaySlipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          findMany: {
            args: Prisma.PaySlipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>[]
          }
          create: {
            args: Prisma.PaySlipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          createMany: {
            args: Prisma.PaySlipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaySlipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>[]
          }
          delete: {
            args: Prisma.PaySlipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          update: {
            args: Prisma.PaySlipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          deleteMany: {
            args: Prisma.PaySlipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaySlipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaySlipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>[]
          }
          upsert: {
            args: Prisma.PaySlipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          aggregate: {
            args: Prisma.PaySlipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaySlip>
          }
          groupBy: {
            args: Prisma.PaySlipGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaySlipGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaySlipCountArgs<ExtArgs>
            result: $Utils.Optional<PaySlipCountAggregateOutputType> | number
          }
        }
      }
      JobPosting: {
        payload: Prisma.$JobPostingPayload<ExtArgs>
        fields: Prisma.JobPostingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobPostingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobPostingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          findFirst: {
            args: Prisma.JobPostingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobPostingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          findMany: {
            args: Prisma.JobPostingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>[]
          }
          create: {
            args: Prisma.JobPostingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          createMany: {
            args: Prisma.JobPostingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobPostingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>[]
          }
          delete: {
            args: Prisma.JobPostingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          update: {
            args: Prisma.JobPostingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          deleteMany: {
            args: Prisma.JobPostingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobPostingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobPostingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>[]
          }
          upsert: {
            args: Prisma.JobPostingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          aggregate: {
            args: Prisma.JobPostingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobPosting>
          }
          groupBy: {
            args: Prisma.JobPostingGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobPostingGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobPostingCountArgs<ExtArgs>
            result: $Utils.Optional<JobPostingCountAggregateOutputType> | number
          }
        }
      }
      JobApplication: {
        payload: Prisma.$JobApplicationPayload<ExtArgs>
        fields: Prisma.JobApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          findFirst: {
            args: Prisma.JobApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          findMany: {
            args: Prisma.JobApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>[]
          }
          create: {
            args: Prisma.JobApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          createMany: {
            args: Prisma.JobApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>[]
          }
          delete: {
            args: Prisma.JobApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          update: {
            args: Prisma.JobApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          deleteMany: {
            args: Prisma.JobApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>[]
          }
          upsert: {
            args: Prisma.JobApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          aggregate: {
            args: Prisma.JobApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobApplication>
          }
          groupBy: {
            args: Prisma.JobApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<JobApplicationCountAggregateOutputType> | number
          }
        }
      }
      MessageThread: {
        payload: Prisma.$MessageThreadPayload<ExtArgs>
        fields: Prisma.MessageThreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageThreadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageThreadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          findFirst: {
            args: Prisma.MessageThreadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageThreadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          findMany: {
            args: Prisma.MessageThreadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>[]
          }
          create: {
            args: Prisma.MessageThreadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          createMany: {
            args: Prisma.MessageThreadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageThreadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>[]
          }
          delete: {
            args: Prisma.MessageThreadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          update: {
            args: Prisma.MessageThreadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          deleteMany: {
            args: Prisma.MessageThreadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageThreadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageThreadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>[]
          }
          upsert: {
            args: Prisma.MessageThreadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          aggregate: {
            args: Prisma.MessageThreadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageThread>
          }
          groupBy: {
            args: Prisma.MessageThreadGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageThreadGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageThreadCountArgs<ExtArgs>
            result: $Utils.Optional<MessageThreadCountAggregateOutputType> | number
          }
        }
      }
      MessageLog: {
        payload: Prisma.$MessageLogPayload<ExtArgs>
        fields: Prisma.MessageLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>
          }
          findFirst: {
            args: Prisma.MessageLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>
          }
          findMany: {
            args: Prisma.MessageLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>[]
          }
          create: {
            args: Prisma.MessageLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>
          }
          createMany: {
            args: Prisma.MessageLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>[]
          }
          delete: {
            args: Prisma.MessageLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>
          }
          update: {
            args: Prisma.MessageLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>
          }
          deleteMany: {
            args: Prisma.MessageLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>[]
          }
          upsert: {
            args: Prisma.MessageLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageLogPayload>
          }
          aggregate: {
            args: Prisma.MessageLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageLog>
          }
          groupBy: {
            args: Prisma.MessageLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageLogCountArgs<ExtArgs>
            result: $Utils.Optional<MessageLogCountAggregateOutputType> | number
          }
        }
      }
      UserResume: {
        payload: Prisma.$UserResumePayload<ExtArgs>
        fields: Prisma.UserResumeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserResumeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserResumeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>
          }
          findFirst: {
            args: Prisma.UserResumeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserResumeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>
          }
          findMany: {
            args: Prisma.UserResumeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>[]
          }
          create: {
            args: Prisma.UserResumeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>
          }
          createMany: {
            args: Prisma.UserResumeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserResumeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>[]
          }
          delete: {
            args: Prisma.UserResumeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>
          }
          update: {
            args: Prisma.UserResumeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>
          }
          deleteMany: {
            args: Prisma.UserResumeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserResumeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserResumeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>[]
          }
          upsert: {
            args: Prisma.UserResumeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserResumePayload>
          }
          aggregate: {
            args: Prisma.UserResumeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserResume>
          }
          groupBy: {
            args: Prisma.UserResumeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserResumeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserResumeCountArgs<ExtArgs>
            result: $Utils.Optional<UserResumeCountAggregateOutputType> | number
          }
        }
      }
      Language: {
        payload: Prisma.$LanguagePayload<ExtArgs>
        fields: Prisma.LanguageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          findFirst: {
            args: Prisma.LanguageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          findMany: {
            args: Prisma.LanguageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>[]
          }
          create: {
            args: Prisma.LanguageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          createMany: {
            args: Prisma.LanguageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LanguageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>[]
          }
          delete: {
            args: Prisma.LanguageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          update: {
            args: Prisma.LanguageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          deleteMany: {
            args: Prisma.LanguageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LanguageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>[]
          }
          upsert: {
            args: Prisma.LanguageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          aggregate: {
            args: Prisma.LanguageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguage>
          }
          groupBy: {
            args: Prisma.LanguageGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageCountAggregateOutputType> | number
          }
        }
      }
      Education: {
        payload: Prisma.$EducationPayload<ExtArgs>
        fields: Prisma.EducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EducationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findFirst: {
            args: Prisma.EducationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findMany: {
            args: Prisma.EducationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          create: {
            args: Prisma.EducationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          createMany: {
            args: Prisma.EducationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EducationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          delete: {
            args: Prisma.EducationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          update: {
            args: Prisma.EducationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          deleteMany: {
            args: Prisma.EducationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EducationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EducationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          upsert: {
            args: Prisma.EducationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          aggregate: {
            args: Prisma.EducationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEducation>
          }
          groupBy: {
            args: Prisma.EducationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EducationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EducationCountArgs<ExtArgs>
            result: $Utils.Optional<EducationCountAggregateOutputType> | number
          }
        }
      }
      Experience: {
        payload: Prisma.$ExperiencePayload<ExtArgs>
        fields: Prisma.ExperienceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExperienceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExperienceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          findFirst: {
            args: Prisma.ExperienceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExperienceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          findMany: {
            args: Prisma.ExperienceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>[]
          }
          create: {
            args: Prisma.ExperienceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          createMany: {
            args: Prisma.ExperienceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExperienceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>[]
          }
          delete: {
            args: Prisma.ExperienceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          update: {
            args: Prisma.ExperienceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          deleteMany: {
            args: Prisma.ExperienceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExperienceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExperienceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>[]
          }
          upsert: {
            args: Prisma.ExperienceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          aggregate: {
            args: Prisma.ExperienceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExperience>
          }
          groupBy: {
            args: Prisma.ExperienceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExperienceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExperienceCountArgs<ExtArgs>
            result: $Utils.Optional<ExperienceCountAggregateOutputType> | number
          }
        }
      }
      Skill: {
        payload: Prisma.$SkillPayload<ExtArgs>
        fields: Prisma.SkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findFirst: {
            args: Prisma.SkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findMany: {
            args: Prisma.SkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          create: {
            args: Prisma.SkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          createMany: {
            args: Prisma.SkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          delete: {
            args: Prisma.SkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          update: {
            args: Prisma.SkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          deleteMany: {
            args: Prisma.SkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkillUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          upsert: {
            args: Prisma.SkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          aggregate: {
            args: Prisma.SkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkill>
          }
          groupBy: {
            args: Prisma.SkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillCountArgs<ExtArgs>
            result: $Utils.Optional<SkillCountAggregateOutputType> | number
          }
        }
      }
      Certificate: {
        payload: Prisma.$CertificatePayload<ExtArgs>
        fields: Prisma.CertificateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findFirst: {
            args: Prisma.CertificateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findMany: {
            args: Prisma.CertificateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          create: {
            args: Prisma.CertificateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          createMany: {
            args: Prisma.CertificateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          delete: {
            args: Prisma.CertificateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          update: {
            args: Prisma.CertificateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          deleteMany: {
            args: Prisma.CertificateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          upsert: {
            args: Prisma.CertificateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          aggregate: {
            args: Prisma.CertificateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificate>
          }
          groupBy: {
            args: Prisma.CertificateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateCountAggregateOutputType> | number
          }
        }
      }
      Trait: {
        payload: Prisma.$TraitPayload<ExtArgs>
        fields: Prisma.TraitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TraitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TraitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>
          }
          findFirst: {
            args: Prisma.TraitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TraitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>
          }
          findMany: {
            args: Prisma.TraitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>[]
          }
          create: {
            args: Prisma.TraitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>
          }
          createMany: {
            args: Prisma.TraitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TraitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>[]
          }
          delete: {
            args: Prisma.TraitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>
          }
          update: {
            args: Prisma.TraitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>
          }
          deleteMany: {
            args: Prisma.TraitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TraitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TraitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>[]
          }
          upsert: {
            args: Prisma.TraitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TraitPayload>
          }
          aggregate: {
            args: Prisma.TraitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrait>
          }
          groupBy: {
            args: Prisma.TraitGroupByArgs<ExtArgs>
            result: $Utils.Optional<TraitGroupByOutputType>[]
          }
          count: {
            args: Prisma.TraitCountArgs<ExtArgs>
            result: $Utils.Optional<TraitCountAggregateOutputType> | number
          }
        }
      }
      Commute: {
        payload: Prisma.$CommutePayload<ExtArgs>
        fields: Prisma.CommuteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommuteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommuteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>
          }
          findFirst: {
            args: Prisma.CommuteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommuteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>
          }
          findMany: {
            args: Prisma.CommuteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>[]
          }
          create: {
            args: Prisma.CommuteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>
          }
          createMany: {
            args: Prisma.CommuteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommuteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>[]
          }
          delete: {
            args: Prisma.CommuteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>
          }
          update: {
            args: Prisma.CommuteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>
          }
          deleteMany: {
            args: Prisma.CommuteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommuteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommuteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>[]
          }
          upsert: {
            args: Prisma.CommuteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommutePayload>
          }
          aggregate: {
            args: Prisma.CommuteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommute>
          }
          groupBy: {
            args: Prisma.CommuteGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommuteGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommuteCountArgs<ExtArgs>
            result: $Utils.Optional<CommuteCountAggregateOutputType> | number
          }
        }
      }
      WorkingTime: {
        payload: Prisma.$WorkingTimePayload<ExtArgs>
        fields: Prisma.WorkingTimeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkingTimeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkingTimeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>
          }
          findFirst: {
            args: Prisma.WorkingTimeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkingTimeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>
          }
          findMany: {
            args: Prisma.WorkingTimeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>[]
          }
          create: {
            args: Prisma.WorkingTimeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>
          }
          createMany: {
            args: Prisma.WorkingTimeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkingTimeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>[]
          }
          delete: {
            args: Prisma.WorkingTimeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>
          }
          update: {
            args: Prisma.WorkingTimeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>
          }
          deleteMany: {
            args: Prisma.WorkingTimeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkingTimeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkingTimeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>[]
          }
          upsert: {
            args: Prisma.WorkingTimeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimePayload>
          }
          aggregate: {
            args: Prisma.WorkingTimeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkingTime>
          }
          groupBy: {
            args: Prisma.WorkingTimeGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkingTimeGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkingTimeCountArgs<ExtArgs>
            result: $Utils.Optional<WorkingTimeCountAggregateOutputType> | number
          }
        }
      }
      WorkIdentity: {
        payload: Prisma.$WorkIdentityPayload<ExtArgs>
        fields: Prisma.WorkIdentityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkIdentityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkIdentityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>
          }
          findFirst: {
            args: Prisma.WorkIdentityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkIdentityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>
          }
          findMany: {
            args: Prisma.WorkIdentityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>[]
          }
          create: {
            args: Prisma.WorkIdentityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>
          }
          createMany: {
            args: Prisma.WorkIdentityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkIdentityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>[]
          }
          delete: {
            args: Prisma.WorkIdentityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>
          }
          update: {
            args: Prisma.WorkIdentityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>
          }
          deleteMany: {
            args: Prisma.WorkIdentityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkIdentityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkIdentityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>[]
          }
          upsert: {
            args: Prisma.WorkIdentityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkIdentityPayload>
          }
          aggregate: {
            args: Prisma.WorkIdentityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkIdentity>
          }
          groupBy: {
            args: Prisma.WorkIdentityGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkIdentityGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkIdentityCountArgs<ExtArgs>
            result: $Utils.Optional<WorkIdentityCountAggregateOutputType> | number
          }
        }
      }
      JobType: {
        payload: Prisma.$JobTypePayload<ExtArgs>
        fields: Prisma.JobTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>
          }
          findFirst: {
            args: Prisma.JobTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>
          }
          findMany: {
            args: Prisma.JobTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>[]
          }
          create: {
            args: Prisma.JobTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>
          }
          createMany: {
            args: Prisma.JobTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>[]
          }
          delete: {
            args: Prisma.JobTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>
          }
          update: {
            args: Prisma.JobTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>
          }
          deleteMany: {
            args: Prisma.JobTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>[]
          }
          upsert: {
            args: Prisma.JobTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobTypePayload>
          }
          aggregate: {
            args: Prisma.JobTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobType>
          }
          groupBy: {
            args: Prisma.JobTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobTypeCountArgs<ExtArgs>
            result: $Utils.Optional<JobTypeCountAggregateOutputType> | number
          }
        }
      }
      EmergencyContact: {
        payload: Prisma.$EmergencyContactPayload<ExtArgs>
        fields: Prisma.EmergencyContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmergencyContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmergencyContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          findFirst: {
            args: Prisma.EmergencyContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmergencyContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          findMany: {
            args: Prisma.EmergencyContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
          }
          create: {
            args: Prisma.EmergencyContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          createMany: {
            args: Prisma.EmergencyContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmergencyContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
          }
          delete: {
            args: Prisma.EmergencyContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          update: {
            args: Prisma.EmergencyContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          deleteMany: {
            args: Prisma.EmergencyContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmergencyContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmergencyContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
          }
          upsert: {
            args: Prisma.EmergencyContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          aggregate: {
            args: Prisma.EmergencyContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmergencyContact>
          }
          groupBy: {
            args: Prisma.EmergencyContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmergencyContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmergencyContactCountArgs<ExtArgs>
            result: $Utils.Optional<EmergencyContactCountAggregateOutputType> | number
          }
        }
      }
      Biography: {
        payload: Prisma.$BiographyPayload<ExtArgs>
        fields: Prisma.BiographyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BiographyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BiographyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>
          }
          findFirst: {
            args: Prisma.BiographyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BiographyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>
          }
          findMany: {
            args: Prisma.BiographyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>[]
          }
          create: {
            args: Prisma.BiographyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>
          }
          createMany: {
            args: Prisma.BiographyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BiographyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>[]
          }
          delete: {
            args: Prisma.BiographyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>
          }
          update: {
            args: Prisma.BiographyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>
          }
          deleteMany: {
            args: Prisma.BiographyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BiographyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BiographyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>[]
          }
          upsert: {
            args: Prisma.BiographyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiographyPayload>
          }
          aggregate: {
            args: Prisma.BiographyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBiography>
          }
          groupBy: {
            args: Prisma.BiographyGroupByArgs<ExtArgs>
            result: $Utils.Optional<BiographyGroupByOutputType>[]
          }
          count: {
            args: Prisma.BiographyCountArgs<ExtArgs>
            result: $Utils.Optional<BiographyCountAggregateOutputType> | number
          }
        }
      }
      Portfolio: {
        payload: Prisma.$PortfolioPayload<ExtArgs>
        fields: Prisma.PortfolioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PortfolioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PortfolioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          findFirst: {
            args: Prisma.PortfolioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PortfolioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          findMany: {
            args: Prisma.PortfolioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          create: {
            args: Prisma.PortfolioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          createMany: {
            args: Prisma.PortfolioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PortfolioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          delete: {
            args: Prisma.PortfolioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          update: {
            args: Prisma.PortfolioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          deleteMany: {
            args: Prisma.PortfolioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PortfolioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PortfolioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          upsert: {
            args: Prisma.PortfolioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          aggregate: {
            args: Prisma.PortfolioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePortfolio>
          }
          groupBy: {
            args: Prisma.PortfolioGroupByArgs<ExtArgs>
            result: $Utils.Optional<PortfolioGroupByOutputType>[]
          }
          count: {
            args: Prisma.PortfolioCountArgs<ExtArgs>
            result: $Utils.Optional<PortfolioCountAggregateOutputType> | number
          }
        }
      }
      ProfilePhoto: {
        payload: Prisma.$ProfilePhotoPayload<ExtArgs>
        fields: Prisma.ProfilePhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilePhotoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilePhotoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>
          }
          findFirst: {
            args: Prisma.ProfilePhotoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilePhotoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>
          }
          findMany: {
            args: Prisma.ProfilePhotoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>[]
          }
          create: {
            args: Prisma.ProfilePhotoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>
          }
          createMany: {
            args: Prisma.ProfilePhotoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfilePhotoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>[]
          }
          delete: {
            args: Prisma.ProfilePhotoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>
          }
          update: {
            args: Prisma.ProfilePhotoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>
          }
          deleteMany: {
            args: Prisma.ProfilePhotoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilePhotoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfilePhotoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>[]
          }
          upsert: {
            args: Prisma.ProfilePhotoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePhotoPayload>
          }
          aggregate: {
            args: Prisma.ProfilePhotoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfilePhoto>
          }
          groupBy: {
            args: Prisma.ProfilePhotoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfilePhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilePhotoCountArgs<ExtArgs>
            result: $Utils.Optional<ProfilePhotoCountAggregateOutputType> | number
          }
        }
      }
      ResumeVersion: {
        payload: Prisma.$ResumeVersionPayload<ExtArgs>
        fields: Prisma.ResumeVersionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeVersionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeVersionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>
          }
          findFirst: {
            args: Prisma.ResumeVersionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeVersionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>
          }
          findMany: {
            args: Prisma.ResumeVersionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>[]
          }
          create: {
            args: Prisma.ResumeVersionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>
          }
          createMany: {
            args: Prisma.ResumeVersionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeVersionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>[]
          }
          delete: {
            args: Prisma.ResumeVersionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>
          }
          update: {
            args: Prisma.ResumeVersionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>
          }
          deleteMany: {
            args: Prisma.ResumeVersionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeVersionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeVersionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>[]
          }
          upsert: {
            args: Prisma.ResumeVersionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVersionPayload>
          }
          aggregate: {
            args: Prisma.ResumeVersionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeVersion>
          }
          groupBy: {
            args: Prisma.ResumeVersionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeVersionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeVersionCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeVersionCountAggregateOutputType> | number
          }
        }
      }
      ResumeVisibility: {
        payload: Prisma.$ResumeVisibilityPayload<ExtArgs>
        fields: Prisma.ResumeVisibilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeVisibilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeVisibilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>
          }
          findFirst: {
            args: Prisma.ResumeVisibilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeVisibilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>
          }
          findMany: {
            args: Prisma.ResumeVisibilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>[]
          }
          create: {
            args: Prisma.ResumeVisibilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>
          }
          createMany: {
            args: Prisma.ResumeVisibilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeVisibilityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>[]
          }
          delete: {
            args: Prisma.ResumeVisibilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>
          }
          update: {
            args: Prisma.ResumeVisibilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>
          }
          deleteMany: {
            args: Prisma.ResumeVisibilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeVisibilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeVisibilityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>[]
          }
          upsert: {
            args: Prisma.ResumeVisibilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeVisibilityPayload>
          }
          aggregate: {
            args: Prisma.ResumeVisibilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeVisibility>
          }
          groupBy: {
            args: Prisma.ResumeVisibilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeVisibilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeVisibilityCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeVisibilityCountAggregateOutputType> | number
          }
        }
      }
      ResumeReviewStatus: {
        payload: Prisma.$ResumeReviewStatusPayload<ExtArgs>
        fields: Prisma.ResumeReviewStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeReviewStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeReviewStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>
          }
          findFirst: {
            args: Prisma.ResumeReviewStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeReviewStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>
          }
          findMany: {
            args: Prisma.ResumeReviewStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>[]
          }
          create: {
            args: Prisma.ResumeReviewStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>
          }
          createMany: {
            args: Prisma.ResumeReviewStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeReviewStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>[]
          }
          delete: {
            args: Prisma.ResumeReviewStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>
          }
          update: {
            args: Prisma.ResumeReviewStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>
          }
          deleteMany: {
            args: Prisma.ResumeReviewStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeReviewStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeReviewStatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>[]
          }
          upsert: {
            args: Prisma.ResumeReviewStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewStatusPayload>
          }
          aggregate: {
            args: Prisma.ResumeReviewStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeReviewStatus>
          }
          groupBy: {
            args: Prisma.ResumeReviewStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeReviewStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeReviewStatusCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeReviewStatusCountAggregateOutputType> | number
          }
        }
      }
      ResumePDF: {
        payload: Prisma.$ResumePDFPayload<ExtArgs>
        fields: Prisma.ResumePDFFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumePDFFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumePDFFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>
          }
          findFirst: {
            args: Prisma.ResumePDFFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumePDFFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>
          }
          findMany: {
            args: Prisma.ResumePDFFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>[]
          }
          create: {
            args: Prisma.ResumePDFCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>
          }
          createMany: {
            args: Prisma.ResumePDFCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumePDFCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>[]
          }
          delete: {
            args: Prisma.ResumePDFDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>
          }
          update: {
            args: Prisma.ResumePDFUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>
          }
          deleteMany: {
            args: Prisma.ResumePDFDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumePDFUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumePDFUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>[]
          }
          upsert: {
            args: Prisma.ResumePDFUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePDFPayload>
          }
          aggregate: {
            args: Prisma.ResumePDFAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumePDF>
          }
          groupBy: {
            args: Prisma.ResumePDFGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumePDFGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumePDFCountArgs<ExtArgs>
            result: $Utils.Optional<ResumePDFCountAggregateOutputType> | number
          }
        }
      }
      UserReviewLog: {
        payload: Prisma.$UserReviewLogPayload<ExtArgs>
        fields: Prisma.UserReviewLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserReviewLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserReviewLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>
          }
          findFirst: {
            args: Prisma.UserReviewLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserReviewLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>
          }
          findMany: {
            args: Prisma.UserReviewLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>[]
          }
          create: {
            args: Prisma.UserReviewLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>
          }
          createMany: {
            args: Prisma.UserReviewLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserReviewLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>[]
          }
          delete: {
            args: Prisma.UserReviewLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>
          }
          update: {
            args: Prisma.UserReviewLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>
          }
          deleteMany: {
            args: Prisma.UserReviewLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserReviewLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserReviewLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>[]
          }
          upsert: {
            args: Prisma.UserReviewLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewLogPayload>
          }
          aggregate: {
            args: Prisma.UserReviewLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserReviewLog>
          }
          groupBy: {
            args: Prisma.UserReviewLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserReviewLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserReviewLogCountArgs<ExtArgs>
            result: $Utils.Optional<UserReviewLogCountAggregateOutputType> | number
          }
        }
      }
      ResumeReviewLog: {
        payload: Prisma.$ResumeReviewLogPayload<ExtArgs>
        fields: Prisma.ResumeReviewLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeReviewLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeReviewLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>
          }
          findFirst: {
            args: Prisma.ResumeReviewLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeReviewLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>
          }
          findMany: {
            args: Prisma.ResumeReviewLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>[]
          }
          create: {
            args: Prisma.ResumeReviewLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>
          }
          createMany: {
            args: Prisma.ResumeReviewLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeReviewLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>[]
          }
          delete: {
            args: Prisma.ResumeReviewLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>
          }
          update: {
            args: Prisma.ResumeReviewLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>
          }
          deleteMany: {
            args: Prisma.ResumeReviewLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeReviewLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeReviewLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>[]
          }
          upsert: {
            args: Prisma.ResumeReviewLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewLogPayload>
          }
          aggregate: {
            args: Prisma.ResumeReviewLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeReviewLog>
          }
          groupBy: {
            args: Prisma.ResumeReviewLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeReviewLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeReviewLogCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeReviewLogCountAggregateOutputType> | number
          }
        }
      }
      UserReviewTag: {
        payload: Prisma.$UserReviewTagPayload<ExtArgs>
        fields: Prisma.UserReviewTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserReviewTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserReviewTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>
          }
          findFirst: {
            args: Prisma.UserReviewTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserReviewTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>
          }
          findMany: {
            args: Prisma.UserReviewTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>[]
          }
          create: {
            args: Prisma.UserReviewTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>
          }
          createMany: {
            args: Prisma.UserReviewTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserReviewTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>[]
          }
          delete: {
            args: Prisma.UserReviewTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>
          }
          update: {
            args: Prisma.UserReviewTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>
          }
          deleteMany: {
            args: Prisma.UserReviewTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserReviewTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserReviewTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>[]
          }
          upsert: {
            args: Prisma.UserReviewTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserReviewTagPayload>
          }
          aggregate: {
            args: Prisma.UserReviewTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserReviewTag>
          }
          groupBy: {
            args: Prisma.UserReviewTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserReviewTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserReviewTagCountArgs<ExtArgs>
            result: $Utils.Optional<UserReviewTagCountAggregateOutputType> | number
          }
        }
      }
      ResumeReviewTag: {
        payload: Prisma.$ResumeReviewTagPayload<ExtArgs>
        fields: Prisma.ResumeReviewTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeReviewTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeReviewTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>
          }
          findFirst: {
            args: Prisma.ResumeReviewTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeReviewTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>
          }
          findMany: {
            args: Prisma.ResumeReviewTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>[]
          }
          create: {
            args: Prisma.ResumeReviewTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>
          }
          createMany: {
            args: Prisma.ResumeReviewTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeReviewTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>[]
          }
          delete: {
            args: Prisma.ResumeReviewTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>
          }
          update: {
            args: Prisma.ResumeReviewTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>
          }
          deleteMany: {
            args: Prisma.ResumeReviewTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeReviewTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeReviewTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>[]
          }
          upsert: {
            args: Prisma.ResumeReviewTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeReviewTagPayload>
          }
          aggregate: {
            args: Prisma.ResumeReviewTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeReviewTag>
          }
          groupBy: {
            args: Prisma.ResumeReviewTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeReviewTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeReviewTagCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeReviewTagCountAggregateOutputType> | number
          }
        }
      }
      ReviewTagOption: {
        payload: Prisma.$ReviewTagOptionPayload<ExtArgs>
        fields: Prisma.ReviewTagOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewTagOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewTagOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>
          }
          findFirst: {
            args: Prisma.ReviewTagOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewTagOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>
          }
          findMany: {
            args: Prisma.ReviewTagOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>[]
          }
          create: {
            args: Prisma.ReviewTagOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>
          }
          createMany: {
            args: Prisma.ReviewTagOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewTagOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>[]
          }
          delete: {
            args: Prisma.ReviewTagOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>
          }
          update: {
            args: Prisma.ReviewTagOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>
          }
          deleteMany: {
            args: Prisma.ReviewTagOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewTagOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewTagOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>[]
          }
          upsert: {
            args: Prisma.ReviewTagOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewTagOptionPayload>
          }
          aggregate: {
            args: Prisma.ReviewTagOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviewTagOption>
          }
          groupBy: {
            args: Prisma.ReviewTagOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewTagOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewTagOptionCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewTagOptionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      IpRecord: {
        payload: Prisma.$IpRecordPayload<ExtArgs>
        fields: Prisma.IpRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IpRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IpRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>
          }
          findFirst: {
            args: Prisma.IpRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IpRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>
          }
          findMany: {
            args: Prisma.IpRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>[]
          }
          create: {
            args: Prisma.IpRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>
          }
          createMany: {
            args: Prisma.IpRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IpRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>[]
          }
          delete: {
            args: Prisma.IpRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>
          }
          update: {
            args: Prisma.IpRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>
          }
          deleteMany: {
            args: Prisma.IpRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IpRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IpRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>[]
          }
          upsert: {
            args: Prisma.IpRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpRecordPayload>
          }
          aggregate: {
            args: Prisma.IpRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIpRecord>
          }
          groupBy: {
            args: Prisma.IpRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<IpRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.IpRecordCountArgs<ExtArgs>
            result: $Utils.Optional<IpRecordCountAggregateOutputType> | number
          }
        }
      }
      DeviceRecord: {
        payload: Prisma.$DeviceRecordPayload<ExtArgs>
        fields: Prisma.DeviceRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>
          }
          findFirst: {
            args: Prisma.DeviceRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>
          }
          findMany: {
            args: Prisma.DeviceRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>[]
          }
          create: {
            args: Prisma.DeviceRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>
          }
          createMany: {
            args: Prisma.DeviceRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>[]
          }
          delete: {
            args: Prisma.DeviceRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>
          }
          update: {
            args: Prisma.DeviceRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>
          }
          deleteMany: {
            args: Prisma.DeviceRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeviceRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>[]
          }
          upsert: {
            args: Prisma.DeviceRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRecordPayload>
          }
          aggregate: {
            args: Prisma.DeviceRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeviceRecord>
          }
          groupBy: {
            args: Prisma.DeviceRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceRecordCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceRecordCountAggregateOutputType> | number
          }
        }
      }
      AccountHistoryLog: {
        payload: Prisma.$AccountHistoryLogPayload<ExtArgs>
        fields: Prisma.AccountHistoryLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountHistoryLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountHistoryLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>
          }
          findFirst: {
            args: Prisma.AccountHistoryLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountHistoryLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>
          }
          findMany: {
            args: Prisma.AccountHistoryLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>[]
          }
          create: {
            args: Prisma.AccountHistoryLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>
          }
          createMany: {
            args: Prisma.AccountHistoryLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountHistoryLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>[]
          }
          delete: {
            args: Prisma.AccountHistoryLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>
          }
          update: {
            args: Prisma.AccountHistoryLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>
          }
          deleteMany: {
            args: Prisma.AccountHistoryLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountHistoryLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountHistoryLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>[]
          }
          upsert: {
            args: Prisma.AccountHistoryLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountHistoryLogPayload>
          }
          aggregate: {
            args: Prisma.AccountHistoryLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountHistoryLog>
          }
          groupBy: {
            args: Prisma.AccountHistoryLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountHistoryLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountHistoryLogCountArgs<ExtArgs>
            result: $Utils.Optional<AccountHistoryLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    resumeAccessGrant?: ResumeAccessGrantOmit
    resumeViewLog?: ResumeViewLogOmit
    company?: CompanyOmit
    attendanceLog?: AttendanceLogOmit
    shiftSchedule?: ShiftScheduleOmit
    paySlip?: PaySlipOmit
    jobPosting?: JobPostingOmit
    jobApplication?: JobApplicationOmit
    messageThread?: MessageThreadOmit
    messageLog?: MessageLogOmit
    userResume?: UserResumeOmit
    language?: LanguageOmit
    education?: EducationOmit
    experience?: ExperienceOmit
    skill?: SkillOmit
    certificate?: CertificateOmit
    trait?: TraitOmit
    commute?: CommuteOmit
    workingTime?: WorkingTimeOmit
    workIdentity?: WorkIdentityOmit
    jobType?: JobTypeOmit
    emergencyContact?: EmergencyContactOmit
    biography?: BiographyOmit
    portfolio?: PortfolioOmit
    profilePhoto?: ProfilePhotoOmit
    resumeVersion?: ResumeVersionOmit
    resumeVisibility?: ResumeVisibilityOmit
    resumeReviewStatus?: ResumeReviewStatusOmit
    resumePDF?: ResumePDFOmit
    userReviewLog?: UserReviewLogOmit
    resumeReviewLog?: ResumeReviewLogOmit
    userReviewTag?: UserReviewTagOmit
    resumeReviewTag?: ResumeReviewTagOmit
    reviewTagOption?: ReviewTagOptionOmit
    user?: UserOmit
    ipRecord?: IpRecordOmit
    deviceRecord?: DeviceRecordOmit
    accountHistoryLog?: AccountHistoryLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    users: number
    resumes: number
    attendanceLogs: number
    schedules: number
    issuedPaySlips: number
    jobPosting: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | CompanyCountOutputTypeCountUsersArgs
    resumes?: boolean | CompanyCountOutputTypeCountResumesArgs
    attendanceLogs?: boolean | CompanyCountOutputTypeCountAttendanceLogsArgs
    schedules?: boolean | CompanyCountOutputTypeCountSchedulesArgs
    issuedPaySlips?: boolean | CompanyCountOutputTypeCountIssuedPaySlipsArgs
    jobPosting?: boolean | CompanyCountOutputTypeCountJobPostingArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserResumeWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountAttendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLogWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftScheduleWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountIssuedPaySlipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaySlipWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountJobPostingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingWhereInput
  }


  /**
   * Count Type ShiftScheduleCountOutputType
   */

  export type ShiftScheduleCountOutputType = {
    attendanceLogs: number
  }

  export type ShiftScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceLogs?: boolean | ShiftScheduleCountOutputTypeCountAttendanceLogsArgs
  }

  // Custom InputTypes
  /**
   * ShiftScheduleCountOutputType without action
   */
  export type ShiftScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftScheduleCountOutputType
     */
    select?: ShiftScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShiftScheduleCountOutputType without action
   */
  export type ShiftScheduleCountOutputTypeCountAttendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLogWhereInput
  }


  /**
   * Count Type JobPostingCountOutputType
   */

  export type JobPostingCountOutputType = {
    applications: number
  }

  export type JobPostingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | JobPostingCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * JobPostingCountOutputType without action
   */
  export type JobPostingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostingCountOutputType
     */
    select?: JobPostingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobPostingCountOutputType without action
   */
  export type JobPostingCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobApplicationWhereInput
  }


  /**
   * Count Type MessageThreadCountOutputType
   */

  export type MessageThreadCountOutputType = {
    messages: number
  }

  export type MessageThreadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | MessageThreadCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * MessageThreadCountOutputType without action
   */
  export type MessageThreadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThreadCountOutputType
     */
    select?: MessageThreadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageThreadCountOutputType without action
   */
  export type MessageThreadCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageLogWhereInput
  }


  /**
   * Count Type UserResumeCountOutputType
   */

  export type UserResumeCountOutputType = {
    languages: number
    educations: number
    experiences: number
    skills: number
    certificates: number
    traits: number
    commuteOptions: number
    workingTimes: number
    workIdentities: number
    jobPreferences: number
    emergencyContacts: number
    portfolio: number
    profilePhotos: number
    resumeVersions: number
    resumeReviewStatuses: number
    resumeViewLogs: number
    resumePDFs: number
    resumeReviewLogs: number
    messageThreads: number
    accessGrants: number
    jobapplication: number
  }

  export type UserResumeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    languages?: boolean | UserResumeCountOutputTypeCountLanguagesArgs
    educations?: boolean | UserResumeCountOutputTypeCountEducationsArgs
    experiences?: boolean | UserResumeCountOutputTypeCountExperiencesArgs
    skills?: boolean | UserResumeCountOutputTypeCountSkillsArgs
    certificates?: boolean | UserResumeCountOutputTypeCountCertificatesArgs
    traits?: boolean | UserResumeCountOutputTypeCountTraitsArgs
    commuteOptions?: boolean | UserResumeCountOutputTypeCountCommuteOptionsArgs
    workingTimes?: boolean | UserResumeCountOutputTypeCountWorkingTimesArgs
    workIdentities?: boolean | UserResumeCountOutputTypeCountWorkIdentitiesArgs
    jobPreferences?: boolean | UserResumeCountOutputTypeCountJobPreferencesArgs
    emergencyContacts?: boolean | UserResumeCountOutputTypeCountEmergencyContactsArgs
    portfolio?: boolean | UserResumeCountOutputTypeCountPortfolioArgs
    profilePhotos?: boolean | UserResumeCountOutputTypeCountProfilePhotosArgs
    resumeVersions?: boolean | UserResumeCountOutputTypeCountResumeVersionsArgs
    resumeReviewStatuses?: boolean | UserResumeCountOutputTypeCountResumeReviewStatusesArgs
    resumeViewLogs?: boolean | UserResumeCountOutputTypeCountResumeViewLogsArgs
    resumePDFs?: boolean | UserResumeCountOutputTypeCountResumePDFsArgs
    resumeReviewLogs?: boolean | UserResumeCountOutputTypeCountResumeReviewLogsArgs
    messageThreads?: boolean | UserResumeCountOutputTypeCountMessageThreadsArgs
    accessGrants?: boolean | UserResumeCountOutputTypeCountAccessGrantsArgs
    jobapplication?: boolean | UserResumeCountOutputTypeCountJobapplicationArgs
  }

  // Custom InputTypes
  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResumeCountOutputType
     */
    select?: UserResumeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountLanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountCertificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountTraitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TraitWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountCommuteOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommuteWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountWorkingTimesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkingTimeWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountWorkIdentitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkIdentityWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountJobPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobTypeWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountEmergencyContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmergencyContactWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountPortfolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountProfilePhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePhotoWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountResumeVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeVersionWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountResumeReviewStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeReviewStatusWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountResumeViewLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeViewLogWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountResumePDFsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumePDFWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountResumeReviewLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeReviewLogWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountMessageThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageThreadWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountAccessGrantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeAccessGrantWhereInput
  }

  /**
   * UserResumeCountOutputType without action
   */
  export type UserResumeCountOutputTypeCountJobapplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobApplicationWhereInput
  }


  /**
   * Count Type UserReviewLogCountOutputType
   */

  export type UserReviewLogCountOutputType = {
    tags: number
  }

  export type UserReviewLogCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | UserReviewLogCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * UserReviewLogCountOutputType without action
   */
  export type UserReviewLogCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLogCountOutputType
     */
    select?: UserReviewLogCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserReviewLogCountOutputType without action
   */
  export type UserReviewLogCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserReviewTagWhereInput
  }


  /**
   * Count Type ResumeReviewLogCountOutputType
   */

  export type ResumeReviewLogCountOutputType = {
    tags: number
  }

  export type ResumeReviewLogCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | ResumeReviewLogCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * ResumeReviewLogCountOutputType without action
   */
  export type ResumeReviewLogCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLogCountOutputType
     */
    select?: ResumeReviewLogCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResumeReviewLogCountOutputType without action
   */
  export type ResumeReviewLogCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeReviewTagWhereInput
  }


  /**
   * Count Type ReviewTagOptionCountOutputType
   */

  export type ReviewTagOptionCountOutputType = {
    resumeTags: number
    userTags: number
  }

  export type ReviewTagOptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resumeTags?: boolean | ReviewTagOptionCountOutputTypeCountResumeTagsArgs
    userTags?: boolean | ReviewTagOptionCountOutputTypeCountUserTagsArgs
  }

  // Custom InputTypes
  /**
   * ReviewTagOptionCountOutputType without action
   */
  export type ReviewTagOptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOptionCountOutputType
     */
    select?: ReviewTagOptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReviewTagOptionCountOutputType without action
   */
  export type ReviewTagOptionCountOutputTypeCountResumeTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeReviewTagWhereInput
  }

  /**
   * ReviewTagOptionCountOutputType without action
   */
  export type ReviewTagOptionCountOutputTypeCountUserTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserReviewTagWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    resumes: number
    ipRecords: number
    deviceRecords: number
    resumeViewLogs: number
    resumesUserViewed: number
    resumeReviewsGiven: number
    userReviewsGiven: number
    userReviewsReceived: number
    accountActionsTaken: number
    accountActionsReceived: number
    resumesGrantedByMe: number
    resumesGrantedToMe: number
    attendanceLogs: number
    schedules: number
    paySlips: number
    sentMessages: number
    createdThreads: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resumes?: boolean | UserCountOutputTypeCountResumesArgs
    ipRecords?: boolean | UserCountOutputTypeCountIpRecordsArgs
    deviceRecords?: boolean | UserCountOutputTypeCountDeviceRecordsArgs
    resumeViewLogs?: boolean | UserCountOutputTypeCountResumeViewLogsArgs
    resumesUserViewed?: boolean | UserCountOutputTypeCountResumesUserViewedArgs
    resumeReviewsGiven?: boolean | UserCountOutputTypeCountResumeReviewsGivenArgs
    userReviewsGiven?: boolean | UserCountOutputTypeCountUserReviewsGivenArgs
    userReviewsReceived?: boolean | UserCountOutputTypeCountUserReviewsReceivedArgs
    accountActionsTaken?: boolean | UserCountOutputTypeCountAccountActionsTakenArgs
    accountActionsReceived?: boolean | UserCountOutputTypeCountAccountActionsReceivedArgs
    resumesGrantedByMe?: boolean | UserCountOutputTypeCountResumesGrantedByMeArgs
    resumesGrantedToMe?: boolean | UserCountOutputTypeCountResumesGrantedToMeArgs
    attendanceLogs?: boolean | UserCountOutputTypeCountAttendanceLogsArgs
    schedules?: boolean | UserCountOutputTypeCountSchedulesArgs
    paySlips?: boolean | UserCountOutputTypeCountPaySlipsArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    createdThreads?: boolean | UserCountOutputTypeCountCreatedThreadsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserResumeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountIpRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IpRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDeviceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResumeViewLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeViewLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResumesUserViewedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeViewLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResumeReviewsGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeReviewLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserReviewsGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserReviewLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserReviewsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserReviewLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountActionsTakenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountHistoryLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountActionsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountHistoryLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResumesGrantedByMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeAccessGrantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResumesGrantedToMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeAccessGrantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftScheduleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaySlipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaySlipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageThreadWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ResumeAccessGrant
   */

  export type AggregateResumeAccessGrant = {
    _count: ResumeAccessGrantCountAggregateOutputType | null
    _avg: ResumeAccessGrantAvgAggregateOutputType | null
    _sum: ResumeAccessGrantSumAggregateOutputType | null
    _min: ResumeAccessGrantMinAggregateOutputType | null
    _max: ResumeAccessGrantMaxAggregateOutputType | null
  }

  export type ResumeAccessGrantAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
    grantedToId: number | null
    grantedById: number | null
  }

  export type ResumeAccessGrantSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
    grantedToId: number | null
    grantedById: number | null
  }

  export type ResumeAccessGrantMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    grantedToId: number | null
    grantedById: number | null
    createdAt: Date | null
  }

  export type ResumeAccessGrantMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    grantedToId: number | null
    grantedById: number | null
    createdAt: Date | null
  }

  export type ResumeAccessGrantCountAggregateOutputType = {
    id: number
    resumeId: number
    grantedToId: number
    grantedById: number
    createdAt: number
    _all: number
  }


  export type ResumeAccessGrantAvgAggregateInputType = {
    id?: true
    resumeId?: true
    grantedToId?: true
    grantedById?: true
  }

  export type ResumeAccessGrantSumAggregateInputType = {
    id?: true
    resumeId?: true
    grantedToId?: true
    grantedById?: true
  }

  export type ResumeAccessGrantMinAggregateInputType = {
    id?: true
    resumeId?: true
    grantedToId?: true
    grantedById?: true
    createdAt?: true
  }

  export type ResumeAccessGrantMaxAggregateInputType = {
    id?: true
    resumeId?: true
    grantedToId?: true
    grantedById?: true
    createdAt?: true
  }

  export type ResumeAccessGrantCountAggregateInputType = {
    id?: true
    resumeId?: true
    grantedToId?: true
    grantedById?: true
    createdAt?: true
    _all?: true
  }

  export type ResumeAccessGrantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeAccessGrant to aggregate.
     */
    where?: ResumeAccessGrantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeAccessGrants to fetch.
     */
    orderBy?: ResumeAccessGrantOrderByWithRelationInput | ResumeAccessGrantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeAccessGrantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeAccessGrants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeAccessGrants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeAccessGrants
    **/
    _count?: true | ResumeAccessGrantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeAccessGrantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeAccessGrantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeAccessGrantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeAccessGrantMaxAggregateInputType
  }

  export type GetResumeAccessGrantAggregateType<T extends ResumeAccessGrantAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeAccessGrant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeAccessGrant[P]>
      : GetScalarType<T[P], AggregateResumeAccessGrant[P]>
  }




  export type ResumeAccessGrantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeAccessGrantWhereInput
    orderBy?: ResumeAccessGrantOrderByWithAggregationInput | ResumeAccessGrantOrderByWithAggregationInput[]
    by: ResumeAccessGrantScalarFieldEnum[] | ResumeAccessGrantScalarFieldEnum
    having?: ResumeAccessGrantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeAccessGrantCountAggregateInputType | true
    _avg?: ResumeAccessGrantAvgAggregateInputType
    _sum?: ResumeAccessGrantSumAggregateInputType
    _min?: ResumeAccessGrantMinAggregateInputType
    _max?: ResumeAccessGrantMaxAggregateInputType
  }

  export type ResumeAccessGrantGroupByOutputType = {
    id: number
    resumeId: number
    grantedToId: number
    grantedById: number
    createdAt: Date
    _count: ResumeAccessGrantCountAggregateOutputType | null
    _avg: ResumeAccessGrantAvgAggregateOutputType | null
    _sum: ResumeAccessGrantSumAggregateOutputType | null
    _min: ResumeAccessGrantMinAggregateOutputType | null
    _max: ResumeAccessGrantMaxAggregateOutputType | null
  }

  type GetResumeAccessGrantGroupByPayload<T extends ResumeAccessGrantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeAccessGrantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeAccessGrantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeAccessGrantGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeAccessGrantGroupByOutputType[P]>
        }
      >
    >


  export type ResumeAccessGrantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    grantedToId?: boolean
    grantedById?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    grantedTo?: boolean | UserDefaultArgs<ExtArgs>
    grantedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeAccessGrant"]>

  export type ResumeAccessGrantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    grantedToId?: boolean
    grantedById?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    grantedTo?: boolean | UserDefaultArgs<ExtArgs>
    grantedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeAccessGrant"]>

  export type ResumeAccessGrantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    grantedToId?: boolean
    grantedById?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    grantedTo?: boolean | UserDefaultArgs<ExtArgs>
    grantedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeAccessGrant"]>

  export type ResumeAccessGrantSelectScalar = {
    id?: boolean
    resumeId?: boolean
    grantedToId?: boolean
    grantedById?: boolean
    createdAt?: boolean
  }

  export type ResumeAccessGrantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "grantedToId" | "grantedById" | "createdAt", ExtArgs["result"]["resumeAccessGrant"]>
  export type ResumeAccessGrantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    grantedTo?: boolean | UserDefaultArgs<ExtArgs>
    grantedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResumeAccessGrantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    grantedTo?: boolean | UserDefaultArgs<ExtArgs>
    grantedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResumeAccessGrantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    grantedTo?: boolean | UserDefaultArgs<ExtArgs>
    grantedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ResumeAccessGrantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeAccessGrant"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
      grantedTo: Prisma.$UserPayload<ExtArgs>
      grantedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      grantedToId: number
      grantedById: number
      createdAt: Date
    }, ExtArgs["result"]["resumeAccessGrant"]>
    composites: {}
  }

  type ResumeAccessGrantGetPayload<S extends boolean | null | undefined | ResumeAccessGrantDefaultArgs> = $Result.GetResult<Prisma.$ResumeAccessGrantPayload, S>

  type ResumeAccessGrantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeAccessGrantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeAccessGrantCountAggregateInputType | true
    }

  export interface ResumeAccessGrantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeAccessGrant'], meta: { name: 'ResumeAccessGrant' } }
    /**
     * Find zero or one ResumeAccessGrant that matches the filter.
     * @param {ResumeAccessGrantFindUniqueArgs} args - Arguments to find a ResumeAccessGrant
     * @example
     * // Get one ResumeAccessGrant
     * const resumeAccessGrant = await prisma.resumeAccessGrant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeAccessGrantFindUniqueArgs>(args: SelectSubset<T, ResumeAccessGrantFindUniqueArgs<ExtArgs>>): Prisma__ResumeAccessGrantClient<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeAccessGrant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeAccessGrantFindUniqueOrThrowArgs} args - Arguments to find a ResumeAccessGrant
     * @example
     * // Get one ResumeAccessGrant
     * const resumeAccessGrant = await prisma.resumeAccessGrant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeAccessGrantFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeAccessGrantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeAccessGrantClient<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeAccessGrant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAccessGrantFindFirstArgs} args - Arguments to find a ResumeAccessGrant
     * @example
     * // Get one ResumeAccessGrant
     * const resumeAccessGrant = await prisma.resumeAccessGrant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeAccessGrantFindFirstArgs>(args?: SelectSubset<T, ResumeAccessGrantFindFirstArgs<ExtArgs>>): Prisma__ResumeAccessGrantClient<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeAccessGrant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAccessGrantFindFirstOrThrowArgs} args - Arguments to find a ResumeAccessGrant
     * @example
     * // Get one ResumeAccessGrant
     * const resumeAccessGrant = await prisma.resumeAccessGrant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeAccessGrantFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeAccessGrantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeAccessGrantClient<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeAccessGrants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAccessGrantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeAccessGrants
     * const resumeAccessGrants = await prisma.resumeAccessGrant.findMany()
     * 
     * // Get first 10 ResumeAccessGrants
     * const resumeAccessGrants = await prisma.resumeAccessGrant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeAccessGrantWithIdOnly = await prisma.resumeAccessGrant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeAccessGrantFindManyArgs>(args?: SelectSubset<T, ResumeAccessGrantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeAccessGrant.
     * @param {ResumeAccessGrantCreateArgs} args - Arguments to create a ResumeAccessGrant.
     * @example
     * // Create one ResumeAccessGrant
     * const ResumeAccessGrant = await prisma.resumeAccessGrant.create({
     *   data: {
     *     // ... data to create a ResumeAccessGrant
     *   }
     * })
     * 
     */
    create<T extends ResumeAccessGrantCreateArgs>(args: SelectSubset<T, ResumeAccessGrantCreateArgs<ExtArgs>>): Prisma__ResumeAccessGrantClient<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeAccessGrants.
     * @param {ResumeAccessGrantCreateManyArgs} args - Arguments to create many ResumeAccessGrants.
     * @example
     * // Create many ResumeAccessGrants
     * const resumeAccessGrant = await prisma.resumeAccessGrant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeAccessGrantCreateManyArgs>(args?: SelectSubset<T, ResumeAccessGrantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeAccessGrants and returns the data saved in the database.
     * @param {ResumeAccessGrantCreateManyAndReturnArgs} args - Arguments to create many ResumeAccessGrants.
     * @example
     * // Create many ResumeAccessGrants
     * const resumeAccessGrant = await prisma.resumeAccessGrant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeAccessGrants and only return the `id`
     * const resumeAccessGrantWithIdOnly = await prisma.resumeAccessGrant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeAccessGrantCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeAccessGrantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeAccessGrant.
     * @param {ResumeAccessGrantDeleteArgs} args - Arguments to delete one ResumeAccessGrant.
     * @example
     * // Delete one ResumeAccessGrant
     * const ResumeAccessGrant = await prisma.resumeAccessGrant.delete({
     *   where: {
     *     // ... filter to delete one ResumeAccessGrant
     *   }
     * })
     * 
     */
    delete<T extends ResumeAccessGrantDeleteArgs>(args: SelectSubset<T, ResumeAccessGrantDeleteArgs<ExtArgs>>): Prisma__ResumeAccessGrantClient<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeAccessGrant.
     * @param {ResumeAccessGrantUpdateArgs} args - Arguments to update one ResumeAccessGrant.
     * @example
     * // Update one ResumeAccessGrant
     * const resumeAccessGrant = await prisma.resumeAccessGrant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeAccessGrantUpdateArgs>(args: SelectSubset<T, ResumeAccessGrantUpdateArgs<ExtArgs>>): Prisma__ResumeAccessGrantClient<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeAccessGrants.
     * @param {ResumeAccessGrantDeleteManyArgs} args - Arguments to filter ResumeAccessGrants to delete.
     * @example
     * // Delete a few ResumeAccessGrants
     * const { count } = await prisma.resumeAccessGrant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeAccessGrantDeleteManyArgs>(args?: SelectSubset<T, ResumeAccessGrantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeAccessGrants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAccessGrantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeAccessGrants
     * const resumeAccessGrant = await prisma.resumeAccessGrant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeAccessGrantUpdateManyArgs>(args: SelectSubset<T, ResumeAccessGrantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeAccessGrants and returns the data updated in the database.
     * @param {ResumeAccessGrantUpdateManyAndReturnArgs} args - Arguments to update many ResumeAccessGrants.
     * @example
     * // Update many ResumeAccessGrants
     * const resumeAccessGrant = await prisma.resumeAccessGrant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeAccessGrants and only return the `id`
     * const resumeAccessGrantWithIdOnly = await prisma.resumeAccessGrant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeAccessGrantUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeAccessGrantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeAccessGrant.
     * @param {ResumeAccessGrantUpsertArgs} args - Arguments to update or create a ResumeAccessGrant.
     * @example
     * // Update or create a ResumeAccessGrant
     * const resumeAccessGrant = await prisma.resumeAccessGrant.upsert({
     *   create: {
     *     // ... data to create a ResumeAccessGrant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeAccessGrant we want to update
     *   }
     * })
     */
    upsert<T extends ResumeAccessGrantUpsertArgs>(args: SelectSubset<T, ResumeAccessGrantUpsertArgs<ExtArgs>>): Prisma__ResumeAccessGrantClient<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeAccessGrants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAccessGrantCountArgs} args - Arguments to filter ResumeAccessGrants to count.
     * @example
     * // Count the number of ResumeAccessGrants
     * const count = await prisma.resumeAccessGrant.count({
     *   where: {
     *     // ... the filter for the ResumeAccessGrants we want to count
     *   }
     * })
    **/
    count<T extends ResumeAccessGrantCountArgs>(
      args?: Subset<T, ResumeAccessGrantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeAccessGrantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeAccessGrant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAccessGrantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeAccessGrantAggregateArgs>(args: Subset<T, ResumeAccessGrantAggregateArgs>): Prisma.PrismaPromise<GetResumeAccessGrantAggregateType<T>>

    /**
     * Group by ResumeAccessGrant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAccessGrantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeAccessGrantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeAccessGrantGroupByArgs['orderBy'] }
        : { orderBy?: ResumeAccessGrantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeAccessGrantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeAccessGrantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeAccessGrant model
   */
  readonly fields: ResumeAccessGrantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeAccessGrant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeAccessGrantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grantedTo<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grantedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeAccessGrant model
   */
  interface ResumeAccessGrantFieldRefs {
    readonly id: FieldRef<"ResumeAccessGrant", 'Int'>
    readonly resumeId: FieldRef<"ResumeAccessGrant", 'Int'>
    readonly grantedToId: FieldRef<"ResumeAccessGrant", 'Int'>
    readonly grantedById: FieldRef<"ResumeAccessGrant", 'Int'>
    readonly createdAt: FieldRef<"ResumeAccessGrant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeAccessGrant findUnique
   */
  export type ResumeAccessGrantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAccessGrant to fetch.
     */
    where: ResumeAccessGrantWhereUniqueInput
  }

  /**
   * ResumeAccessGrant findUniqueOrThrow
   */
  export type ResumeAccessGrantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAccessGrant to fetch.
     */
    where: ResumeAccessGrantWhereUniqueInput
  }

  /**
   * ResumeAccessGrant findFirst
   */
  export type ResumeAccessGrantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAccessGrant to fetch.
     */
    where?: ResumeAccessGrantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeAccessGrants to fetch.
     */
    orderBy?: ResumeAccessGrantOrderByWithRelationInput | ResumeAccessGrantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeAccessGrants.
     */
    cursor?: ResumeAccessGrantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeAccessGrants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeAccessGrants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeAccessGrants.
     */
    distinct?: ResumeAccessGrantScalarFieldEnum | ResumeAccessGrantScalarFieldEnum[]
  }

  /**
   * ResumeAccessGrant findFirstOrThrow
   */
  export type ResumeAccessGrantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAccessGrant to fetch.
     */
    where?: ResumeAccessGrantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeAccessGrants to fetch.
     */
    orderBy?: ResumeAccessGrantOrderByWithRelationInput | ResumeAccessGrantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeAccessGrants.
     */
    cursor?: ResumeAccessGrantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeAccessGrants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeAccessGrants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeAccessGrants.
     */
    distinct?: ResumeAccessGrantScalarFieldEnum | ResumeAccessGrantScalarFieldEnum[]
  }

  /**
   * ResumeAccessGrant findMany
   */
  export type ResumeAccessGrantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAccessGrants to fetch.
     */
    where?: ResumeAccessGrantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeAccessGrants to fetch.
     */
    orderBy?: ResumeAccessGrantOrderByWithRelationInput | ResumeAccessGrantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeAccessGrants.
     */
    cursor?: ResumeAccessGrantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeAccessGrants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeAccessGrants.
     */
    skip?: number
    distinct?: ResumeAccessGrantScalarFieldEnum | ResumeAccessGrantScalarFieldEnum[]
  }

  /**
   * ResumeAccessGrant create
   */
  export type ResumeAccessGrantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeAccessGrant.
     */
    data: XOR<ResumeAccessGrantCreateInput, ResumeAccessGrantUncheckedCreateInput>
  }

  /**
   * ResumeAccessGrant createMany
   */
  export type ResumeAccessGrantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeAccessGrants.
     */
    data: ResumeAccessGrantCreateManyInput | ResumeAccessGrantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeAccessGrant createManyAndReturn
   */
  export type ResumeAccessGrantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeAccessGrants.
     */
    data: ResumeAccessGrantCreateManyInput | ResumeAccessGrantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeAccessGrant update
   */
  export type ResumeAccessGrantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeAccessGrant.
     */
    data: XOR<ResumeAccessGrantUpdateInput, ResumeAccessGrantUncheckedUpdateInput>
    /**
     * Choose, which ResumeAccessGrant to update.
     */
    where: ResumeAccessGrantWhereUniqueInput
  }

  /**
   * ResumeAccessGrant updateMany
   */
  export type ResumeAccessGrantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeAccessGrants.
     */
    data: XOR<ResumeAccessGrantUpdateManyMutationInput, ResumeAccessGrantUncheckedUpdateManyInput>
    /**
     * Filter which ResumeAccessGrants to update
     */
    where?: ResumeAccessGrantWhereInput
    /**
     * Limit how many ResumeAccessGrants to update.
     */
    limit?: number
  }

  /**
   * ResumeAccessGrant updateManyAndReturn
   */
  export type ResumeAccessGrantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * The data used to update ResumeAccessGrants.
     */
    data: XOR<ResumeAccessGrantUpdateManyMutationInput, ResumeAccessGrantUncheckedUpdateManyInput>
    /**
     * Filter which ResumeAccessGrants to update
     */
    where?: ResumeAccessGrantWhereInput
    /**
     * Limit how many ResumeAccessGrants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeAccessGrant upsert
   */
  export type ResumeAccessGrantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeAccessGrant to update in case it exists.
     */
    where: ResumeAccessGrantWhereUniqueInput
    /**
     * In case the ResumeAccessGrant found by the `where` argument doesn't exist, create a new ResumeAccessGrant with this data.
     */
    create: XOR<ResumeAccessGrantCreateInput, ResumeAccessGrantUncheckedCreateInput>
    /**
     * In case the ResumeAccessGrant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeAccessGrantUpdateInput, ResumeAccessGrantUncheckedUpdateInput>
  }

  /**
   * ResumeAccessGrant delete
   */
  export type ResumeAccessGrantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    /**
     * Filter which ResumeAccessGrant to delete.
     */
    where: ResumeAccessGrantWhereUniqueInput
  }

  /**
   * ResumeAccessGrant deleteMany
   */
  export type ResumeAccessGrantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeAccessGrants to delete
     */
    where?: ResumeAccessGrantWhereInput
    /**
     * Limit how many ResumeAccessGrants to delete.
     */
    limit?: number
  }

  /**
   * ResumeAccessGrant without action
   */
  export type ResumeAccessGrantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
  }


  /**
   * Model ResumeViewLog
   */

  export type AggregateResumeViewLog = {
    _count: ResumeViewLogCountAggregateOutputType | null
    _avg: ResumeViewLogAvgAggregateOutputType | null
    _sum: ResumeViewLogSumAggregateOutputType | null
    _min: ResumeViewLogMinAggregateOutputType | null
    _max: ResumeViewLogMaxAggregateOutputType | null
  }

  export type ResumeViewLogAvgAggregateOutputType = {
    id: number | null
    adminId: number | null
    userViewedById: number | null
    resumeId: number | null
  }

  export type ResumeViewLogSumAggregateOutputType = {
    id: number | null
    adminId: number | null
    userViewedById: number | null
    resumeId: number | null
  }

  export type ResumeViewLogMinAggregateOutputType = {
    id: number | null
    adminId: number | null
    userViewedById: number | null
    resumeId: number | null
    viewedAt: Date | null
  }

  export type ResumeViewLogMaxAggregateOutputType = {
    id: number | null
    adminId: number | null
    userViewedById: number | null
    resumeId: number | null
    viewedAt: Date | null
  }

  export type ResumeViewLogCountAggregateOutputType = {
    id: number
    adminId: number
    userViewedById: number
    resumeId: number
    viewedAt: number
    _all: number
  }


  export type ResumeViewLogAvgAggregateInputType = {
    id?: true
    adminId?: true
    userViewedById?: true
    resumeId?: true
  }

  export type ResumeViewLogSumAggregateInputType = {
    id?: true
    adminId?: true
    userViewedById?: true
    resumeId?: true
  }

  export type ResumeViewLogMinAggregateInputType = {
    id?: true
    adminId?: true
    userViewedById?: true
    resumeId?: true
    viewedAt?: true
  }

  export type ResumeViewLogMaxAggregateInputType = {
    id?: true
    adminId?: true
    userViewedById?: true
    resumeId?: true
    viewedAt?: true
  }

  export type ResumeViewLogCountAggregateInputType = {
    id?: true
    adminId?: true
    userViewedById?: true
    resumeId?: true
    viewedAt?: true
    _all?: true
  }

  export type ResumeViewLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeViewLog to aggregate.
     */
    where?: ResumeViewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeViewLogs to fetch.
     */
    orderBy?: ResumeViewLogOrderByWithRelationInput | ResumeViewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeViewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeViewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeViewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeViewLogs
    **/
    _count?: true | ResumeViewLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeViewLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeViewLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeViewLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeViewLogMaxAggregateInputType
  }

  export type GetResumeViewLogAggregateType<T extends ResumeViewLogAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeViewLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeViewLog[P]>
      : GetScalarType<T[P], AggregateResumeViewLog[P]>
  }




  export type ResumeViewLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeViewLogWhereInput
    orderBy?: ResumeViewLogOrderByWithAggregationInput | ResumeViewLogOrderByWithAggregationInput[]
    by: ResumeViewLogScalarFieldEnum[] | ResumeViewLogScalarFieldEnum
    having?: ResumeViewLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeViewLogCountAggregateInputType | true
    _avg?: ResumeViewLogAvgAggregateInputType
    _sum?: ResumeViewLogSumAggregateInputType
    _min?: ResumeViewLogMinAggregateInputType
    _max?: ResumeViewLogMaxAggregateInputType
  }

  export type ResumeViewLogGroupByOutputType = {
    id: number
    adminId: number
    userViewedById: number
    resumeId: number
    viewedAt: Date
    _count: ResumeViewLogCountAggregateOutputType | null
    _avg: ResumeViewLogAvgAggregateOutputType | null
    _sum: ResumeViewLogSumAggregateOutputType | null
    _min: ResumeViewLogMinAggregateOutputType | null
    _max: ResumeViewLogMaxAggregateOutputType | null
  }

  type GetResumeViewLogGroupByPayload<T extends ResumeViewLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeViewLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeViewLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeViewLogGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeViewLogGroupByOutputType[P]>
        }
      >
    >


  export type ResumeViewLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    userViewedById?: boolean
    resumeId?: boolean
    viewedAt?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    userViewedBy?: boolean | UserDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeViewLog"]>

  export type ResumeViewLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    userViewedById?: boolean
    resumeId?: boolean
    viewedAt?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    userViewedBy?: boolean | UserDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeViewLog"]>

  export type ResumeViewLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    userViewedById?: boolean
    resumeId?: boolean
    viewedAt?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    userViewedBy?: boolean | UserDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeViewLog"]>

  export type ResumeViewLogSelectScalar = {
    id?: boolean
    adminId?: boolean
    userViewedById?: boolean
    resumeId?: boolean
    viewedAt?: boolean
  }

  export type ResumeViewLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminId" | "userViewedById" | "resumeId" | "viewedAt", ExtArgs["result"]["resumeViewLog"]>
  export type ResumeViewLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    userViewedBy?: boolean | UserDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumeViewLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    userViewedBy?: boolean | UserDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumeViewLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    userViewedBy?: boolean | UserDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $ResumeViewLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeViewLog"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
      userViewedBy: Prisma.$UserPayload<ExtArgs>
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      adminId: number
      userViewedById: number
      resumeId: number
      viewedAt: Date
    }, ExtArgs["result"]["resumeViewLog"]>
    composites: {}
  }

  type ResumeViewLogGetPayload<S extends boolean | null | undefined | ResumeViewLogDefaultArgs> = $Result.GetResult<Prisma.$ResumeViewLogPayload, S>

  type ResumeViewLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeViewLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeViewLogCountAggregateInputType | true
    }

  export interface ResumeViewLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeViewLog'], meta: { name: 'ResumeViewLog' } }
    /**
     * Find zero or one ResumeViewLog that matches the filter.
     * @param {ResumeViewLogFindUniqueArgs} args - Arguments to find a ResumeViewLog
     * @example
     * // Get one ResumeViewLog
     * const resumeViewLog = await prisma.resumeViewLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeViewLogFindUniqueArgs>(args: SelectSubset<T, ResumeViewLogFindUniqueArgs<ExtArgs>>): Prisma__ResumeViewLogClient<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeViewLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeViewLogFindUniqueOrThrowArgs} args - Arguments to find a ResumeViewLog
     * @example
     * // Get one ResumeViewLog
     * const resumeViewLog = await prisma.resumeViewLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeViewLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeViewLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeViewLogClient<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeViewLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeViewLogFindFirstArgs} args - Arguments to find a ResumeViewLog
     * @example
     * // Get one ResumeViewLog
     * const resumeViewLog = await prisma.resumeViewLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeViewLogFindFirstArgs>(args?: SelectSubset<T, ResumeViewLogFindFirstArgs<ExtArgs>>): Prisma__ResumeViewLogClient<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeViewLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeViewLogFindFirstOrThrowArgs} args - Arguments to find a ResumeViewLog
     * @example
     * // Get one ResumeViewLog
     * const resumeViewLog = await prisma.resumeViewLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeViewLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeViewLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeViewLogClient<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeViewLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeViewLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeViewLogs
     * const resumeViewLogs = await prisma.resumeViewLog.findMany()
     * 
     * // Get first 10 ResumeViewLogs
     * const resumeViewLogs = await prisma.resumeViewLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeViewLogWithIdOnly = await prisma.resumeViewLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeViewLogFindManyArgs>(args?: SelectSubset<T, ResumeViewLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeViewLog.
     * @param {ResumeViewLogCreateArgs} args - Arguments to create a ResumeViewLog.
     * @example
     * // Create one ResumeViewLog
     * const ResumeViewLog = await prisma.resumeViewLog.create({
     *   data: {
     *     // ... data to create a ResumeViewLog
     *   }
     * })
     * 
     */
    create<T extends ResumeViewLogCreateArgs>(args: SelectSubset<T, ResumeViewLogCreateArgs<ExtArgs>>): Prisma__ResumeViewLogClient<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeViewLogs.
     * @param {ResumeViewLogCreateManyArgs} args - Arguments to create many ResumeViewLogs.
     * @example
     * // Create many ResumeViewLogs
     * const resumeViewLog = await prisma.resumeViewLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeViewLogCreateManyArgs>(args?: SelectSubset<T, ResumeViewLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeViewLogs and returns the data saved in the database.
     * @param {ResumeViewLogCreateManyAndReturnArgs} args - Arguments to create many ResumeViewLogs.
     * @example
     * // Create many ResumeViewLogs
     * const resumeViewLog = await prisma.resumeViewLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeViewLogs and only return the `id`
     * const resumeViewLogWithIdOnly = await prisma.resumeViewLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeViewLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeViewLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeViewLog.
     * @param {ResumeViewLogDeleteArgs} args - Arguments to delete one ResumeViewLog.
     * @example
     * // Delete one ResumeViewLog
     * const ResumeViewLog = await prisma.resumeViewLog.delete({
     *   where: {
     *     // ... filter to delete one ResumeViewLog
     *   }
     * })
     * 
     */
    delete<T extends ResumeViewLogDeleteArgs>(args: SelectSubset<T, ResumeViewLogDeleteArgs<ExtArgs>>): Prisma__ResumeViewLogClient<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeViewLog.
     * @param {ResumeViewLogUpdateArgs} args - Arguments to update one ResumeViewLog.
     * @example
     * // Update one ResumeViewLog
     * const resumeViewLog = await prisma.resumeViewLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeViewLogUpdateArgs>(args: SelectSubset<T, ResumeViewLogUpdateArgs<ExtArgs>>): Prisma__ResumeViewLogClient<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeViewLogs.
     * @param {ResumeViewLogDeleteManyArgs} args - Arguments to filter ResumeViewLogs to delete.
     * @example
     * // Delete a few ResumeViewLogs
     * const { count } = await prisma.resumeViewLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeViewLogDeleteManyArgs>(args?: SelectSubset<T, ResumeViewLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeViewLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeViewLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeViewLogs
     * const resumeViewLog = await prisma.resumeViewLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeViewLogUpdateManyArgs>(args: SelectSubset<T, ResumeViewLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeViewLogs and returns the data updated in the database.
     * @param {ResumeViewLogUpdateManyAndReturnArgs} args - Arguments to update many ResumeViewLogs.
     * @example
     * // Update many ResumeViewLogs
     * const resumeViewLog = await prisma.resumeViewLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeViewLogs and only return the `id`
     * const resumeViewLogWithIdOnly = await prisma.resumeViewLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeViewLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeViewLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeViewLog.
     * @param {ResumeViewLogUpsertArgs} args - Arguments to update or create a ResumeViewLog.
     * @example
     * // Update or create a ResumeViewLog
     * const resumeViewLog = await prisma.resumeViewLog.upsert({
     *   create: {
     *     // ... data to create a ResumeViewLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeViewLog we want to update
     *   }
     * })
     */
    upsert<T extends ResumeViewLogUpsertArgs>(args: SelectSubset<T, ResumeViewLogUpsertArgs<ExtArgs>>): Prisma__ResumeViewLogClient<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeViewLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeViewLogCountArgs} args - Arguments to filter ResumeViewLogs to count.
     * @example
     * // Count the number of ResumeViewLogs
     * const count = await prisma.resumeViewLog.count({
     *   where: {
     *     // ... the filter for the ResumeViewLogs we want to count
     *   }
     * })
    **/
    count<T extends ResumeViewLogCountArgs>(
      args?: Subset<T, ResumeViewLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeViewLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeViewLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeViewLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeViewLogAggregateArgs>(args: Subset<T, ResumeViewLogAggregateArgs>): Prisma.PrismaPromise<GetResumeViewLogAggregateType<T>>

    /**
     * Group by ResumeViewLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeViewLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeViewLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeViewLogGroupByArgs['orderBy'] }
        : { orderBy?: ResumeViewLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeViewLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeViewLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeViewLog model
   */
  readonly fields: ResumeViewLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeViewLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeViewLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userViewedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeViewLog model
   */
  interface ResumeViewLogFieldRefs {
    readonly id: FieldRef<"ResumeViewLog", 'Int'>
    readonly adminId: FieldRef<"ResumeViewLog", 'Int'>
    readonly userViewedById: FieldRef<"ResumeViewLog", 'Int'>
    readonly resumeId: FieldRef<"ResumeViewLog", 'Int'>
    readonly viewedAt: FieldRef<"ResumeViewLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeViewLog findUnique
   */
  export type ResumeViewLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeViewLog to fetch.
     */
    where: ResumeViewLogWhereUniqueInput
  }

  /**
   * ResumeViewLog findUniqueOrThrow
   */
  export type ResumeViewLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeViewLog to fetch.
     */
    where: ResumeViewLogWhereUniqueInput
  }

  /**
   * ResumeViewLog findFirst
   */
  export type ResumeViewLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeViewLog to fetch.
     */
    where?: ResumeViewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeViewLogs to fetch.
     */
    orderBy?: ResumeViewLogOrderByWithRelationInput | ResumeViewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeViewLogs.
     */
    cursor?: ResumeViewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeViewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeViewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeViewLogs.
     */
    distinct?: ResumeViewLogScalarFieldEnum | ResumeViewLogScalarFieldEnum[]
  }

  /**
   * ResumeViewLog findFirstOrThrow
   */
  export type ResumeViewLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeViewLog to fetch.
     */
    where?: ResumeViewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeViewLogs to fetch.
     */
    orderBy?: ResumeViewLogOrderByWithRelationInput | ResumeViewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeViewLogs.
     */
    cursor?: ResumeViewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeViewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeViewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeViewLogs.
     */
    distinct?: ResumeViewLogScalarFieldEnum | ResumeViewLogScalarFieldEnum[]
  }

  /**
   * ResumeViewLog findMany
   */
  export type ResumeViewLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeViewLogs to fetch.
     */
    where?: ResumeViewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeViewLogs to fetch.
     */
    orderBy?: ResumeViewLogOrderByWithRelationInput | ResumeViewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeViewLogs.
     */
    cursor?: ResumeViewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeViewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeViewLogs.
     */
    skip?: number
    distinct?: ResumeViewLogScalarFieldEnum | ResumeViewLogScalarFieldEnum[]
  }

  /**
   * ResumeViewLog create
   */
  export type ResumeViewLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeViewLog.
     */
    data: XOR<ResumeViewLogCreateInput, ResumeViewLogUncheckedCreateInput>
  }

  /**
   * ResumeViewLog createMany
   */
  export type ResumeViewLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeViewLogs.
     */
    data: ResumeViewLogCreateManyInput | ResumeViewLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeViewLog createManyAndReturn
   */
  export type ResumeViewLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeViewLogs.
     */
    data: ResumeViewLogCreateManyInput | ResumeViewLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeViewLog update
   */
  export type ResumeViewLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeViewLog.
     */
    data: XOR<ResumeViewLogUpdateInput, ResumeViewLogUncheckedUpdateInput>
    /**
     * Choose, which ResumeViewLog to update.
     */
    where: ResumeViewLogWhereUniqueInput
  }

  /**
   * ResumeViewLog updateMany
   */
  export type ResumeViewLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeViewLogs.
     */
    data: XOR<ResumeViewLogUpdateManyMutationInput, ResumeViewLogUncheckedUpdateManyInput>
    /**
     * Filter which ResumeViewLogs to update
     */
    where?: ResumeViewLogWhereInput
    /**
     * Limit how many ResumeViewLogs to update.
     */
    limit?: number
  }

  /**
   * ResumeViewLog updateManyAndReturn
   */
  export type ResumeViewLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * The data used to update ResumeViewLogs.
     */
    data: XOR<ResumeViewLogUpdateManyMutationInput, ResumeViewLogUncheckedUpdateManyInput>
    /**
     * Filter which ResumeViewLogs to update
     */
    where?: ResumeViewLogWhereInput
    /**
     * Limit how many ResumeViewLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeViewLog upsert
   */
  export type ResumeViewLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeViewLog to update in case it exists.
     */
    where: ResumeViewLogWhereUniqueInput
    /**
     * In case the ResumeViewLog found by the `where` argument doesn't exist, create a new ResumeViewLog with this data.
     */
    create: XOR<ResumeViewLogCreateInput, ResumeViewLogUncheckedCreateInput>
    /**
     * In case the ResumeViewLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeViewLogUpdateInput, ResumeViewLogUncheckedUpdateInput>
  }

  /**
   * ResumeViewLog delete
   */
  export type ResumeViewLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    /**
     * Filter which ResumeViewLog to delete.
     */
    where: ResumeViewLogWhereUniqueInput
  }

  /**
   * ResumeViewLog deleteMany
   */
  export type ResumeViewLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeViewLogs to delete
     */
    where?: ResumeViewLogWhereInput
    /**
     * Limit how many ResumeViewLogs to delete.
     */
    limit?: number
  }

  /**
   * ResumeViewLog without action
   */
  export type ResumeViewLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: $Enums.CompanyType | null
    isApproved: boolean | null
    isActive: boolean | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: $Enums.CompanyType | null
    isApproved: boolean | null
    isActive: boolean | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    type: number
    isApproved: number
    isActive: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    isApproved?: true
    isActive?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    isApproved?: true
    isActive?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    isApproved?: true
    isActive?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: number
    name: string
    type: $Enums.CompanyType
    isApproved: boolean
    isActive: boolean
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    isApproved?: boolean
    isActive?: boolean
    users?: boolean | Company$usersArgs<ExtArgs>
    resumes?: boolean | Company$resumesArgs<ExtArgs>
    attendanceLogs?: boolean | Company$attendanceLogsArgs<ExtArgs>
    schedules?: boolean | Company$schedulesArgs<ExtArgs>
    issuedPaySlips?: boolean | Company$issuedPaySlipsArgs<ExtArgs>
    jobPosting?: boolean | Company$jobPostingArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    isApproved?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    isApproved?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    isApproved?: boolean
    isActive?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "isApproved" | "isActive", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Company$usersArgs<ExtArgs>
    resumes?: boolean | Company$resumesArgs<ExtArgs>
    attendanceLogs?: boolean | Company$attendanceLogsArgs<ExtArgs>
    schedules?: boolean | Company$schedulesArgs<ExtArgs>
    issuedPaySlips?: boolean | Company$issuedPaySlipsArgs<ExtArgs>
    jobPosting?: boolean | Company$jobPostingArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      resumes: Prisma.$UserResumePayload<ExtArgs>[]
      attendanceLogs: Prisma.$AttendanceLogPayload<ExtArgs>[]
      schedules: Prisma.$ShiftSchedulePayload<ExtArgs>[]
      issuedPaySlips: Prisma.$PaySlipPayload<ExtArgs>[]
      jobPosting: Prisma.$JobPostingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: $Enums.CompanyType
      isApproved: boolean
      isActive: boolean
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Company$usersArgs<ExtArgs> = {}>(args?: Subset<T, Company$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumes<T extends Company$resumesArgs<ExtArgs> = {}>(args?: Subset<T, Company$resumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendanceLogs<T extends Company$attendanceLogsArgs<ExtArgs> = {}>(args?: Subset<T, Company$attendanceLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schedules<T extends Company$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Company$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    issuedPaySlips<T extends Company$issuedPaySlipsArgs<ExtArgs> = {}>(args?: Subset<T, Company$issuedPaySlipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobPosting<T extends Company$jobPostingArgs<ExtArgs> = {}>(args?: Subset<T, Company$jobPostingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'Int'>
    readonly name: FieldRef<"Company", 'String'>
    readonly type: FieldRef<"Company", 'CompanyType'>
    readonly isApproved: FieldRef<"Company", 'Boolean'>
    readonly isActive: FieldRef<"Company", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.users
   */
  export type Company$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Company.resumes
   */
  export type Company$resumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    where?: UserResumeWhereInput
    orderBy?: UserResumeOrderByWithRelationInput | UserResumeOrderByWithRelationInput[]
    cursor?: UserResumeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserResumeScalarFieldEnum | UserResumeScalarFieldEnum[]
  }

  /**
   * Company.attendanceLogs
   */
  export type Company$attendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    where?: AttendanceLogWhereInput
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    cursor?: AttendanceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * Company.schedules
   */
  export type Company$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    where?: ShiftScheduleWhereInput
    orderBy?: ShiftScheduleOrderByWithRelationInput | ShiftScheduleOrderByWithRelationInput[]
    cursor?: ShiftScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftScheduleScalarFieldEnum | ShiftScheduleScalarFieldEnum[]
  }

  /**
   * Company.issuedPaySlips
   */
  export type Company$issuedPaySlipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    where?: PaySlipWhereInput
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    cursor?: PaySlipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * Company.jobPosting
   */
  export type Company$jobPostingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    where?: JobPostingWhereInput
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    cursor?: JobPostingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model AttendanceLog
   */

  export type AggregateAttendanceLog = {
    _count: AttendanceLogCountAggregateOutputType | null
    _avg: AttendanceLogAvgAggregateOutputType | null
    _sum: AttendanceLogSumAggregateOutputType | null
    _min: AttendanceLogMinAggregateOutputType | null
    _max: AttendanceLogMaxAggregateOutputType | null
  }

  export type AttendanceLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    scheduleId: number | null
  }

  export type AttendanceLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    scheduleId: number | null
  }

  export type AttendanceLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    clockIn: Date | null
    clockOut: Date | null
    note: string | null
    scheduleId: number | null
  }

  export type AttendanceLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    clockIn: Date | null
    clockOut: Date | null
    note: string | null
    scheduleId: number | null
  }

  export type AttendanceLogCountAggregateOutputType = {
    id: number
    userId: number
    companyId: number
    clockIn: number
    clockOut: number
    note: number
    scheduleId: number
    _all: number
  }


  export type AttendanceLogAvgAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    scheduleId?: true
  }

  export type AttendanceLogSumAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    scheduleId?: true
  }

  export type AttendanceLogMinAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    clockIn?: true
    clockOut?: true
    note?: true
    scheduleId?: true
  }

  export type AttendanceLogMaxAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    clockIn?: true
    clockOut?: true
    note?: true
    scheduleId?: true
  }

  export type AttendanceLogCountAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    clockIn?: true
    clockOut?: true
    note?: true
    scheduleId?: true
    _all?: true
  }

  export type AttendanceLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceLog to aggregate.
     */
    where?: AttendanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLogs to fetch.
     */
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttendanceLogs
    **/
    _count?: true | AttendanceLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceLogMaxAggregateInputType
  }

  export type GetAttendanceLogAggregateType<T extends AttendanceLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendanceLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendanceLog[P]>
      : GetScalarType<T[P], AggregateAttendanceLog[P]>
  }




  export type AttendanceLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLogWhereInput
    orderBy?: AttendanceLogOrderByWithAggregationInput | AttendanceLogOrderByWithAggregationInput[]
    by: AttendanceLogScalarFieldEnum[] | AttendanceLogScalarFieldEnum
    having?: AttendanceLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceLogCountAggregateInputType | true
    _avg?: AttendanceLogAvgAggregateInputType
    _sum?: AttendanceLogSumAggregateInputType
    _min?: AttendanceLogMinAggregateInputType
    _max?: AttendanceLogMaxAggregateInputType
  }

  export type AttendanceLogGroupByOutputType = {
    id: number
    userId: number
    companyId: number
    clockIn: Date
    clockOut: Date | null
    note: string | null
    scheduleId: number | null
    _count: AttendanceLogCountAggregateOutputType | null
    _avg: AttendanceLogAvgAggregateOutputType | null
    _sum: AttendanceLogSumAggregateOutputType | null
    _min: AttendanceLogMinAggregateOutputType | null
    _max: AttendanceLogMaxAggregateOutputType | null
  }

  type GetAttendanceLogGroupByPayload<T extends AttendanceLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceLogGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceLogGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    clockIn?: boolean
    clockOut?: boolean
    note?: boolean
    scheduleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    schedule?: boolean | AttendanceLog$scheduleArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceLog"]>

  export type AttendanceLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    clockIn?: boolean
    clockOut?: boolean
    note?: boolean
    scheduleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    schedule?: boolean | AttendanceLog$scheduleArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceLog"]>

  export type AttendanceLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    clockIn?: boolean
    clockOut?: boolean
    note?: boolean
    scheduleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    schedule?: boolean | AttendanceLog$scheduleArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceLog"]>

  export type AttendanceLogSelectScalar = {
    id?: boolean
    userId?: boolean
    companyId?: boolean
    clockIn?: boolean
    clockOut?: boolean
    note?: boolean
    scheduleId?: boolean
  }

  export type AttendanceLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "companyId" | "clockIn" | "clockOut" | "note" | "scheduleId", ExtArgs["result"]["attendanceLog"]>
  export type AttendanceLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    schedule?: boolean | AttendanceLog$scheduleArgs<ExtArgs>
  }
  export type AttendanceLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    schedule?: boolean | AttendanceLog$scheduleArgs<ExtArgs>
  }
  export type AttendanceLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    schedule?: boolean | AttendanceLog$scheduleArgs<ExtArgs>
  }

  export type $AttendanceLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttendanceLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
      schedule: Prisma.$ShiftSchedulePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      companyId: number
      clockIn: Date
      clockOut: Date | null
      note: string | null
      scheduleId: number | null
    }, ExtArgs["result"]["attendanceLog"]>
    composites: {}
  }

  type AttendanceLogGetPayload<S extends boolean | null | undefined | AttendanceLogDefaultArgs> = $Result.GetResult<Prisma.$AttendanceLogPayload, S>

  type AttendanceLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceLogCountAggregateInputType | true
    }

  export interface AttendanceLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttendanceLog'], meta: { name: 'AttendanceLog' } }
    /**
     * Find zero or one AttendanceLog that matches the filter.
     * @param {AttendanceLogFindUniqueArgs} args - Arguments to find a AttendanceLog
     * @example
     * // Get one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceLogFindUniqueArgs>(args: SelectSubset<T, AttendanceLogFindUniqueArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AttendanceLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceLogFindUniqueOrThrowArgs} args - Arguments to find a AttendanceLog
     * @example
     * // Get one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttendanceLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogFindFirstArgs} args - Arguments to find a AttendanceLog
     * @example
     * // Get one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceLogFindFirstArgs>(args?: SelectSubset<T, AttendanceLogFindFirstArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttendanceLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogFindFirstOrThrowArgs} args - Arguments to find a AttendanceLog
     * @example
     * // Get one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AttendanceLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttendanceLogs
     * const attendanceLogs = await prisma.attendanceLog.findMany()
     * 
     * // Get first 10 AttendanceLogs
     * const attendanceLogs = await prisma.attendanceLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceLogWithIdOnly = await prisma.attendanceLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceLogFindManyArgs>(args?: SelectSubset<T, AttendanceLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AttendanceLog.
     * @param {AttendanceLogCreateArgs} args - Arguments to create a AttendanceLog.
     * @example
     * // Create one AttendanceLog
     * const AttendanceLog = await prisma.attendanceLog.create({
     *   data: {
     *     // ... data to create a AttendanceLog
     *   }
     * })
     * 
     */
    create<T extends AttendanceLogCreateArgs>(args: SelectSubset<T, AttendanceLogCreateArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AttendanceLogs.
     * @param {AttendanceLogCreateManyArgs} args - Arguments to create many AttendanceLogs.
     * @example
     * // Create many AttendanceLogs
     * const attendanceLog = await prisma.attendanceLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceLogCreateManyArgs>(args?: SelectSubset<T, AttendanceLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AttendanceLogs and returns the data saved in the database.
     * @param {AttendanceLogCreateManyAndReturnArgs} args - Arguments to create many AttendanceLogs.
     * @example
     * // Create many AttendanceLogs
     * const attendanceLog = await prisma.attendanceLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AttendanceLogs and only return the `id`
     * const attendanceLogWithIdOnly = await prisma.attendanceLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AttendanceLog.
     * @param {AttendanceLogDeleteArgs} args - Arguments to delete one AttendanceLog.
     * @example
     * // Delete one AttendanceLog
     * const AttendanceLog = await prisma.attendanceLog.delete({
     *   where: {
     *     // ... filter to delete one AttendanceLog
     *   }
     * })
     * 
     */
    delete<T extends AttendanceLogDeleteArgs>(args: SelectSubset<T, AttendanceLogDeleteArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AttendanceLog.
     * @param {AttendanceLogUpdateArgs} args - Arguments to update one AttendanceLog.
     * @example
     * // Update one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceLogUpdateArgs>(args: SelectSubset<T, AttendanceLogUpdateArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AttendanceLogs.
     * @param {AttendanceLogDeleteManyArgs} args - Arguments to filter AttendanceLogs to delete.
     * @example
     * // Delete a few AttendanceLogs
     * const { count } = await prisma.attendanceLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceLogDeleteManyArgs>(args?: SelectSubset<T, AttendanceLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttendanceLogs
     * const attendanceLog = await prisma.attendanceLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceLogUpdateManyArgs>(args: SelectSubset<T, AttendanceLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceLogs and returns the data updated in the database.
     * @param {AttendanceLogUpdateManyAndReturnArgs} args - Arguments to update many AttendanceLogs.
     * @example
     * // Update many AttendanceLogs
     * const attendanceLog = await prisma.attendanceLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AttendanceLogs and only return the `id`
     * const attendanceLogWithIdOnly = await prisma.attendanceLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AttendanceLog.
     * @param {AttendanceLogUpsertArgs} args - Arguments to update or create a AttendanceLog.
     * @example
     * // Update or create a AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.upsert({
     *   create: {
     *     // ... data to create a AttendanceLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttendanceLog we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceLogUpsertArgs>(args: SelectSubset<T, AttendanceLogUpsertArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AttendanceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogCountArgs} args - Arguments to filter AttendanceLogs to count.
     * @example
     * // Count the number of AttendanceLogs
     * const count = await prisma.attendanceLog.count({
     *   where: {
     *     // ... the filter for the AttendanceLogs we want to count
     *   }
     * })
    **/
    count<T extends AttendanceLogCountArgs>(
      args?: Subset<T, AttendanceLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttendanceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceLogAggregateArgs>(args: Subset<T, AttendanceLogAggregateArgs>): Prisma.PrismaPromise<GetAttendanceLogAggregateType<T>>

    /**
     * Group by AttendanceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceLogGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttendanceLog model
   */
  readonly fields: AttendanceLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttendanceLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    schedule<T extends AttendanceLog$scheduleArgs<ExtArgs> = {}>(args?: Subset<T, AttendanceLog$scheduleArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AttendanceLog model
   */
  interface AttendanceLogFieldRefs {
    readonly id: FieldRef<"AttendanceLog", 'Int'>
    readonly userId: FieldRef<"AttendanceLog", 'Int'>
    readonly companyId: FieldRef<"AttendanceLog", 'Int'>
    readonly clockIn: FieldRef<"AttendanceLog", 'DateTime'>
    readonly clockOut: FieldRef<"AttendanceLog", 'DateTime'>
    readonly note: FieldRef<"AttendanceLog", 'String'>
    readonly scheduleId: FieldRef<"AttendanceLog", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AttendanceLog findUnique
   */
  export type AttendanceLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLog to fetch.
     */
    where: AttendanceLogWhereUniqueInput
  }

  /**
   * AttendanceLog findUniqueOrThrow
   */
  export type AttendanceLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLog to fetch.
     */
    where: AttendanceLogWhereUniqueInput
  }

  /**
   * AttendanceLog findFirst
   */
  export type AttendanceLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLog to fetch.
     */
    where?: AttendanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLogs to fetch.
     */
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceLogs.
     */
    cursor?: AttendanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceLogs.
     */
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * AttendanceLog findFirstOrThrow
   */
  export type AttendanceLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLog to fetch.
     */
    where?: AttendanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLogs to fetch.
     */
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceLogs.
     */
    cursor?: AttendanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceLogs.
     */
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * AttendanceLog findMany
   */
  export type AttendanceLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLogs to fetch.
     */
    where?: AttendanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLogs to fetch.
     */
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttendanceLogs.
     */
    cursor?: AttendanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLogs.
     */
    skip?: number
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * AttendanceLog create
   */
  export type AttendanceLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AttendanceLog.
     */
    data: XOR<AttendanceLogCreateInput, AttendanceLogUncheckedCreateInput>
  }

  /**
   * AttendanceLog createMany
   */
  export type AttendanceLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttendanceLogs.
     */
    data: AttendanceLogCreateManyInput | AttendanceLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttendanceLog createManyAndReturn
   */
  export type AttendanceLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * The data used to create many AttendanceLogs.
     */
    data: AttendanceLogCreateManyInput | AttendanceLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceLog update
   */
  export type AttendanceLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AttendanceLog.
     */
    data: XOR<AttendanceLogUpdateInput, AttendanceLogUncheckedUpdateInput>
    /**
     * Choose, which AttendanceLog to update.
     */
    where: AttendanceLogWhereUniqueInput
  }

  /**
   * AttendanceLog updateMany
   */
  export type AttendanceLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttendanceLogs.
     */
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceLogs to update
     */
    where?: AttendanceLogWhereInput
    /**
     * Limit how many AttendanceLogs to update.
     */
    limit?: number
  }

  /**
   * AttendanceLog updateManyAndReturn
   */
  export type AttendanceLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * The data used to update AttendanceLogs.
     */
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceLogs to update
     */
    where?: AttendanceLogWhereInput
    /**
     * Limit how many AttendanceLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceLog upsert
   */
  export type AttendanceLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AttendanceLog to update in case it exists.
     */
    where: AttendanceLogWhereUniqueInput
    /**
     * In case the AttendanceLog found by the `where` argument doesn't exist, create a new AttendanceLog with this data.
     */
    create: XOR<AttendanceLogCreateInput, AttendanceLogUncheckedCreateInput>
    /**
     * In case the AttendanceLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceLogUpdateInput, AttendanceLogUncheckedUpdateInput>
  }

  /**
   * AttendanceLog delete
   */
  export type AttendanceLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter which AttendanceLog to delete.
     */
    where: AttendanceLogWhereUniqueInput
  }

  /**
   * AttendanceLog deleteMany
   */
  export type AttendanceLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceLogs to delete
     */
    where?: AttendanceLogWhereInput
    /**
     * Limit how many AttendanceLogs to delete.
     */
    limit?: number
  }

  /**
   * AttendanceLog.schedule
   */
  export type AttendanceLog$scheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    where?: ShiftScheduleWhereInput
  }

  /**
   * AttendanceLog without action
   */
  export type AttendanceLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
  }


  /**
   * Model ShiftSchedule
   */

  export type AggregateShiftSchedule = {
    _count: ShiftScheduleCountAggregateOutputType | null
    _avg: ShiftScheduleAvgAggregateOutputType | null
    _sum: ShiftScheduleSumAggregateOutputType | null
    _min: ShiftScheduleMinAggregateOutputType | null
    _max: ShiftScheduleMaxAggregateOutputType | null
  }

  export type ShiftScheduleAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
  }

  export type ShiftScheduleSumAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
  }

  export type ShiftScheduleMinAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    shiftDate: Date | null
    startTime: Date | null
    endTime: Date | null
    note: string | null
  }

  export type ShiftScheduleMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    shiftDate: Date | null
    startTime: Date | null
    endTime: Date | null
    note: string | null
  }

  export type ShiftScheduleCountAggregateOutputType = {
    id: number
    userId: number
    companyId: number
    shiftDate: number
    startTime: number
    endTime: number
    note: number
    _all: number
  }


  export type ShiftScheduleAvgAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
  }

  export type ShiftScheduleSumAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
  }

  export type ShiftScheduleMinAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    shiftDate?: true
    startTime?: true
    endTime?: true
    note?: true
  }

  export type ShiftScheduleMaxAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    shiftDate?: true
    startTime?: true
    endTime?: true
    note?: true
  }

  export type ShiftScheduleCountAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    shiftDate?: true
    startTime?: true
    endTime?: true
    note?: true
    _all?: true
  }

  export type ShiftScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftSchedule to aggregate.
     */
    where?: ShiftScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftSchedules to fetch.
     */
    orderBy?: ShiftScheduleOrderByWithRelationInput | ShiftScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShiftScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShiftSchedules
    **/
    _count?: true | ShiftScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftScheduleMaxAggregateInputType
  }

  export type GetShiftScheduleAggregateType<T extends ShiftScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateShiftSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShiftSchedule[P]>
      : GetScalarType<T[P], AggregateShiftSchedule[P]>
  }




  export type ShiftScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftScheduleWhereInput
    orderBy?: ShiftScheduleOrderByWithAggregationInput | ShiftScheduleOrderByWithAggregationInput[]
    by: ShiftScheduleScalarFieldEnum[] | ShiftScheduleScalarFieldEnum
    having?: ShiftScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftScheduleCountAggregateInputType | true
    _avg?: ShiftScheduleAvgAggregateInputType
    _sum?: ShiftScheduleSumAggregateInputType
    _min?: ShiftScheduleMinAggregateInputType
    _max?: ShiftScheduleMaxAggregateInputType
  }

  export type ShiftScheduleGroupByOutputType = {
    id: number
    userId: number
    companyId: number
    shiftDate: Date
    startTime: Date
    endTime: Date
    note: string | null
    _count: ShiftScheduleCountAggregateOutputType | null
    _avg: ShiftScheduleAvgAggregateOutputType | null
    _sum: ShiftScheduleSumAggregateOutputType | null
    _min: ShiftScheduleMinAggregateOutputType | null
    _max: ShiftScheduleMaxAggregateOutputType | null
  }

  type GetShiftScheduleGroupByPayload<T extends ShiftScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShiftScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ShiftScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    shiftDate?: boolean
    startTime?: boolean
    endTime?: boolean
    note?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    attendanceLogs?: boolean | ShiftSchedule$attendanceLogsArgs<ExtArgs>
    _count?: boolean | ShiftScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftSchedule"]>

  export type ShiftScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    shiftDate?: boolean
    startTime?: boolean
    endTime?: boolean
    note?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftSchedule"]>

  export type ShiftScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    shiftDate?: boolean
    startTime?: boolean
    endTime?: boolean
    note?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftSchedule"]>

  export type ShiftScheduleSelectScalar = {
    id?: boolean
    userId?: boolean
    companyId?: boolean
    shiftDate?: boolean
    startTime?: boolean
    endTime?: boolean
    note?: boolean
  }

  export type ShiftScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "companyId" | "shiftDate" | "startTime" | "endTime" | "note", ExtArgs["result"]["shiftSchedule"]>
  export type ShiftScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    attendanceLogs?: boolean | ShiftSchedule$attendanceLogsArgs<ExtArgs>
    _count?: boolean | ShiftScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShiftScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type ShiftScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $ShiftSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShiftSchedule"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
      attendanceLogs: Prisma.$AttendanceLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      companyId: number
      shiftDate: Date
      startTime: Date
      endTime: Date
      note: string | null
    }, ExtArgs["result"]["shiftSchedule"]>
    composites: {}
  }

  type ShiftScheduleGetPayload<S extends boolean | null | undefined | ShiftScheduleDefaultArgs> = $Result.GetResult<Prisma.$ShiftSchedulePayload, S>

  type ShiftScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShiftScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShiftScheduleCountAggregateInputType | true
    }

  export interface ShiftScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShiftSchedule'], meta: { name: 'ShiftSchedule' } }
    /**
     * Find zero or one ShiftSchedule that matches the filter.
     * @param {ShiftScheduleFindUniqueArgs} args - Arguments to find a ShiftSchedule
     * @example
     * // Get one ShiftSchedule
     * const shiftSchedule = await prisma.shiftSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShiftScheduleFindUniqueArgs>(args: SelectSubset<T, ShiftScheduleFindUniqueArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShiftSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShiftScheduleFindUniqueOrThrowArgs} args - Arguments to find a ShiftSchedule
     * @example
     * // Get one ShiftSchedule
     * const shiftSchedule = await prisma.shiftSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShiftScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ShiftScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShiftSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftScheduleFindFirstArgs} args - Arguments to find a ShiftSchedule
     * @example
     * // Get one ShiftSchedule
     * const shiftSchedule = await prisma.shiftSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShiftScheduleFindFirstArgs>(args?: SelectSubset<T, ShiftScheduleFindFirstArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShiftSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftScheduleFindFirstOrThrowArgs} args - Arguments to find a ShiftSchedule
     * @example
     * // Get one ShiftSchedule
     * const shiftSchedule = await prisma.shiftSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShiftScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ShiftScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShiftSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShiftSchedules
     * const shiftSchedules = await prisma.shiftSchedule.findMany()
     * 
     * // Get first 10 ShiftSchedules
     * const shiftSchedules = await prisma.shiftSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shiftScheduleWithIdOnly = await prisma.shiftSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShiftScheduleFindManyArgs>(args?: SelectSubset<T, ShiftScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShiftSchedule.
     * @param {ShiftScheduleCreateArgs} args - Arguments to create a ShiftSchedule.
     * @example
     * // Create one ShiftSchedule
     * const ShiftSchedule = await prisma.shiftSchedule.create({
     *   data: {
     *     // ... data to create a ShiftSchedule
     *   }
     * })
     * 
     */
    create<T extends ShiftScheduleCreateArgs>(args: SelectSubset<T, ShiftScheduleCreateArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShiftSchedules.
     * @param {ShiftScheduleCreateManyArgs} args - Arguments to create many ShiftSchedules.
     * @example
     * // Create many ShiftSchedules
     * const shiftSchedule = await prisma.shiftSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShiftScheduleCreateManyArgs>(args?: SelectSubset<T, ShiftScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShiftSchedules and returns the data saved in the database.
     * @param {ShiftScheduleCreateManyAndReturnArgs} args - Arguments to create many ShiftSchedules.
     * @example
     * // Create many ShiftSchedules
     * const shiftSchedule = await prisma.shiftSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShiftSchedules and only return the `id`
     * const shiftScheduleWithIdOnly = await prisma.shiftSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShiftScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ShiftScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShiftSchedule.
     * @param {ShiftScheduleDeleteArgs} args - Arguments to delete one ShiftSchedule.
     * @example
     * // Delete one ShiftSchedule
     * const ShiftSchedule = await prisma.shiftSchedule.delete({
     *   where: {
     *     // ... filter to delete one ShiftSchedule
     *   }
     * })
     * 
     */
    delete<T extends ShiftScheduleDeleteArgs>(args: SelectSubset<T, ShiftScheduleDeleteArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShiftSchedule.
     * @param {ShiftScheduleUpdateArgs} args - Arguments to update one ShiftSchedule.
     * @example
     * // Update one ShiftSchedule
     * const shiftSchedule = await prisma.shiftSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShiftScheduleUpdateArgs>(args: SelectSubset<T, ShiftScheduleUpdateArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShiftSchedules.
     * @param {ShiftScheduleDeleteManyArgs} args - Arguments to filter ShiftSchedules to delete.
     * @example
     * // Delete a few ShiftSchedules
     * const { count } = await prisma.shiftSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShiftScheduleDeleteManyArgs>(args?: SelectSubset<T, ShiftScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShiftSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShiftSchedules
     * const shiftSchedule = await prisma.shiftSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShiftScheduleUpdateManyArgs>(args: SelectSubset<T, ShiftScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShiftSchedules and returns the data updated in the database.
     * @param {ShiftScheduleUpdateManyAndReturnArgs} args - Arguments to update many ShiftSchedules.
     * @example
     * // Update many ShiftSchedules
     * const shiftSchedule = await prisma.shiftSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShiftSchedules and only return the `id`
     * const shiftScheduleWithIdOnly = await prisma.shiftSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShiftScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, ShiftScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShiftSchedule.
     * @param {ShiftScheduleUpsertArgs} args - Arguments to update or create a ShiftSchedule.
     * @example
     * // Update or create a ShiftSchedule
     * const shiftSchedule = await prisma.shiftSchedule.upsert({
     *   create: {
     *     // ... data to create a ShiftSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShiftSchedule we want to update
     *   }
     * })
     */
    upsert<T extends ShiftScheduleUpsertArgs>(args: SelectSubset<T, ShiftScheduleUpsertArgs<ExtArgs>>): Prisma__ShiftScheduleClient<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShiftSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftScheduleCountArgs} args - Arguments to filter ShiftSchedules to count.
     * @example
     * // Count the number of ShiftSchedules
     * const count = await prisma.shiftSchedule.count({
     *   where: {
     *     // ... the filter for the ShiftSchedules we want to count
     *   }
     * })
    **/
    count<T extends ShiftScheduleCountArgs>(
      args?: Subset<T, ShiftScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShiftSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftScheduleAggregateArgs>(args: Subset<T, ShiftScheduleAggregateArgs>): Prisma.PrismaPromise<GetShiftScheduleAggregateType<T>>

    /**
     * Group by ShiftSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ShiftScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShiftSchedule model
   */
  readonly fields: ShiftScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShiftSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShiftScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendanceLogs<T extends ShiftSchedule$attendanceLogsArgs<ExtArgs> = {}>(args?: Subset<T, ShiftSchedule$attendanceLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShiftSchedule model
   */
  interface ShiftScheduleFieldRefs {
    readonly id: FieldRef<"ShiftSchedule", 'Int'>
    readonly userId: FieldRef<"ShiftSchedule", 'Int'>
    readonly companyId: FieldRef<"ShiftSchedule", 'Int'>
    readonly shiftDate: FieldRef<"ShiftSchedule", 'DateTime'>
    readonly startTime: FieldRef<"ShiftSchedule", 'DateTime'>
    readonly endTime: FieldRef<"ShiftSchedule", 'DateTime'>
    readonly note: FieldRef<"ShiftSchedule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ShiftSchedule findUnique
   */
  export type ShiftScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSchedule to fetch.
     */
    where: ShiftScheduleWhereUniqueInput
  }

  /**
   * ShiftSchedule findUniqueOrThrow
   */
  export type ShiftScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSchedule to fetch.
     */
    where: ShiftScheduleWhereUniqueInput
  }

  /**
   * ShiftSchedule findFirst
   */
  export type ShiftScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSchedule to fetch.
     */
    where?: ShiftScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftSchedules to fetch.
     */
    orderBy?: ShiftScheduleOrderByWithRelationInput | ShiftScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftSchedules.
     */
    cursor?: ShiftScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftSchedules.
     */
    distinct?: ShiftScheduleScalarFieldEnum | ShiftScheduleScalarFieldEnum[]
  }

  /**
   * ShiftSchedule findFirstOrThrow
   */
  export type ShiftScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSchedule to fetch.
     */
    where?: ShiftScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftSchedules to fetch.
     */
    orderBy?: ShiftScheduleOrderByWithRelationInput | ShiftScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftSchedules.
     */
    cursor?: ShiftScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftSchedules.
     */
    distinct?: ShiftScheduleScalarFieldEnum | ShiftScheduleScalarFieldEnum[]
  }

  /**
   * ShiftSchedule findMany
   */
  export type ShiftScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSchedules to fetch.
     */
    where?: ShiftScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftSchedules to fetch.
     */
    orderBy?: ShiftScheduleOrderByWithRelationInput | ShiftScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShiftSchedules.
     */
    cursor?: ShiftScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftSchedules.
     */
    skip?: number
    distinct?: ShiftScheduleScalarFieldEnum | ShiftScheduleScalarFieldEnum[]
  }

  /**
   * ShiftSchedule create
   */
  export type ShiftScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a ShiftSchedule.
     */
    data: XOR<ShiftScheduleCreateInput, ShiftScheduleUncheckedCreateInput>
  }

  /**
   * ShiftSchedule createMany
   */
  export type ShiftScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShiftSchedules.
     */
    data: ShiftScheduleCreateManyInput | ShiftScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShiftSchedule createManyAndReturn
   */
  export type ShiftScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many ShiftSchedules.
     */
    data: ShiftScheduleCreateManyInput | ShiftScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShiftSchedule update
   */
  export type ShiftScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a ShiftSchedule.
     */
    data: XOR<ShiftScheduleUpdateInput, ShiftScheduleUncheckedUpdateInput>
    /**
     * Choose, which ShiftSchedule to update.
     */
    where: ShiftScheduleWhereUniqueInput
  }

  /**
   * ShiftSchedule updateMany
   */
  export type ShiftScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShiftSchedules.
     */
    data: XOR<ShiftScheduleUpdateManyMutationInput, ShiftScheduleUncheckedUpdateManyInput>
    /**
     * Filter which ShiftSchedules to update
     */
    where?: ShiftScheduleWhereInput
    /**
     * Limit how many ShiftSchedules to update.
     */
    limit?: number
  }

  /**
   * ShiftSchedule updateManyAndReturn
   */
  export type ShiftScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * The data used to update ShiftSchedules.
     */
    data: XOR<ShiftScheduleUpdateManyMutationInput, ShiftScheduleUncheckedUpdateManyInput>
    /**
     * Filter which ShiftSchedules to update
     */
    where?: ShiftScheduleWhereInput
    /**
     * Limit how many ShiftSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShiftSchedule upsert
   */
  export type ShiftScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the ShiftSchedule to update in case it exists.
     */
    where: ShiftScheduleWhereUniqueInput
    /**
     * In case the ShiftSchedule found by the `where` argument doesn't exist, create a new ShiftSchedule with this data.
     */
    create: XOR<ShiftScheduleCreateInput, ShiftScheduleUncheckedCreateInput>
    /**
     * In case the ShiftSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShiftScheduleUpdateInput, ShiftScheduleUncheckedUpdateInput>
  }

  /**
   * ShiftSchedule delete
   */
  export type ShiftScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    /**
     * Filter which ShiftSchedule to delete.
     */
    where: ShiftScheduleWhereUniqueInput
  }

  /**
   * ShiftSchedule deleteMany
   */
  export type ShiftScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftSchedules to delete
     */
    where?: ShiftScheduleWhereInput
    /**
     * Limit how many ShiftSchedules to delete.
     */
    limit?: number
  }

  /**
   * ShiftSchedule.attendanceLogs
   */
  export type ShiftSchedule$attendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    where?: AttendanceLogWhereInput
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    cursor?: AttendanceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * ShiftSchedule without action
   */
  export type ShiftScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
  }


  /**
   * Model PaySlip
   */

  export type AggregatePaySlip = {
    _count: PaySlipCountAggregateOutputType | null
    _avg: PaySlipAvgAggregateOutputType | null
    _sum: PaySlipSumAggregateOutputType | null
    _min: PaySlipMinAggregateOutputType | null
    _max: PaySlipMaxAggregateOutputType | null
  }

  export type PaySlipAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    issuedById: number | null
    companyId: number | null
    amount: number | null
  }

  export type PaySlipSumAggregateOutputType = {
    id: number | null
    userId: number | null
    issuedById: number | null
    companyId: number | null
    amount: number | null
  }

  export type PaySlipMinAggregateOutputType = {
    id: number | null
    userId: number | null
    issuedById: number | null
    companyId: number | null
    month: Date | null
    amount: number | null
    note: string | null
    fileUrl: string | null
    createdAt: Date | null
  }

  export type PaySlipMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    issuedById: number | null
    companyId: number | null
    month: Date | null
    amount: number | null
    note: string | null
    fileUrl: string | null
    createdAt: Date | null
  }

  export type PaySlipCountAggregateOutputType = {
    id: number
    userId: number
    issuedById: number
    companyId: number
    month: number
    amount: number
    note: number
    fileUrl: number
    createdAt: number
    _all: number
  }


  export type PaySlipAvgAggregateInputType = {
    id?: true
    userId?: true
    issuedById?: true
    companyId?: true
    amount?: true
  }

  export type PaySlipSumAggregateInputType = {
    id?: true
    userId?: true
    issuedById?: true
    companyId?: true
    amount?: true
  }

  export type PaySlipMinAggregateInputType = {
    id?: true
    userId?: true
    issuedById?: true
    companyId?: true
    month?: true
    amount?: true
    note?: true
    fileUrl?: true
    createdAt?: true
  }

  export type PaySlipMaxAggregateInputType = {
    id?: true
    userId?: true
    issuedById?: true
    companyId?: true
    month?: true
    amount?: true
    note?: true
    fileUrl?: true
    createdAt?: true
  }

  export type PaySlipCountAggregateInputType = {
    id?: true
    userId?: true
    issuedById?: true
    companyId?: true
    month?: true
    amount?: true
    note?: true
    fileUrl?: true
    createdAt?: true
    _all?: true
  }

  export type PaySlipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaySlip to aggregate.
     */
    where?: PaySlipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaySlips to fetch.
     */
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaySlipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaySlips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaySlips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaySlips
    **/
    _count?: true | PaySlipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaySlipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaySlipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaySlipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaySlipMaxAggregateInputType
  }

  export type GetPaySlipAggregateType<T extends PaySlipAggregateArgs> = {
        [P in keyof T & keyof AggregatePaySlip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaySlip[P]>
      : GetScalarType<T[P], AggregatePaySlip[P]>
  }




  export type PaySlipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaySlipWhereInput
    orderBy?: PaySlipOrderByWithAggregationInput | PaySlipOrderByWithAggregationInput[]
    by: PaySlipScalarFieldEnum[] | PaySlipScalarFieldEnum
    having?: PaySlipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaySlipCountAggregateInputType | true
    _avg?: PaySlipAvgAggregateInputType
    _sum?: PaySlipSumAggregateInputType
    _min?: PaySlipMinAggregateInputType
    _max?: PaySlipMaxAggregateInputType
  }

  export type PaySlipGroupByOutputType = {
    id: number
    userId: number
    issuedById: number
    companyId: number
    month: Date
    amount: number
    note: string | null
    fileUrl: string | null
    createdAt: Date
    _count: PaySlipCountAggregateOutputType | null
    _avg: PaySlipAvgAggregateOutputType | null
    _sum: PaySlipSumAggregateOutputType | null
    _min: PaySlipMinAggregateOutputType | null
    _max: PaySlipMaxAggregateOutputType | null
  }

  type GetPaySlipGroupByPayload<T extends PaySlipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaySlipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaySlipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaySlipGroupByOutputType[P]>
            : GetScalarType<T[P], PaySlipGroupByOutputType[P]>
        }
      >
    >


  export type PaySlipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    issuedById?: boolean
    companyId?: boolean
    month?: boolean
    amount?: boolean
    note?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    issuedBy?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paySlip"]>

  export type PaySlipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    issuedById?: boolean
    companyId?: boolean
    month?: boolean
    amount?: boolean
    note?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    issuedBy?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paySlip"]>

  export type PaySlipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    issuedById?: boolean
    companyId?: boolean
    month?: boolean
    amount?: boolean
    note?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    issuedBy?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paySlip"]>

  export type PaySlipSelectScalar = {
    id?: boolean
    userId?: boolean
    issuedById?: boolean
    companyId?: boolean
    month?: boolean
    amount?: boolean
    note?: boolean
    fileUrl?: boolean
    createdAt?: boolean
  }

  export type PaySlipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "issuedById" | "companyId" | "month" | "amount" | "note" | "fileUrl" | "createdAt", ExtArgs["result"]["paySlip"]>
  export type PaySlipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    issuedBy?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type PaySlipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    issuedBy?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type PaySlipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    issuedBy?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $PaySlipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaySlip"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      issuedBy: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      issuedById: number
      companyId: number
      month: Date
      amount: number
      note: string | null
      fileUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["paySlip"]>
    composites: {}
  }

  type PaySlipGetPayload<S extends boolean | null | undefined | PaySlipDefaultArgs> = $Result.GetResult<Prisma.$PaySlipPayload, S>

  type PaySlipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaySlipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaySlipCountAggregateInputType | true
    }

  export interface PaySlipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaySlip'], meta: { name: 'PaySlip' } }
    /**
     * Find zero or one PaySlip that matches the filter.
     * @param {PaySlipFindUniqueArgs} args - Arguments to find a PaySlip
     * @example
     * // Get one PaySlip
     * const paySlip = await prisma.paySlip.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaySlipFindUniqueArgs>(args: SelectSubset<T, PaySlipFindUniqueArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaySlip that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaySlipFindUniqueOrThrowArgs} args - Arguments to find a PaySlip
     * @example
     * // Get one PaySlip
     * const paySlip = await prisma.paySlip.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaySlipFindUniqueOrThrowArgs>(args: SelectSubset<T, PaySlipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaySlip that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipFindFirstArgs} args - Arguments to find a PaySlip
     * @example
     * // Get one PaySlip
     * const paySlip = await prisma.paySlip.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaySlipFindFirstArgs>(args?: SelectSubset<T, PaySlipFindFirstArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaySlip that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipFindFirstOrThrowArgs} args - Arguments to find a PaySlip
     * @example
     * // Get one PaySlip
     * const paySlip = await prisma.paySlip.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaySlipFindFirstOrThrowArgs>(args?: SelectSubset<T, PaySlipFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaySlips that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaySlips
     * const paySlips = await prisma.paySlip.findMany()
     * 
     * // Get first 10 PaySlips
     * const paySlips = await prisma.paySlip.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paySlipWithIdOnly = await prisma.paySlip.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaySlipFindManyArgs>(args?: SelectSubset<T, PaySlipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaySlip.
     * @param {PaySlipCreateArgs} args - Arguments to create a PaySlip.
     * @example
     * // Create one PaySlip
     * const PaySlip = await prisma.paySlip.create({
     *   data: {
     *     // ... data to create a PaySlip
     *   }
     * })
     * 
     */
    create<T extends PaySlipCreateArgs>(args: SelectSubset<T, PaySlipCreateArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaySlips.
     * @param {PaySlipCreateManyArgs} args - Arguments to create many PaySlips.
     * @example
     * // Create many PaySlips
     * const paySlip = await prisma.paySlip.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaySlipCreateManyArgs>(args?: SelectSubset<T, PaySlipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaySlips and returns the data saved in the database.
     * @param {PaySlipCreateManyAndReturnArgs} args - Arguments to create many PaySlips.
     * @example
     * // Create many PaySlips
     * const paySlip = await prisma.paySlip.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaySlips and only return the `id`
     * const paySlipWithIdOnly = await prisma.paySlip.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaySlipCreateManyAndReturnArgs>(args?: SelectSubset<T, PaySlipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PaySlip.
     * @param {PaySlipDeleteArgs} args - Arguments to delete one PaySlip.
     * @example
     * // Delete one PaySlip
     * const PaySlip = await prisma.paySlip.delete({
     *   where: {
     *     // ... filter to delete one PaySlip
     *   }
     * })
     * 
     */
    delete<T extends PaySlipDeleteArgs>(args: SelectSubset<T, PaySlipDeleteArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaySlip.
     * @param {PaySlipUpdateArgs} args - Arguments to update one PaySlip.
     * @example
     * // Update one PaySlip
     * const paySlip = await prisma.paySlip.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaySlipUpdateArgs>(args: SelectSubset<T, PaySlipUpdateArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaySlips.
     * @param {PaySlipDeleteManyArgs} args - Arguments to filter PaySlips to delete.
     * @example
     * // Delete a few PaySlips
     * const { count } = await prisma.paySlip.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaySlipDeleteManyArgs>(args?: SelectSubset<T, PaySlipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaySlips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaySlips
     * const paySlip = await prisma.paySlip.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaySlipUpdateManyArgs>(args: SelectSubset<T, PaySlipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaySlips and returns the data updated in the database.
     * @param {PaySlipUpdateManyAndReturnArgs} args - Arguments to update many PaySlips.
     * @example
     * // Update many PaySlips
     * const paySlip = await prisma.paySlip.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaySlips and only return the `id`
     * const paySlipWithIdOnly = await prisma.paySlip.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaySlipUpdateManyAndReturnArgs>(args: SelectSubset<T, PaySlipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PaySlip.
     * @param {PaySlipUpsertArgs} args - Arguments to update or create a PaySlip.
     * @example
     * // Update or create a PaySlip
     * const paySlip = await prisma.paySlip.upsert({
     *   create: {
     *     // ... data to create a PaySlip
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaySlip we want to update
     *   }
     * })
     */
    upsert<T extends PaySlipUpsertArgs>(args: SelectSubset<T, PaySlipUpsertArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaySlips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipCountArgs} args - Arguments to filter PaySlips to count.
     * @example
     * // Count the number of PaySlips
     * const count = await prisma.paySlip.count({
     *   where: {
     *     // ... the filter for the PaySlips we want to count
     *   }
     * })
    **/
    count<T extends PaySlipCountArgs>(
      args?: Subset<T, PaySlipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaySlipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaySlip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaySlipAggregateArgs>(args: Subset<T, PaySlipAggregateArgs>): Prisma.PrismaPromise<GetPaySlipAggregateType<T>>

    /**
     * Group by PaySlip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaySlipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaySlipGroupByArgs['orderBy'] }
        : { orderBy?: PaySlipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaySlipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaySlipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaySlip model
   */
  readonly fields: PaySlipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaySlip.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaySlipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    issuedBy<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaySlip model
   */
  interface PaySlipFieldRefs {
    readonly id: FieldRef<"PaySlip", 'Int'>
    readonly userId: FieldRef<"PaySlip", 'Int'>
    readonly issuedById: FieldRef<"PaySlip", 'Int'>
    readonly companyId: FieldRef<"PaySlip", 'Int'>
    readonly month: FieldRef<"PaySlip", 'DateTime'>
    readonly amount: FieldRef<"PaySlip", 'Int'>
    readonly note: FieldRef<"PaySlip", 'String'>
    readonly fileUrl: FieldRef<"PaySlip", 'String'>
    readonly createdAt: FieldRef<"PaySlip", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaySlip findUnique
   */
  export type PaySlipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlip to fetch.
     */
    where: PaySlipWhereUniqueInput
  }

  /**
   * PaySlip findUniqueOrThrow
   */
  export type PaySlipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlip to fetch.
     */
    where: PaySlipWhereUniqueInput
  }

  /**
   * PaySlip findFirst
   */
  export type PaySlipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlip to fetch.
     */
    where?: PaySlipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaySlips to fetch.
     */
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaySlips.
     */
    cursor?: PaySlipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaySlips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaySlips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaySlips.
     */
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * PaySlip findFirstOrThrow
   */
  export type PaySlipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlip to fetch.
     */
    where?: PaySlipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaySlips to fetch.
     */
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaySlips.
     */
    cursor?: PaySlipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaySlips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaySlips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaySlips.
     */
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * PaySlip findMany
   */
  export type PaySlipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlips to fetch.
     */
    where?: PaySlipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaySlips to fetch.
     */
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaySlips.
     */
    cursor?: PaySlipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaySlips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaySlips.
     */
    skip?: number
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * PaySlip create
   */
  export type PaySlipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * The data needed to create a PaySlip.
     */
    data: XOR<PaySlipCreateInput, PaySlipUncheckedCreateInput>
  }

  /**
   * PaySlip createMany
   */
  export type PaySlipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaySlips.
     */
    data: PaySlipCreateManyInput | PaySlipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaySlip createManyAndReturn
   */
  export type PaySlipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * The data used to create many PaySlips.
     */
    data: PaySlipCreateManyInput | PaySlipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaySlip update
   */
  export type PaySlipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * The data needed to update a PaySlip.
     */
    data: XOR<PaySlipUpdateInput, PaySlipUncheckedUpdateInput>
    /**
     * Choose, which PaySlip to update.
     */
    where: PaySlipWhereUniqueInput
  }

  /**
   * PaySlip updateMany
   */
  export type PaySlipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaySlips.
     */
    data: XOR<PaySlipUpdateManyMutationInput, PaySlipUncheckedUpdateManyInput>
    /**
     * Filter which PaySlips to update
     */
    where?: PaySlipWhereInput
    /**
     * Limit how many PaySlips to update.
     */
    limit?: number
  }

  /**
   * PaySlip updateManyAndReturn
   */
  export type PaySlipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * The data used to update PaySlips.
     */
    data: XOR<PaySlipUpdateManyMutationInput, PaySlipUncheckedUpdateManyInput>
    /**
     * Filter which PaySlips to update
     */
    where?: PaySlipWhereInput
    /**
     * Limit how many PaySlips to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaySlip upsert
   */
  export type PaySlipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * The filter to search for the PaySlip to update in case it exists.
     */
    where: PaySlipWhereUniqueInput
    /**
     * In case the PaySlip found by the `where` argument doesn't exist, create a new PaySlip with this data.
     */
    create: XOR<PaySlipCreateInput, PaySlipUncheckedCreateInput>
    /**
     * In case the PaySlip was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaySlipUpdateInput, PaySlipUncheckedUpdateInput>
  }

  /**
   * PaySlip delete
   */
  export type PaySlipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter which PaySlip to delete.
     */
    where: PaySlipWhereUniqueInput
  }

  /**
   * PaySlip deleteMany
   */
  export type PaySlipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaySlips to delete
     */
    where?: PaySlipWhereInput
    /**
     * Limit how many PaySlips to delete.
     */
    limit?: number
  }

  /**
   * PaySlip without action
   */
  export type PaySlipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
  }


  /**
   * Model JobPosting
   */

  export type AggregateJobPosting = {
    _count: JobPostingCountAggregateOutputType | null
    _avg: JobPostingAvgAggregateOutputType | null
    _sum: JobPostingSumAggregateOutputType | null
    _min: JobPostingMinAggregateOutputType | null
    _max: JobPostingMaxAggregateOutputType | null
  }

  export type JobPostingAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
  }

  export type JobPostingSumAggregateOutputType = {
    id: number | null
    companyId: number | null
  }

  export type JobPostingMinAggregateOutputType = {
    id: number | null
    companyId: number | null
    title: string | null
    description: string | null
    location: string | null
    jobType: $Enums.JobTypeEnum | null
    salaryRange: string | null
    isActive: boolean | null
    postedAt: Date | null
    expiredAt: Date | null
  }

  export type JobPostingMaxAggregateOutputType = {
    id: number | null
    companyId: number | null
    title: string | null
    description: string | null
    location: string | null
    jobType: $Enums.JobTypeEnum | null
    salaryRange: string | null
    isActive: boolean | null
    postedAt: Date | null
    expiredAt: Date | null
  }

  export type JobPostingCountAggregateOutputType = {
    id: number
    companyId: number
    title: number
    description: number
    location: number
    jobType: number
    salaryRange: number
    isActive: number
    postedAt: number
    expiredAt: number
    _all: number
  }


  export type JobPostingAvgAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type JobPostingSumAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type JobPostingMinAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    description?: true
    location?: true
    jobType?: true
    salaryRange?: true
    isActive?: true
    postedAt?: true
    expiredAt?: true
  }

  export type JobPostingMaxAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    description?: true
    location?: true
    jobType?: true
    salaryRange?: true
    isActive?: true
    postedAt?: true
    expiredAt?: true
  }

  export type JobPostingCountAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    description?: true
    location?: true
    jobType?: true
    salaryRange?: true
    isActive?: true
    postedAt?: true
    expiredAt?: true
    _all?: true
  }

  export type JobPostingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPosting to aggregate.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobPostings
    **/
    _count?: true | JobPostingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobPostingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobPostingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobPostingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobPostingMaxAggregateInputType
  }

  export type GetJobPostingAggregateType<T extends JobPostingAggregateArgs> = {
        [P in keyof T & keyof AggregateJobPosting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobPosting[P]>
      : GetScalarType<T[P], AggregateJobPosting[P]>
  }




  export type JobPostingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingWhereInput
    orderBy?: JobPostingOrderByWithAggregationInput | JobPostingOrderByWithAggregationInput[]
    by: JobPostingScalarFieldEnum[] | JobPostingScalarFieldEnum
    having?: JobPostingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobPostingCountAggregateInputType | true
    _avg?: JobPostingAvgAggregateInputType
    _sum?: JobPostingSumAggregateInputType
    _min?: JobPostingMinAggregateInputType
    _max?: JobPostingMaxAggregateInputType
  }

  export type JobPostingGroupByOutputType = {
    id: number
    companyId: number
    title: string
    description: string
    location: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange: string | null
    isActive: boolean
    postedAt: Date
    expiredAt: Date | null
    _count: JobPostingCountAggregateOutputType | null
    _avg: JobPostingAvgAggregateOutputType | null
    _sum: JobPostingSumAggregateOutputType | null
    _min: JobPostingMinAggregateOutputType | null
    _max: JobPostingMaxAggregateOutputType | null
  }

  type GetJobPostingGroupByPayload<T extends JobPostingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobPostingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobPostingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobPostingGroupByOutputType[P]>
            : GetScalarType<T[P], JobPostingGroupByOutputType[P]>
        }
      >
    >


  export type JobPostingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    jobType?: boolean
    salaryRange?: boolean
    isActive?: boolean
    postedAt?: boolean
    expiredAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    applications?: boolean | JobPosting$applicationsArgs<ExtArgs>
    _count?: boolean | JobPostingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPosting"]>

  export type JobPostingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    jobType?: boolean
    salaryRange?: boolean
    isActive?: boolean
    postedAt?: boolean
    expiredAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPosting"]>

  export type JobPostingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    jobType?: boolean
    salaryRange?: boolean
    isActive?: boolean
    postedAt?: boolean
    expiredAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPosting"]>

  export type JobPostingSelectScalar = {
    id?: boolean
    companyId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    jobType?: boolean
    salaryRange?: boolean
    isActive?: boolean
    postedAt?: boolean
    expiredAt?: boolean
  }

  export type JobPostingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "title" | "description" | "location" | "jobType" | "salaryRange" | "isActive" | "postedAt" | "expiredAt", ExtArgs["result"]["jobPosting"]>
  export type JobPostingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    applications?: boolean | JobPosting$applicationsArgs<ExtArgs>
    _count?: boolean | JobPostingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobPostingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type JobPostingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $JobPostingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobPosting"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      applications: Prisma.$JobApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyId: number
      title: string
      description: string
      location: string | null
      jobType: $Enums.JobTypeEnum
      salaryRange: string | null
      isActive: boolean
      postedAt: Date
      expiredAt: Date | null
    }, ExtArgs["result"]["jobPosting"]>
    composites: {}
  }

  type JobPostingGetPayload<S extends boolean | null | undefined | JobPostingDefaultArgs> = $Result.GetResult<Prisma.$JobPostingPayload, S>

  type JobPostingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobPostingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobPostingCountAggregateInputType | true
    }

  export interface JobPostingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobPosting'], meta: { name: 'JobPosting' } }
    /**
     * Find zero or one JobPosting that matches the filter.
     * @param {JobPostingFindUniqueArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobPostingFindUniqueArgs>(args: SelectSubset<T, JobPostingFindUniqueArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobPosting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobPostingFindUniqueOrThrowArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobPostingFindUniqueOrThrowArgs>(args: SelectSubset<T, JobPostingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobPosting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindFirstArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobPostingFindFirstArgs>(args?: SelectSubset<T, JobPostingFindFirstArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobPosting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindFirstOrThrowArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobPostingFindFirstOrThrowArgs>(args?: SelectSubset<T, JobPostingFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobPostings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobPostings
     * const jobPostings = await prisma.jobPosting.findMany()
     * 
     * // Get first 10 JobPostings
     * const jobPostings = await prisma.jobPosting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobPostingWithIdOnly = await prisma.jobPosting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobPostingFindManyArgs>(args?: SelectSubset<T, JobPostingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobPosting.
     * @param {JobPostingCreateArgs} args - Arguments to create a JobPosting.
     * @example
     * // Create one JobPosting
     * const JobPosting = await prisma.jobPosting.create({
     *   data: {
     *     // ... data to create a JobPosting
     *   }
     * })
     * 
     */
    create<T extends JobPostingCreateArgs>(args: SelectSubset<T, JobPostingCreateArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobPostings.
     * @param {JobPostingCreateManyArgs} args - Arguments to create many JobPostings.
     * @example
     * // Create many JobPostings
     * const jobPosting = await prisma.jobPosting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobPostingCreateManyArgs>(args?: SelectSubset<T, JobPostingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobPostings and returns the data saved in the database.
     * @param {JobPostingCreateManyAndReturnArgs} args - Arguments to create many JobPostings.
     * @example
     * // Create many JobPostings
     * const jobPosting = await prisma.jobPosting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobPostings and only return the `id`
     * const jobPostingWithIdOnly = await prisma.jobPosting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobPostingCreateManyAndReturnArgs>(args?: SelectSubset<T, JobPostingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobPosting.
     * @param {JobPostingDeleteArgs} args - Arguments to delete one JobPosting.
     * @example
     * // Delete one JobPosting
     * const JobPosting = await prisma.jobPosting.delete({
     *   where: {
     *     // ... filter to delete one JobPosting
     *   }
     * })
     * 
     */
    delete<T extends JobPostingDeleteArgs>(args: SelectSubset<T, JobPostingDeleteArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobPosting.
     * @param {JobPostingUpdateArgs} args - Arguments to update one JobPosting.
     * @example
     * // Update one JobPosting
     * const jobPosting = await prisma.jobPosting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobPostingUpdateArgs>(args: SelectSubset<T, JobPostingUpdateArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobPostings.
     * @param {JobPostingDeleteManyArgs} args - Arguments to filter JobPostings to delete.
     * @example
     * // Delete a few JobPostings
     * const { count } = await prisma.jobPosting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobPostingDeleteManyArgs>(args?: SelectSubset<T, JobPostingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobPostings
     * const jobPosting = await prisma.jobPosting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobPostingUpdateManyArgs>(args: SelectSubset<T, JobPostingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPostings and returns the data updated in the database.
     * @param {JobPostingUpdateManyAndReturnArgs} args - Arguments to update many JobPostings.
     * @example
     * // Update many JobPostings
     * const jobPosting = await prisma.jobPosting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobPostings and only return the `id`
     * const jobPostingWithIdOnly = await prisma.jobPosting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobPostingUpdateManyAndReturnArgs>(args: SelectSubset<T, JobPostingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobPosting.
     * @param {JobPostingUpsertArgs} args - Arguments to update or create a JobPosting.
     * @example
     * // Update or create a JobPosting
     * const jobPosting = await prisma.jobPosting.upsert({
     *   create: {
     *     // ... data to create a JobPosting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobPosting we want to update
     *   }
     * })
     */
    upsert<T extends JobPostingUpsertArgs>(args: SelectSubset<T, JobPostingUpsertArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingCountArgs} args - Arguments to filter JobPostings to count.
     * @example
     * // Count the number of JobPostings
     * const count = await prisma.jobPosting.count({
     *   where: {
     *     // ... the filter for the JobPostings we want to count
     *   }
     * })
    **/
    count<T extends JobPostingCountArgs>(
      args?: Subset<T, JobPostingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobPostingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobPosting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobPostingAggregateArgs>(args: Subset<T, JobPostingAggregateArgs>): Prisma.PrismaPromise<GetJobPostingAggregateType<T>>

    /**
     * Group by JobPosting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobPostingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobPostingGroupByArgs['orderBy'] }
        : { orderBy?: JobPostingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobPostingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobPostingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobPosting model
   */
  readonly fields: JobPostingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobPosting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobPostingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    applications<T extends JobPosting$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, JobPosting$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobPosting model
   */
  interface JobPostingFieldRefs {
    readonly id: FieldRef<"JobPosting", 'Int'>
    readonly companyId: FieldRef<"JobPosting", 'Int'>
    readonly title: FieldRef<"JobPosting", 'String'>
    readonly description: FieldRef<"JobPosting", 'String'>
    readonly location: FieldRef<"JobPosting", 'String'>
    readonly jobType: FieldRef<"JobPosting", 'JobTypeEnum'>
    readonly salaryRange: FieldRef<"JobPosting", 'String'>
    readonly isActive: FieldRef<"JobPosting", 'Boolean'>
    readonly postedAt: FieldRef<"JobPosting", 'DateTime'>
    readonly expiredAt: FieldRef<"JobPosting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobPosting findUnique
   */
  export type JobPostingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting findUniqueOrThrow
   */
  export type JobPostingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting findFirst
   */
  export type JobPostingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings.
     */
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting findFirstOrThrow
   */
  export type JobPostingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings.
     */
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting findMany
   */
  export type JobPostingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting create
   */
  export type JobPostingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The data needed to create a JobPosting.
     */
    data: XOR<JobPostingCreateInput, JobPostingUncheckedCreateInput>
  }

  /**
   * JobPosting createMany
   */
  export type JobPostingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobPostings.
     */
    data: JobPostingCreateManyInput | JobPostingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobPosting createManyAndReturn
   */
  export type JobPostingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * The data used to create many JobPostings.
     */
    data: JobPostingCreateManyInput | JobPostingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobPosting update
   */
  export type JobPostingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The data needed to update a JobPosting.
     */
    data: XOR<JobPostingUpdateInput, JobPostingUncheckedUpdateInput>
    /**
     * Choose, which JobPosting to update.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting updateMany
   */
  export type JobPostingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobPostings.
     */
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyInput>
    /**
     * Filter which JobPostings to update
     */
    where?: JobPostingWhereInput
    /**
     * Limit how many JobPostings to update.
     */
    limit?: number
  }

  /**
   * JobPosting updateManyAndReturn
   */
  export type JobPostingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * The data used to update JobPostings.
     */
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyInput>
    /**
     * Filter which JobPostings to update
     */
    where?: JobPostingWhereInput
    /**
     * Limit how many JobPostings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobPosting upsert
   */
  export type JobPostingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The filter to search for the JobPosting to update in case it exists.
     */
    where: JobPostingWhereUniqueInput
    /**
     * In case the JobPosting found by the `where` argument doesn't exist, create a new JobPosting with this data.
     */
    create: XOR<JobPostingCreateInput, JobPostingUncheckedCreateInput>
    /**
     * In case the JobPosting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobPostingUpdateInput, JobPostingUncheckedUpdateInput>
  }

  /**
   * JobPosting delete
   */
  export type JobPostingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter which JobPosting to delete.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting deleteMany
   */
  export type JobPostingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings to delete
     */
    where?: JobPostingWhereInput
    /**
     * Limit how many JobPostings to delete.
     */
    limit?: number
  }

  /**
   * JobPosting.applications
   */
  export type JobPosting$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    where?: JobApplicationWhereInput
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    cursor?: JobApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * JobPosting without action
   */
  export type JobPostingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
  }


  /**
   * Model JobApplication
   */

  export type AggregateJobApplication = {
    _count: JobApplicationCountAggregateOutputType | null
    _avg: JobApplicationAvgAggregateOutputType | null
    _sum: JobApplicationSumAggregateOutputType | null
    _min: JobApplicationMinAggregateOutputType | null
    _max: JobApplicationMaxAggregateOutputType | null
  }

  export type JobApplicationAvgAggregateOutputType = {
    id: number | null
    jobId: number | null
    resumeId: number | null
  }

  export type JobApplicationSumAggregateOutputType = {
    id: number | null
    jobId: number | null
    resumeId: number | null
  }

  export type JobApplicationMinAggregateOutputType = {
    id: number | null
    jobId: number | null
    resumeId: number | null
    status: string | null
    appliedAt: Date | null
    note: string | null
  }

  export type JobApplicationMaxAggregateOutputType = {
    id: number | null
    jobId: number | null
    resumeId: number | null
    status: string | null
    appliedAt: Date | null
    note: string | null
  }

  export type JobApplicationCountAggregateOutputType = {
    id: number
    jobId: number
    resumeId: number
    status: number
    appliedAt: number
    note: number
    _all: number
  }


  export type JobApplicationAvgAggregateInputType = {
    id?: true
    jobId?: true
    resumeId?: true
  }

  export type JobApplicationSumAggregateInputType = {
    id?: true
    jobId?: true
    resumeId?: true
  }

  export type JobApplicationMinAggregateInputType = {
    id?: true
    jobId?: true
    resumeId?: true
    status?: true
    appliedAt?: true
    note?: true
  }

  export type JobApplicationMaxAggregateInputType = {
    id?: true
    jobId?: true
    resumeId?: true
    status?: true
    appliedAt?: true
    note?: true
  }

  export type JobApplicationCountAggregateInputType = {
    id?: true
    jobId?: true
    resumeId?: true
    status?: true
    appliedAt?: true
    note?: true
    _all?: true
  }

  export type JobApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobApplication to aggregate.
     */
    where?: JobApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobApplications to fetch.
     */
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobApplications
    **/
    _count?: true | JobApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobApplicationMaxAggregateInputType
  }

  export type GetJobApplicationAggregateType<T extends JobApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateJobApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobApplication[P]>
      : GetScalarType<T[P], AggregateJobApplication[P]>
  }




  export type JobApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobApplicationWhereInput
    orderBy?: JobApplicationOrderByWithAggregationInput | JobApplicationOrderByWithAggregationInput[]
    by: JobApplicationScalarFieldEnum[] | JobApplicationScalarFieldEnum
    having?: JobApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobApplicationCountAggregateInputType | true
    _avg?: JobApplicationAvgAggregateInputType
    _sum?: JobApplicationSumAggregateInputType
    _min?: JobApplicationMinAggregateInputType
    _max?: JobApplicationMaxAggregateInputType
  }

  export type JobApplicationGroupByOutputType = {
    id: number
    jobId: number
    resumeId: number
    status: string
    appliedAt: Date
    note: string | null
    _count: JobApplicationCountAggregateOutputType | null
    _avg: JobApplicationAvgAggregateOutputType | null
    _sum: JobApplicationSumAggregateOutputType | null
    _min: JobApplicationMinAggregateOutputType | null
    _max: JobApplicationMaxAggregateOutputType | null
  }

  type GetJobApplicationGroupByPayload<T extends JobApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], JobApplicationGroupByOutputType[P]>
        }
      >
    >


  export type JobApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    resumeId?: boolean
    status?: boolean
    appliedAt?: boolean
    note?: boolean
    job?: boolean | JobPostingDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobApplication"]>

  export type JobApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    resumeId?: boolean
    status?: boolean
    appliedAt?: boolean
    note?: boolean
    job?: boolean | JobPostingDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobApplication"]>

  export type JobApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    resumeId?: boolean
    status?: boolean
    appliedAt?: boolean
    note?: boolean
    job?: boolean | JobPostingDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobApplication"]>

  export type JobApplicationSelectScalar = {
    id?: boolean
    jobId?: boolean
    resumeId?: boolean
    status?: boolean
    appliedAt?: boolean
    note?: boolean
  }

  export type JobApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "resumeId" | "status" | "appliedAt" | "note", ExtArgs["result"]["jobApplication"]>
  export type JobApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobPostingDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type JobApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobPostingDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type JobApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobPostingDefaultArgs<ExtArgs>
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $JobApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobApplication"
    objects: {
      job: Prisma.$JobPostingPayload<ExtArgs>
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobId: number
      resumeId: number
      status: string
      appliedAt: Date
      note: string | null
    }, ExtArgs["result"]["jobApplication"]>
    composites: {}
  }

  type JobApplicationGetPayload<S extends boolean | null | undefined | JobApplicationDefaultArgs> = $Result.GetResult<Prisma.$JobApplicationPayload, S>

  type JobApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobApplicationCountAggregateInputType | true
    }

  export interface JobApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobApplication'], meta: { name: 'JobApplication' } }
    /**
     * Find zero or one JobApplication that matches the filter.
     * @param {JobApplicationFindUniqueArgs} args - Arguments to find a JobApplication
     * @example
     * // Get one JobApplication
     * const jobApplication = await prisma.jobApplication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobApplicationFindUniqueArgs>(args: SelectSubset<T, JobApplicationFindUniqueArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobApplication that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobApplicationFindUniqueOrThrowArgs} args - Arguments to find a JobApplication
     * @example
     * // Get one JobApplication
     * const jobApplication = await prisma.jobApplication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, JobApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobApplication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationFindFirstArgs} args - Arguments to find a JobApplication
     * @example
     * // Get one JobApplication
     * const jobApplication = await prisma.jobApplication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobApplicationFindFirstArgs>(args?: SelectSubset<T, JobApplicationFindFirstArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobApplication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationFindFirstOrThrowArgs} args - Arguments to find a JobApplication
     * @example
     * // Get one JobApplication
     * const jobApplication = await prisma.jobApplication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, JobApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobApplications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobApplications
     * const jobApplications = await prisma.jobApplication.findMany()
     * 
     * // Get first 10 JobApplications
     * const jobApplications = await prisma.jobApplication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobApplicationWithIdOnly = await prisma.jobApplication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobApplicationFindManyArgs>(args?: SelectSubset<T, JobApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobApplication.
     * @param {JobApplicationCreateArgs} args - Arguments to create a JobApplication.
     * @example
     * // Create one JobApplication
     * const JobApplication = await prisma.jobApplication.create({
     *   data: {
     *     // ... data to create a JobApplication
     *   }
     * })
     * 
     */
    create<T extends JobApplicationCreateArgs>(args: SelectSubset<T, JobApplicationCreateArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobApplications.
     * @param {JobApplicationCreateManyArgs} args - Arguments to create many JobApplications.
     * @example
     * // Create many JobApplications
     * const jobApplication = await prisma.jobApplication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobApplicationCreateManyArgs>(args?: SelectSubset<T, JobApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobApplications and returns the data saved in the database.
     * @param {JobApplicationCreateManyAndReturnArgs} args - Arguments to create many JobApplications.
     * @example
     * // Create many JobApplications
     * const jobApplication = await prisma.jobApplication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobApplications and only return the `id`
     * const jobApplicationWithIdOnly = await prisma.jobApplication.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, JobApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobApplication.
     * @param {JobApplicationDeleteArgs} args - Arguments to delete one JobApplication.
     * @example
     * // Delete one JobApplication
     * const JobApplication = await prisma.jobApplication.delete({
     *   where: {
     *     // ... filter to delete one JobApplication
     *   }
     * })
     * 
     */
    delete<T extends JobApplicationDeleteArgs>(args: SelectSubset<T, JobApplicationDeleteArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobApplication.
     * @param {JobApplicationUpdateArgs} args - Arguments to update one JobApplication.
     * @example
     * // Update one JobApplication
     * const jobApplication = await prisma.jobApplication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobApplicationUpdateArgs>(args: SelectSubset<T, JobApplicationUpdateArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobApplications.
     * @param {JobApplicationDeleteManyArgs} args - Arguments to filter JobApplications to delete.
     * @example
     * // Delete a few JobApplications
     * const { count } = await prisma.jobApplication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobApplicationDeleteManyArgs>(args?: SelectSubset<T, JobApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobApplications
     * const jobApplication = await prisma.jobApplication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobApplicationUpdateManyArgs>(args: SelectSubset<T, JobApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobApplications and returns the data updated in the database.
     * @param {JobApplicationUpdateManyAndReturnArgs} args - Arguments to update many JobApplications.
     * @example
     * // Update many JobApplications
     * const jobApplication = await prisma.jobApplication.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobApplications and only return the `id`
     * const jobApplicationWithIdOnly = await prisma.jobApplication.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, JobApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobApplication.
     * @param {JobApplicationUpsertArgs} args - Arguments to update or create a JobApplication.
     * @example
     * // Update or create a JobApplication
     * const jobApplication = await prisma.jobApplication.upsert({
     *   create: {
     *     // ... data to create a JobApplication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobApplication we want to update
     *   }
     * })
     */
    upsert<T extends JobApplicationUpsertArgs>(args: SelectSubset<T, JobApplicationUpsertArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationCountArgs} args - Arguments to filter JobApplications to count.
     * @example
     * // Count the number of JobApplications
     * const count = await prisma.jobApplication.count({
     *   where: {
     *     // ... the filter for the JobApplications we want to count
     *   }
     * })
    **/
    count<T extends JobApplicationCountArgs>(
      args?: Subset<T, JobApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobApplicationAggregateArgs>(args: Subset<T, JobApplicationAggregateArgs>): Prisma.PrismaPromise<GetJobApplicationAggregateType<T>>

    /**
     * Group by JobApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobApplicationGroupByArgs['orderBy'] }
        : { orderBy?: JobApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobApplication model
   */
  readonly fields: JobApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobApplication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobPostingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobPostingDefaultArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobApplication model
   */
  interface JobApplicationFieldRefs {
    readonly id: FieldRef<"JobApplication", 'Int'>
    readonly jobId: FieldRef<"JobApplication", 'Int'>
    readonly resumeId: FieldRef<"JobApplication", 'Int'>
    readonly status: FieldRef<"JobApplication", 'String'>
    readonly appliedAt: FieldRef<"JobApplication", 'DateTime'>
    readonly note: FieldRef<"JobApplication", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JobApplication findUnique
   */
  export type JobApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplication to fetch.
     */
    where: JobApplicationWhereUniqueInput
  }

  /**
   * JobApplication findUniqueOrThrow
   */
  export type JobApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplication to fetch.
     */
    where: JobApplicationWhereUniqueInput
  }

  /**
   * JobApplication findFirst
   */
  export type JobApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplication to fetch.
     */
    where?: JobApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobApplications to fetch.
     */
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobApplications.
     */
    cursor?: JobApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobApplications.
     */
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * JobApplication findFirstOrThrow
   */
  export type JobApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplication to fetch.
     */
    where?: JobApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobApplications to fetch.
     */
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobApplications.
     */
    cursor?: JobApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobApplications.
     */
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * JobApplication findMany
   */
  export type JobApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplications to fetch.
     */
    where?: JobApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobApplications to fetch.
     */
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobApplications.
     */
    cursor?: JobApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobApplications.
     */
    skip?: number
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * JobApplication create
   */
  export type JobApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a JobApplication.
     */
    data: XOR<JobApplicationCreateInput, JobApplicationUncheckedCreateInput>
  }

  /**
   * JobApplication createMany
   */
  export type JobApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobApplications.
     */
    data: JobApplicationCreateManyInput | JobApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobApplication createManyAndReturn
   */
  export type JobApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many JobApplications.
     */
    data: JobApplicationCreateManyInput | JobApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobApplication update
   */
  export type JobApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a JobApplication.
     */
    data: XOR<JobApplicationUpdateInput, JobApplicationUncheckedUpdateInput>
    /**
     * Choose, which JobApplication to update.
     */
    where: JobApplicationWhereUniqueInput
  }

  /**
   * JobApplication updateMany
   */
  export type JobApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobApplications.
     */
    data: XOR<JobApplicationUpdateManyMutationInput, JobApplicationUncheckedUpdateManyInput>
    /**
     * Filter which JobApplications to update
     */
    where?: JobApplicationWhereInput
    /**
     * Limit how many JobApplications to update.
     */
    limit?: number
  }

  /**
   * JobApplication updateManyAndReturn
   */
  export type JobApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * The data used to update JobApplications.
     */
    data: XOR<JobApplicationUpdateManyMutationInput, JobApplicationUncheckedUpdateManyInput>
    /**
     * Filter which JobApplications to update
     */
    where?: JobApplicationWhereInput
    /**
     * Limit how many JobApplications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobApplication upsert
   */
  export type JobApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the JobApplication to update in case it exists.
     */
    where: JobApplicationWhereUniqueInput
    /**
     * In case the JobApplication found by the `where` argument doesn't exist, create a new JobApplication with this data.
     */
    create: XOR<JobApplicationCreateInput, JobApplicationUncheckedCreateInput>
    /**
     * In case the JobApplication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobApplicationUpdateInput, JobApplicationUncheckedUpdateInput>
  }

  /**
   * JobApplication delete
   */
  export type JobApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter which JobApplication to delete.
     */
    where: JobApplicationWhereUniqueInput
  }

  /**
   * JobApplication deleteMany
   */
  export type JobApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobApplications to delete
     */
    where?: JobApplicationWhereInput
    /**
     * Limit how many JobApplications to delete.
     */
    limit?: number
  }

  /**
   * JobApplication without action
   */
  export type JobApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
  }


  /**
   * Model MessageThread
   */

  export type AggregateMessageThread = {
    _count: MessageThreadCountAggregateOutputType | null
    _avg: MessageThreadAvgAggregateOutputType | null
    _sum: MessageThreadSumAggregateOutputType | null
    _min: MessageThreadMinAggregateOutputType | null
    _max: MessageThreadMaxAggregateOutputType | null
  }

  export type MessageThreadAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
    createdById: number | null
  }

  export type MessageThreadSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
    createdById: number | null
  }

  export type MessageThreadMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    createdById: number | null
    createdAt: Date | null
  }

  export type MessageThreadMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    createdById: number | null
    createdAt: Date | null
  }

  export type MessageThreadCountAggregateOutputType = {
    id: number
    resumeId: number
    createdById: number
    createdAt: number
    _all: number
  }


  export type MessageThreadAvgAggregateInputType = {
    id?: true
    resumeId?: true
    createdById?: true
  }

  export type MessageThreadSumAggregateInputType = {
    id?: true
    resumeId?: true
    createdById?: true
  }

  export type MessageThreadMinAggregateInputType = {
    id?: true
    resumeId?: true
    createdById?: true
    createdAt?: true
  }

  export type MessageThreadMaxAggregateInputType = {
    id?: true
    resumeId?: true
    createdById?: true
    createdAt?: true
  }

  export type MessageThreadCountAggregateInputType = {
    id?: true
    resumeId?: true
    createdById?: true
    createdAt?: true
    _all?: true
  }

  export type MessageThreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageThread to aggregate.
     */
    where?: MessageThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageThreads to fetch.
     */
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageThreads
    **/
    _count?: true | MessageThreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageThreadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageThreadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageThreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageThreadMaxAggregateInputType
  }

  export type GetMessageThreadAggregateType<T extends MessageThreadAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageThread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageThread[P]>
      : GetScalarType<T[P], AggregateMessageThread[P]>
  }




  export type MessageThreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageThreadWhereInput
    orderBy?: MessageThreadOrderByWithAggregationInput | MessageThreadOrderByWithAggregationInput[]
    by: MessageThreadScalarFieldEnum[] | MessageThreadScalarFieldEnum
    having?: MessageThreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageThreadCountAggregateInputType | true
    _avg?: MessageThreadAvgAggregateInputType
    _sum?: MessageThreadSumAggregateInputType
    _min?: MessageThreadMinAggregateInputType
    _max?: MessageThreadMaxAggregateInputType
  }

  export type MessageThreadGroupByOutputType = {
    id: number
    resumeId: number
    createdById: number
    createdAt: Date
    _count: MessageThreadCountAggregateOutputType | null
    _avg: MessageThreadAvgAggregateOutputType | null
    _sum: MessageThreadSumAggregateOutputType | null
    _min: MessageThreadMinAggregateOutputType | null
    _max: MessageThreadMaxAggregateOutputType | null
  }

  type GetMessageThreadGroupByPayload<T extends MessageThreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageThreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageThreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageThreadGroupByOutputType[P]>
            : GetScalarType<T[P], MessageThreadGroupByOutputType[P]>
        }
      >
    >


  export type MessageThreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    createdById?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    messages?: boolean | MessageThread$messagesArgs<ExtArgs>
    _count?: boolean | MessageThreadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageThread"]>

  export type MessageThreadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    createdById?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageThread"]>

  export type MessageThreadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    createdById?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageThread"]>

  export type MessageThreadSelectScalar = {
    id?: boolean
    resumeId?: boolean
    createdById?: boolean
    createdAt?: boolean
  }

  export type MessageThreadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "createdById" | "createdAt", ExtArgs["result"]["messageThread"]>
  export type MessageThreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    messages?: boolean | MessageThread$messagesArgs<ExtArgs>
    _count?: boolean | MessageThreadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageThreadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageThreadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessageThreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageThread"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      messages: Prisma.$MessageLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      createdById: number
      createdAt: Date
    }, ExtArgs["result"]["messageThread"]>
    composites: {}
  }

  type MessageThreadGetPayload<S extends boolean | null | undefined | MessageThreadDefaultArgs> = $Result.GetResult<Prisma.$MessageThreadPayload, S>

  type MessageThreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageThreadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageThreadCountAggregateInputType | true
    }

  export interface MessageThreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageThread'], meta: { name: 'MessageThread' } }
    /**
     * Find zero or one MessageThread that matches the filter.
     * @param {MessageThreadFindUniqueArgs} args - Arguments to find a MessageThread
     * @example
     * // Get one MessageThread
     * const messageThread = await prisma.messageThread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageThreadFindUniqueArgs>(args: SelectSubset<T, MessageThreadFindUniqueArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageThread that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageThreadFindUniqueOrThrowArgs} args - Arguments to find a MessageThread
     * @example
     * // Get one MessageThread
     * const messageThread = await prisma.messageThread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageThreadFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageThreadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageThread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadFindFirstArgs} args - Arguments to find a MessageThread
     * @example
     * // Get one MessageThread
     * const messageThread = await prisma.messageThread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageThreadFindFirstArgs>(args?: SelectSubset<T, MessageThreadFindFirstArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageThread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadFindFirstOrThrowArgs} args - Arguments to find a MessageThread
     * @example
     * // Get one MessageThread
     * const messageThread = await prisma.messageThread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageThreadFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageThreadFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageThreads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageThreads
     * const messageThreads = await prisma.messageThread.findMany()
     * 
     * // Get first 10 MessageThreads
     * const messageThreads = await prisma.messageThread.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageThreadWithIdOnly = await prisma.messageThread.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageThreadFindManyArgs>(args?: SelectSubset<T, MessageThreadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageThread.
     * @param {MessageThreadCreateArgs} args - Arguments to create a MessageThread.
     * @example
     * // Create one MessageThread
     * const MessageThread = await prisma.messageThread.create({
     *   data: {
     *     // ... data to create a MessageThread
     *   }
     * })
     * 
     */
    create<T extends MessageThreadCreateArgs>(args: SelectSubset<T, MessageThreadCreateArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageThreads.
     * @param {MessageThreadCreateManyArgs} args - Arguments to create many MessageThreads.
     * @example
     * // Create many MessageThreads
     * const messageThread = await prisma.messageThread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageThreadCreateManyArgs>(args?: SelectSubset<T, MessageThreadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageThreads and returns the data saved in the database.
     * @param {MessageThreadCreateManyAndReturnArgs} args - Arguments to create many MessageThreads.
     * @example
     * // Create many MessageThreads
     * const messageThread = await prisma.messageThread.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageThreads and only return the `id`
     * const messageThreadWithIdOnly = await prisma.messageThread.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageThreadCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageThreadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageThread.
     * @param {MessageThreadDeleteArgs} args - Arguments to delete one MessageThread.
     * @example
     * // Delete one MessageThread
     * const MessageThread = await prisma.messageThread.delete({
     *   where: {
     *     // ... filter to delete one MessageThread
     *   }
     * })
     * 
     */
    delete<T extends MessageThreadDeleteArgs>(args: SelectSubset<T, MessageThreadDeleteArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageThread.
     * @param {MessageThreadUpdateArgs} args - Arguments to update one MessageThread.
     * @example
     * // Update one MessageThread
     * const messageThread = await prisma.messageThread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageThreadUpdateArgs>(args: SelectSubset<T, MessageThreadUpdateArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageThreads.
     * @param {MessageThreadDeleteManyArgs} args - Arguments to filter MessageThreads to delete.
     * @example
     * // Delete a few MessageThreads
     * const { count } = await prisma.messageThread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageThreadDeleteManyArgs>(args?: SelectSubset<T, MessageThreadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageThreads
     * const messageThread = await prisma.messageThread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageThreadUpdateManyArgs>(args: SelectSubset<T, MessageThreadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageThreads and returns the data updated in the database.
     * @param {MessageThreadUpdateManyAndReturnArgs} args - Arguments to update many MessageThreads.
     * @example
     * // Update many MessageThreads
     * const messageThread = await prisma.messageThread.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageThreads and only return the `id`
     * const messageThreadWithIdOnly = await prisma.messageThread.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageThreadUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageThreadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageThread.
     * @param {MessageThreadUpsertArgs} args - Arguments to update or create a MessageThread.
     * @example
     * // Update or create a MessageThread
     * const messageThread = await prisma.messageThread.upsert({
     *   create: {
     *     // ... data to create a MessageThread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageThread we want to update
     *   }
     * })
     */
    upsert<T extends MessageThreadUpsertArgs>(args: SelectSubset<T, MessageThreadUpsertArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadCountArgs} args - Arguments to filter MessageThreads to count.
     * @example
     * // Count the number of MessageThreads
     * const count = await prisma.messageThread.count({
     *   where: {
     *     // ... the filter for the MessageThreads we want to count
     *   }
     * })
    **/
    count<T extends MessageThreadCountArgs>(
      args?: Subset<T, MessageThreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageThreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageThreadAggregateArgs>(args: Subset<T, MessageThreadAggregateArgs>): Prisma.PrismaPromise<GetMessageThreadAggregateType<T>>

    /**
     * Group by MessageThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageThreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageThreadGroupByArgs['orderBy'] }
        : { orderBy?: MessageThreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageThreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageThreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageThread model
   */
  readonly fields: MessageThreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageThread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageThreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends MessageThread$messagesArgs<ExtArgs> = {}>(args?: Subset<T, MessageThread$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageThread model
   */
  interface MessageThreadFieldRefs {
    readonly id: FieldRef<"MessageThread", 'Int'>
    readonly resumeId: FieldRef<"MessageThread", 'Int'>
    readonly createdById: FieldRef<"MessageThread", 'Int'>
    readonly createdAt: FieldRef<"MessageThread", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageThread findUnique
   */
  export type MessageThreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThread to fetch.
     */
    where: MessageThreadWhereUniqueInput
  }

  /**
   * MessageThread findUniqueOrThrow
   */
  export type MessageThreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThread to fetch.
     */
    where: MessageThreadWhereUniqueInput
  }

  /**
   * MessageThread findFirst
   */
  export type MessageThreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThread to fetch.
     */
    where?: MessageThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageThreads to fetch.
     */
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageThreads.
     */
    cursor?: MessageThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageThreads.
     */
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * MessageThread findFirstOrThrow
   */
  export type MessageThreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThread to fetch.
     */
    where?: MessageThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageThreads to fetch.
     */
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageThreads.
     */
    cursor?: MessageThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageThreads.
     */
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * MessageThread findMany
   */
  export type MessageThreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThreads to fetch.
     */
    where?: MessageThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageThreads to fetch.
     */
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageThreads.
     */
    cursor?: MessageThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageThreads.
     */
    skip?: number
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * MessageThread create
   */
  export type MessageThreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageThread.
     */
    data: XOR<MessageThreadCreateInput, MessageThreadUncheckedCreateInput>
  }

  /**
   * MessageThread createMany
   */
  export type MessageThreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageThreads.
     */
    data: MessageThreadCreateManyInput | MessageThreadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageThread createManyAndReturn
   */
  export type MessageThreadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * The data used to create many MessageThreads.
     */
    data: MessageThreadCreateManyInput | MessageThreadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageThread update
   */
  export type MessageThreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageThread.
     */
    data: XOR<MessageThreadUpdateInput, MessageThreadUncheckedUpdateInput>
    /**
     * Choose, which MessageThread to update.
     */
    where: MessageThreadWhereUniqueInput
  }

  /**
   * MessageThread updateMany
   */
  export type MessageThreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageThreads.
     */
    data: XOR<MessageThreadUpdateManyMutationInput, MessageThreadUncheckedUpdateManyInput>
    /**
     * Filter which MessageThreads to update
     */
    where?: MessageThreadWhereInput
    /**
     * Limit how many MessageThreads to update.
     */
    limit?: number
  }

  /**
   * MessageThread updateManyAndReturn
   */
  export type MessageThreadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * The data used to update MessageThreads.
     */
    data: XOR<MessageThreadUpdateManyMutationInput, MessageThreadUncheckedUpdateManyInput>
    /**
     * Filter which MessageThreads to update
     */
    where?: MessageThreadWhereInput
    /**
     * Limit how many MessageThreads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageThread upsert
   */
  export type MessageThreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageThread to update in case it exists.
     */
    where: MessageThreadWhereUniqueInput
    /**
     * In case the MessageThread found by the `where` argument doesn't exist, create a new MessageThread with this data.
     */
    create: XOR<MessageThreadCreateInput, MessageThreadUncheckedCreateInput>
    /**
     * In case the MessageThread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageThreadUpdateInput, MessageThreadUncheckedUpdateInput>
  }

  /**
   * MessageThread delete
   */
  export type MessageThreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter which MessageThread to delete.
     */
    where: MessageThreadWhereUniqueInput
  }

  /**
   * MessageThread deleteMany
   */
  export type MessageThreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageThreads to delete
     */
    where?: MessageThreadWhereInput
    /**
     * Limit how many MessageThreads to delete.
     */
    limit?: number
  }

  /**
   * MessageThread.messages
   */
  export type MessageThread$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    where?: MessageLogWhereInput
    orderBy?: MessageLogOrderByWithRelationInput | MessageLogOrderByWithRelationInput[]
    cursor?: MessageLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageLogScalarFieldEnum | MessageLogScalarFieldEnum[]
  }

  /**
   * MessageThread without action
   */
  export type MessageThreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
  }


  /**
   * Model MessageLog
   */

  export type AggregateMessageLog = {
    _count: MessageLogCountAggregateOutputType | null
    _avg: MessageLogAvgAggregateOutputType | null
    _sum: MessageLogSumAggregateOutputType | null
    _min: MessageLogMinAggregateOutputType | null
    _max: MessageLogMaxAggregateOutputType | null
  }

  export type MessageLogAvgAggregateOutputType = {
    id: number | null
    threadId: number | null
    senderId: number | null
  }

  export type MessageLogSumAggregateOutputType = {
    id: number | null
    threadId: number | null
    senderId: number | null
  }

  export type MessageLogMinAggregateOutputType = {
    id: number | null
    threadId: number | null
    senderId: number | null
    content: string | null
    sentAt: Date | null
  }

  export type MessageLogMaxAggregateOutputType = {
    id: number | null
    threadId: number | null
    senderId: number | null
    content: string | null
    sentAt: Date | null
  }

  export type MessageLogCountAggregateOutputType = {
    id: number
    threadId: number
    senderId: number
    content: number
    sentAt: number
    _all: number
  }


  export type MessageLogAvgAggregateInputType = {
    id?: true
    threadId?: true
    senderId?: true
  }

  export type MessageLogSumAggregateInputType = {
    id?: true
    threadId?: true
    senderId?: true
  }

  export type MessageLogMinAggregateInputType = {
    id?: true
    threadId?: true
    senderId?: true
    content?: true
    sentAt?: true
  }

  export type MessageLogMaxAggregateInputType = {
    id?: true
    threadId?: true
    senderId?: true
    content?: true
    sentAt?: true
  }

  export type MessageLogCountAggregateInputType = {
    id?: true
    threadId?: true
    senderId?: true
    content?: true
    sentAt?: true
    _all?: true
  }

  export type MessageLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageLog to aggregate.
     */
    where?: MessageLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageLogs to fetch.
     */
    orderBy?: MessageLogOrderByWithRelationInput | MessageLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageLogs
    **/
    _count?: true | MessageLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageLogMaxAggregateInputType
  }

  export type GetMessageLogAggregateType<T extends MessageLogAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageLog[P]>
      : GetScalarType<T[P], AggregateMessageLog[P]>
  }




  export type MessageLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageLogWhereInput
    orderBy?: MessageLogOrderByWithAggregationInput | MessageLogOrderByWithAggregationInput[]
    by: MessageLogScalarFieldEnum[] | MessageLogScalarFieldEnum
    having?: MessageLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageLogCountAggregateInputType | true
    _avg?: MessageLogAvgAggregateInputType
    _sum?: MessageLogSumAggregateInputType
    _min?: MessageLogMinAggregateInputType
    _max?: MessageLogMaxAggregateInputType
  }

  export type MessageLogGroupByOutputType = {
    id: number
    threadId: number
    senderId: number
    content: string
    sentAt: Date
    _count: MessageLogCountAggregateOutputType | null
    _avg: MessageLogAvgAggregateOutputType | null
    _sum: MessageLogSumAggregateOutputType | null
    _min: MessageLogMinAggregateOutputType | null
    _max: MessageLogMaxAggregateOutputType | null
  }

  type GetMessageLogGroupByPayload<T extends MessageLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageLogGroupByOutputType[P]>
            : GetScalarType<T[P], MessageLogGroupByOutputType[P]>
        }
      >
    >


  export type MessageLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    senderId?: boolean
    content?: boolean
    sentAt?: boolean
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageLog"]>

  export type MessageLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    senderId?: boolean
    content?: boolean
    sentAt?: boolean
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageLog"]>

  export type MessageLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    senderId?: boolean
    content?: boolean
    sentAt?: boolean
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageLog"]>

  export type MessageLogSelectScalar = {
    id?: boolean
    threadId?: boolean
    senderId?: boolean
    content?: boolean
    sentAt?: boolean
  }

  export type MessageLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "threadId" | "senderId" | "content" | "sentAt", ExtArgs["result"]["messageLog"]>
  export type MessageLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessageLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageLog"
    objects: {
      thread: Prisma.$MessageThreadPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      threadId: number
      senderId: number
      content: string
      sentAt: Date
    }, ExtArgs["result"]["messageLog"]>
    composites: {}
  }

  type MessageLogGetPayload<S extends boolean | null | undefined | MessageLogDefaultArgs> = $Result.GetResult<Prisma.$MessageLogPayload, S>

  type MessageLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageLogCountAggregateInputType | true
    }

  export interface MessageLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageLog'], meta: { name: 'MessageLog' } }
    /**
     * Find zero or one MessageLog that matches the filter.
     * @param {MessageLogFindUniqueArgs} args - Arguments to find a MessageLog
     * @example
     * // Get one MessageLog
     * const messageLog = await prisma.messageLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageLogFindUniqueArgs>(args: SelectSubset<T, MessageLogFindUniqueArgs<ExtArgs>>): Prisma__MessageLogClient<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageLogFindUniqueOrThrowArgs} args - Arguments to find a MessageLog
     * @example
     * // Get one MessageLog
     * const messageLog = await prisma.messageLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageLogFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageLogClient<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageLogFindFirstArgs} args - Arguments to find a MessageLog
     * @example
     * // Get one MessageLog
     * const messageLog = await prisma.messageLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageLogFindFirstArgs>(args?: SelectSubset<T, MessageLogFindFirstArgs<ExtArgs>>): Prisma__MessageLogClient<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageLogFindFirstOrThrowArgs} args - Arguments to find a MessageLog
     * @example
     * // Get one MessageLog
     * const messageLog = await prisma.messageLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageLogFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageLogClient<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageLogs
     * const messageLogs = await prisma.messageLog.findMany()
     * 
     * // Get first 10 MessageLogs
     * const messageLogs = await prisma.messageLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageLogWithIdOnly = await prisma.messageLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageLogFindManyArgs>(args?: SelectSubset<T, MessageLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageLog.
     * @param {MessageLogCreateArgs} args - Arguments to create a MessageLog.
     * @example
     * // Create one MessageLog
     * const MessageLog = await prisma.messageLog.create({
     *   data: {
     *     // ... data to create a MessageLog
     *   }
     * })
     * 
     */
    create<T extends MessageLogCreateArgs>(args: SelectSubset<T, MessageLogCreateArgs<ExtArgs>>): Prisma__MessageLogClient<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageLogs.
     * @param {MessageLogCreateManyArgs} args - Arguments to create many MessageLogs.
     * @example
     * // Create many MessageLogs
     * const messageLog = await prisma.messageLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageLogCreateManyArgs>(args?: SelectSubset<T, MessageLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageLogs and returns the data saved in the database.
     * @param {MessageLogCreateManyAndReturnArgs} args - Arguments to create many MessageLogs.
     * @example
     * // Create many MessageLogs
     * const messageLog = await prisma.messageLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageLogs and only return the `id`
     * const messageLogWithIdOnly = await prisma.messageLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageLogCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageLog.
     * @param {MessageLogDeleteArgs} args - Arguments to delete one MessageLog.
     * @example
     * // Delete one MessageLog
     * const MessageLog = await prisma.messageLog.delete({
     *   where: {
     *     // ... filter to delete one MessageLog
     *   }
     * })
     * 
     */
    delete<T extends MessageLogDeleteArgs>(args: SelectSubset<T, MessageLogDeleteArgs<ExtArgs>>): Prisma__MessageLogClient<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageLog.
     * @param {MessageLogUpdateArgs} args - Arguments to update one MessageLog.
     * @example
     * // Update one MessageLog
     * const messageLog = await prisma.messageLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageLogUpdateArgs>(args: SelectSubset<T, MessageLogUpdateArgs<ExtArgs>>): Prisma__MessageLogClient<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageLogs.
     * @param {MessageLogDeleteManyArgs} args - Arguments to filter MessageLogs to delete.
     * @example
     * // Delete a few MessageLogs
     * const { count } = await prisma.messageLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageLogDeleteManyArgs>(args?: SelectSubset<T, MessageLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageLogs
     * const messageLog = await prisma.messageLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageLogUpdateManyArgs>(args: SelectSubset<T, MessageLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageLogs and returns the data updated in the database.
     * @param {MessageLogUpdateManyAndReturnArgs} args - Arguments to update many MessageLogs.
     * @example
     * // Update many MessageLogs
     * const messageLog = await prisma.messageLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageLogs and only return the `id`
     * const messageLogWithIdOnly = await prisma.messageLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageLogUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageLog.
     * @param {MessageLogUpsertArgs} args - Arguments to update or create a MessageLog.
     * @example
     * // Update or create a MessageLog
     * const messageLog = await prisma.messageLog.upsert({
     *   create: {
     *     // ... data to create a MessageLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageLog we want to update
     *   }
     * })
     */
    upsert<T extends MessageLogUpsertArgs>(args: SelectSubset<T, MessageLogUpsertArgs<ExtArgs>>): Prisma__MessageLogClient<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageLogCountArgs} args - Arguments to filter MessageLogs to count.
     * @example
     * // Count the number of MessageLogs
     * const count = await prisma.messageLog.count({
     *   where: {
     *     // ... the filter for the MessageLogs we want to count
     *   }
     * })
    **/
    count<T extends MessageLogCountArgs>(
      args?: Subset<T, MessageLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageLogAggregateArgs>(args: Subset<T, MessageLogAggregateArgs>): Prisma.PrismaPromise<GetMessageLogAggregateType<T>>

    /**
     * Group by MessageLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageLogGroupByArgs['orderBy'] }
        : { orderBy?: MessageLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageLog model
   */
  readonly fields: MessageLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    thread<T extends MessageThreadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageThreadDefaultArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageLog model
   */
  interface MessageLogFieldRefs {
    readonly id: FieldRef<"MessageLog", 'Int'>
    readonly threadId: FieldRef<"MessageLog", 'Int'>
    readonly senderId: FieldRef<"MessageLog", 'Int'>
    readonly content: FieldRef<"MessageLog", 'String'>
    readonly sentAt: FieldRef<"MessageLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageLog findUnique
   */
  export type MessageLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * Filter, which MessageLog to fetch.
     */
    where: MessageLogWhereUniqueInput
  }

  /**
   * MessageLog findUniqueOrThrow
   */
  export type MessageLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * Filter, which MessageLog to fetch.
     */
    where: MessageLogWhereUniqueInput
  }

  /**
   * MessageLog findFirst
   */
  export type MessageLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * Filter, which MessageLog to fetch.
     */
    where?: MessageLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageLogs to fetch.
     */
    orderBy?: MessageLogOrderByWithRelationInput | MessageLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageLogs.
     */
    cursor?: MessageLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageLogs.
     */
    distinct?: MessageLogScalarFieldEnum | MessageLogScalarFieldEnum[]
  }

  /**
   * MessageLog findFirstOrThrow
   */
  export type MessageLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * Filter, which MessageLog to fetch.
     */
    where?: MessageLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageLogs to fetch.
     */
    orderBy?: MessageLogOrderByWithRelationInput | MessageLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageLogs.
     */
    cursor?: MessageLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageLogs.
     */
    distinct?: MessageLogScalarFieldEnum | MessageLogScalarFieldEnum[]
  }

  /**
   * MessageLog findMany
   */
  export type MessageLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * Filter, which MessageLogs to fetch.
     */
    where?: MessageLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageLogs to fetch.
     */
    orderBy?: MessageLogOrderByWithRelationInput | MessageLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageLogs.
     */
    cursor?: MessageLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageLogs.
     */
    skip?: number
    distinct?: MessageLogScalarFieldEnum | MessageLogScalarFieldEnum[]
  }

  /**
   * MessageLog create
   */
  export type MessageLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageLog.
     */
    data: XOR<MessageLogCreateInput, MessageLogUncheckedCreateInput>
  }

  /**
   * MessageLog createMany
   */
  export type MessageLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageLogs.
     */
    data: MessageLogCreateManyInput | MessageLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageLog createManyAndReturn
   */
  export type MessageLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * The data used to create many MessageLogs.
     */
    data: MessageLogCreateManyInput | MessageLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageLog update
   */
  export type MessageLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageLog.
     */
    data: XOR<MessageLogUpdateInput, MessageLogUncheckedUpdateInput>
    /**
     * Choose, which MessageLog to update.
     */
    where: MessageLogWhereUniqueInput
  }

  /**
   * MessageLog updateMany
   */
  export type MessageLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageLogs.
     */
    data: XOR<MessageLogUpdateManyMutationInput, MessageLogUncheckedUpdateManyInput>
    /**
     * Filter which MessageLogs to update
     */
    where?: MessageLogWhereInput
    /**
     * Limit how many MessageLogs to update.
     */
    limit?: number
  }

  /**
   * MessageLog updateManyAndReturn
   */
  export type MessageLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * The data used to update MessageLogs.
     */
    data: XOR<MessageLogUpdateManyMutationInput, MessageLogUncheckedUpdateManyInput>
    /**
     * Filter which MessageLogs to update
     */
    where?: MessageLogWhereInput
    /**
     * Limit how many MessageLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageLog upsert
   */
  export type MessageLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageLog to update in case it exists.
     */
    where: MessageLogWhereUniqueInput
    /**
     * In case the MessageLog found by the `where` argument doesn't exist, create a new MessageLog with this data.
     */
    create: XOR<MessageLogCreateInput, MessageLogUncheckedCreateInput>
    /**
     * In case the MessageLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageLogUpdateInput, MessageLogUncheckedUpdateInput>
  }

  /**
   * MessageLog delete
   */
  export type MessageLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    /**
     * Filter which MessageLog to delete.
     */
    where: MessageLogWhereUniqueInput
  }

  /**
   * MessageLog deleteMany
   */
  export type MessageLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageLogs to delete
     */
    where?: MessageLogWhereInput
    /**
     * Limit how many MessageLogs to delete.
     */
    limit?: number
  }

  /**
   * MessageLog without action
   */
  export type MessageLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
  }


  /**
   * Model UserResume
   */

  export type AggregateUserResume = {
    _count: UserResumeCountAggregateOutputType | null
    _avg: UserResumeAvgAggregateOutputType | null
    _sum: UserResumeSumAggregateOutputType | null
    _min: UserResumeMinAggregateOutputType | null
    _max: UserResumeMaxAggregateOutputType | null
  }

  export type UserResumeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
  }

  export type UserResumeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
  }

  export type UserResumeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    isPrimary: boolean | null
    title: string | null
    companyId: number | null
    identityNumber: string | null
    workPermit: string | null
    passport: string | null
    email: string | null
    emailVerified: boolean | null
    phoneNumber: string | null
    phoneVerified: boolean | null
    profilePicture: string | null
    firstName: string | null
    lastName: string | null
    englishName: string | null
    nickname: string | null
    mailCountry: string | null
    mailCity: string | null
    mailDistrict: string | null
    mailAddress: string | null
    residentialCountry: string | null
    residentialCity: string | null
    residentialDistrict: string | null
    residentialAddress: string | null
    isRegistered: boolean | null
    isDeleted: boolean | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserResumeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    isPrimary: boolean | null
    title: string | null
    companyId: number | null
    identityNumber: string | null
    workPermit: string | null
    passport: string | null
    email: string | null
    emailVerified: boolean | null
    phoneNumber: string | null
    phoneVerified: boolean | null
    profilePicture: string | null
    firstName: string | null
    lastName: string | null
    englishName: string | null
    nickname: string | null
    mailCountry: string | null
    mailCity: string | null
    mailDistrict: string | null
    mailAddress: string | null
    residentialCountry: string | null
    residentialCity: string | null
    residentialDistrict: string | null
    residentialAddress: string | null
    isRegistered: boolean | null
    isDeleted: boolean | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserResumeCountAggregateOutputType = {
    id: number
    userId: number
    isPrimary: number
    title: number
    companyId: number
    identityNumber: number
    workPermit: number
    passport: number
    email: number
    emailVerified: number
    phoneNumber: number
    phoneVerified: number
    profilePicture: number
    firstName: number
    lastName: number
    englishName: number
    nickname: number
    mailCountry: number
    mailCity: number
    mailDistrict: number
    mailAddress: number
    residentialCountry: number
    residentialCity: number
    residentialDistrict: number
    residentialAddress: number
    isRegistered: number
    isDeleted: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserResumeAvgAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
  }

  export type UserResumeSumAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
  }

  export type UserResumeMinAggregateInputType = {
    id?: true
    userId?: true
    isPrimary?: true
    title?: true
    companyId?: true
    identityNumber?: true
    workPermit?: true
    passport?: true
    email?: true
    emailVerified?: true
    phoneNumber?: true
    phoneVerified?: true
    profilePicture?: true
    firstName?: true
    lastName?: true
    englishName?: true
    nickname?: true
    mailCountry?: true
    mailCity?: true
    mailDistrict?: true
    mailAddress?: true
    residentialCountry?: true
    residentialCity?: true
    residentialDistrict?: true
    residentialAddress?: true
    isRegistered?: true
    isDeleted?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserResumeMaxAggregateInputType = {
    id?: true
    userId?: true
    isPrimary?: true
    title?: true
    companyId?: true
    identityNumber?: true
    workPermit?: true
    passport?: true
    email?: true
    emailVerified?: true
    phoneNumber?: true
    phoneVerified?: true
    profilePicture?: true
    firstName?: true
    lastName?: true
    englishName?: true
    nickname?: true
    mailCountry?: true
    mailCity?: true
    mailDistrict?: true
    mailAddress?: true
    residentialCountry?: true
    residentialCity?: true
    residentialDistrict?: true
    residentialAddress?: true
    isRegistered?: true
    isDeleted?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserResumeCountAggregateInputType = {
    id?: true
    userId?: true
    isPrimary?: true
    title?: true
    companyId?: true
    identityNumber?: true
    workPermit?: true
    passport?: true
    email?: true
    emailVerified?: true
    phoneNumber?: true
    phoneVerified?: true
    profilePicture?: true
    firstName?: true
    lastName?: true
    englishName?: true
    nickname?: true
    mailCountry?: true
    mailCity?: true
    mailDistrict?: true
    mailAddress?: true
    residentialCountry?: true
    residentialCity?: true
    residentialDistrict?: true
    residentialAddress?: true
    isRegistered?: true
    isDeleted?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserResumeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserResume to aggregate.
     */
    where?: UserResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserResumes to fetch.
     */
    orderBy?: UserResumeOrderByWithRelationInput | UserResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserResumes
    **/
    _count?: true | UserResumeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserResumeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserResumeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserResumeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserResumeMaxAggregateInputType
  }

  export type GetUserResumeAggregateType<T extends UserResumeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserResume]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserResume[P]>
      : GetScalarType<T[P], AggregateUserResume[P]>
  }




  export type UserResumeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserResumeWhereInput
    orderBy?: UserResumeOrderByWithAggregationInput | UserResumeOrderByWithAggregationInput[]
    by: UserResumeScalarFieldEnum[] | UserResumeScalarFieldEnum
    having?: UserResumeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserResumeCountAggregateInputType | true
    _avg?: UserResumeAvgAggregateInputType
    _sum?: UserResumeSumAggregateInputType
    _min?: UserResumeMinAggregateInputType
    _max?: UserResumeMaxAggregateInputType
  }

  export type UserResumeGroupByOutputType = {
    id: number
    userId: number
    isPrimary: boolean
    title: string | null
    companyId: number
    identityNumber: string | null
    workPermit: string | null
    passport: string | null
    email: string | null
    emailVerified: boolean
    phoneNumber: string | null
    phoneVerified: boolean
    profilePicture: string | null
    firstName: string
    lastName: string
    englishName: string | null
    nickname: string | null
    mailCountry: string | null
    mailCity: string | null
    mailDistrict: string | null
    mailAddress: string | null
    residentialCountry: string | null
    residentialCity: string | null
    residentialDistrict: string | null
    residentialAddress: string | null
    isRegistered: boolean
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserResumeCountAggregateOutputType | null
    _avg: UserResumeAvgAggregateOutputType | null
    _sum: UserResumeSumAggregateOutputType | null
    _min: UserResumeMinAggregateOutputType | null
    _max: UserResumeMaxAggregateOutputType | null
  }

  type GetUserResumeGroupByPayload<T extends UserResumeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserResumeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserResumeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserResumeGroupByOutputType[P]>
            : GetScalarType<T[P], UserResumeGroupByOutputType[P]>
        }
      >
    >


  export type UserResumeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    isPrimary?: boolean
    title?: boolean
    companyId?: boolean
    identityNumber?: boolean
    workPermit?: boolean
    passport?: boolean
    email?: boolean
    emailVerified?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    profilePicture?: boolean
    firstName?: boolean
    lastName?: boolean
    englishName?: boolean
    nickname?: boolean
    mailCountry?: boolean
    mailCity?: boolean
    mailDistrict?: boolean
    mailAddress?: boolean
    residentialCountry?: boolean
    residentialCity?: boolean
    residentialDistrict?: boolean
    residentialAddress?: boolean
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    primaryOf?: boolean | UserResume$primaryOfArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    languages?: boolean | UserResume$languagesArgs<ExtArgs>
    educations?: boolean | UserResume$educationsArgs<ExtArgs>
    experiences?: boolean | UserResume$experiencesArgs<ExtArgs>
    skills?: boolean | UserResume$skillsArgs<ExtArgs>
    certificates?: boolean | UserResume$certificatesArgs<ExtArgs>
    traits?: boolean | UserResume$traitsArgs<ExtArgs>
    commuteOptions?: boolean | UserResume$commuteOptionsArgs<ExtArgs>
    workingTimes?: boolean | UserResume$workingTimesArgs<ExtArgs>
    workIdentities?: boolean | UserResume$workIdentitiesArgs<ExtArgs>
    jobPreferences?: boolean | UserResume$jobPreferencesArgs<ExtArgs>
    emergencyContacts?: boolean | UserResume$emergencyContactsArgs<ExtArgs>
    biography?: boolean | UserResume$biographyArgs<ExtArgs>
    portfolio?: boolean | UserResume$portfolioArgs<ExtArgs>
    profilePhotos?: boolean | UserResume$profilePhotosArgs<ExtArgs>
    resumeVersions?: boolean | UserResume$resumeVersionsArgs<ExtArgs>
    resumeVisibility?: boolean | UserResume$resumeVisibilityArgs<ExtArgs>
    resumeReviewStatuses?: boolean | UserResume$resumeReviewStatusesArgs<ExtArgs>
    resumeViewLogs?: boolean | UserResume$resumeViewLogsArgs<ExtArgs>
    resumePDFs?: boolean | UserResume$resumePDFsArgs<ExtArgs>
    resumeReviewLogs?: boolean | UserResume$resumeReviewLogsArgs<ExtArgs>
    messageThreads?: boolean | UserResume$messageThreadsArgs<ExtArgs>
    accessGrants?: boolean | UserResume$accessGrantsArgs<ExtArgs>
    jobapplication?: boolean | UserResume$jobapplicationArgs<ExtArgs>
    _count?: boolean | UserResumeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userResume"]>

  export type UserResumeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    isPrimary?: boolean
    title?: boolean
    companyId?: boolean
    identityNumber?: boolean
    workPermit?: boolean
    passport?: boolean
    email?: boolean
    emailVerified?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    profilePicture?: boolean
    firstName?: boolean
    lastName?: boolean
    englishName?: boolean
    nickname?: boolean
    mailCountry?: boolean
    mailCity?: boolean
    mailDistrict?: boolean
    mailAddress?: boolean
    residentialCountry?: boolean
    residentialCity?: boolean
    residentialDistrict?: boolean
    residentialAddress?: boolean
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userResume"]>

  export type UserResumeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    isPrimary?: boolean
    title?: boolean
    companyId?: boolean
    identityNumber?: boolean
    workPermit?: boolean
    passport?: boolean
    email?: boolean
    emailVerified?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    profilePicture?: boolean
    firstName?: boolean
    lastName?: boolean
    englishName?: boolean
    nickname?: boolean
    mailCountry?: boolean
    mailCity?: boolean
    mailDistrict?: boolean
    mailAddress?: boolean
    residentialCountry?: boolean
    residentialCity?: boolean
    residentialDistrict?: boolean
    residentialAddress?: boolean
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userResume"]>

  export type UserResumeSelectScalar = {
    id?: boolean
    userId?: boolean
    isPrimary?: boolean
    title?: boolean
    companyId?: boolean
    identityNumber?: boolean
    workPermit?: boolean
    passport?: boolean
    email?: boolean
    emailVerified?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    profilePicture?: boolean
    firstName?: boolean
    lastName?: boolean
    englishName?: boolean
    nickname?: boolean
    mailCountry?: boolean
    mailCity?: boolean
    mailDistrict?: boolean
    mailAddress?: boolean
    residentialCountry?: boolean
    residentialCity?: boolean
    residentialDistrict?: boolean
    residentialAddress?: boolean
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserResumeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "isPrimary" | "title" | "companyId" | "identityNumber" | "workPermit" | "passport" | "email" | "emailVerified" | "phoneNumber" | "phoneVerified" | "profilePicture" | "firstName" | "lastName" | "englishName" | "nickname" | "mailCountry" | "mailCity" | "mailDistrict" | "mailAddress" | "residentialCountry" | "residentialCity" | "residentialDistrict" | "residentialAddress" | "isRegistered" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userResume"]>
  export type UserResumeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    primaryOf?: boolean | UserResume$primaryOfArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    languages?: boolean | UserResume$languagesArgs<ExtArgs>
    educations?: boolean | UserResume$educationsArgs<ExtArgs>
    experiences?: boolean | UserResume$experiencesArgs<ExtArgs>
    skills?: boolean | UserResume$skillsArgs<ExtArgs>
    certificates?: boolean | UserResume$certificatesArgs<ExtArgs>
    traits?: boolean | UserResume$traitsArgs<ExtArgs>
    commuteOptions?: boolean | UserResume$commuteOptionsArgs<ExtArgs>
    workingTimes?: boolean | UserResume$workingTimesArgs<ExtArgs>
    workIdentities?: boolean | UserResume$workIdentitiesArgs<ExtArgs>
    jobPreferences?: boolean | UserResume$jobPreferencesArgs<ExtArgs>
    emergencyContacts?: boolean | UserResume$emergencyContactsArgs<ExtArgs>
    biography?: boolean | UserResume$biographyArgs<ExtArgs>
    portfolio?: boolean | UserResume$portfolioArgs<ExtArgs>
    profilePhotos?: boolean | UserResume$profilePhotosArgs<ExtArgs>
    resumeVersions?: boolean | UserResume$resumeVersionsArgs<ExtArgs>
    resumeVisibility?: boolean | UserResume$resumeVisibilityArgs<ExtArgs>
    resumeReviewStatuses?: boolean | UserResume$resumeReviewStatusesArgs<ExtArgs>
    resumeViewLogs?: boolean | UserResume$resumeViewLogsArgs<ExtArgs>
    resumePDFs?: boolean | UserResume$resumePDFsArgs<ExtArgs>
    resumeReviewLogs?: boolean | UserResume$resumeReviewLogsArgs<ExtArgs>
    messageThreads?: boolean | UserResume$messageThreadsArgs<ExtArgs>
    accessGrants?: boolean | UserResume$accessGrantsArgs<ExtArgs>
    jobapplication?: boolean | UserResume$jobapplicationArgs<ExtArgs>
    _count?: boolean | UserResumeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserResumeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type UserResumeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $UserResumePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserResume"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      primaryOf: Prisma.$UserPayload<ExtArgs> | null
      company: Prisma.$CompanyPayload<ExtArgs>
      languages: Prisma.$LanguagePayload<ExtArgs>[]
      educations: Prisma.$EducationPayload<ExtArgs>[]
      experiences: Prisma.$ExperiencePayload<ExtArgs>[]
      skills: Prisma.$SkillPayload<ExtArgs>[]
      certificates: Prisma.$CertificatePayload<ExtArgs>[]
      traits: Prisma.$TraitPayload<ExtArgs>[]
      commuteOptions: Prisma.$CommutePayload<ExtArgs>[]
      workingTimes: Prisma.$WorkingTimePayload<ExtArgs>[]
      workIdentities: Prisma.$WorkIdentityPayload<ExtArgs>[]
      jobPreferences: Prisma.$JobTypePayload<ExtArgs>[]
      emergencyContacts: Prisma.$EmergencyContactPayload<ExtArgs>[]
      biography: Prisma.$BiographyPayload<ExtArgs> | null
      portfolio: Prisma.$PortfolioPayload<ExtArgs>[]
      profilePhotos: Prisma.$ProfilePhotoPayload<ExtArgs>[]
      resumeVersions: Prisma.$ResumeVersionPayload<ExtArgs>[]
      resumeVisibility: Prisma.$ResumeVisibilityPayload<ExtArgs> | null
      resumeReviewStatuses: Prisma.$ResumeReviewStatusPayload<ExtArgs>[]
      resumeViewLogs: Prisma.$ResumeViewLogPayload<ExtArgs>[]
      resumePDFs: Prisma.$ResumePDFPayload<ExtArgs>[]
      resumeReviewLogs: Prisma.$ResumeReviewLogPayload<ExtArgs>[]
      messageThreads: Prisma.$MessageThreadPayload<ExtArgs>[]
      accessGrants: Prisma.$ResumeAccessGrantPayload<ExtArgs>[]
      jobapplication: Prisma.$JobApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      isPrimary: boolean
      title: string | null
      companyId: number
      identityNumber: string | null
      workPermit: string | null
      passport: string | null
      email: string | null
      emailVerified: boolean
      phoneNumber: string | null
      phoneVerified: boolean
      profilePicture: string | null
      firstName: string
      lastName: string
      englishName: string | null
      nickname: string | null
      mailCountry: string | null
      mailCity: string | null
      mailDistrict: string | null
      mailAddress: string | null
      residentialCountry: string | null
      residentialCity: string | null
      residentialDistrict: string | null
      residentialAddress: string | null
      isRegistered: boolean
      isDeleted: boolean
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userResume"]>
    composites: {}
  }

  type UserResumeGetPayload<S extends boolean | null | undefined | UserResumeDefaultArgs> = $Result.GetResult<Prisma.$UserResumePayload, S>

  type UserResumeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserResumeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserResumeCountAggregateInputType | true
    }

  export interface UserResumeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserResume'], meta: { name: 'UserResume' } }
    /**
     * Find zero or one UserResume that matches the filter.
     * @param {UserResumeFindUniqueArgs} args - Arguments to find a UserResume
     * @example
     * // Get one UserResume
     * const userResume = await prisma.userResume.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserResumeFindUniqueArgs>(args: SelectSubset<T, UserResumeFindUniqueArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserResume that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserResumeFindUniqueOrThrowArgs} args - Arguments to find a UserResume
     * @example
     * // Get one UserResume
     * const userResume = await prisma.userResume.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserResumeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserResumeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserResume that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserResumeFindFirstArgs} args - Arguments to find a UserResume
     * @example
     * // Get one UserResume
     * const userResume = await prisma.userResume.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserResumeFindFirstArgs>(args?: SelectSubset<T, UserResumeFindFirstArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserResume that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserResumeFindFirstOrThrowArgs} args - Arguments to find a UserResume
     * @example
     * // Get one UserResume
     * const userResume = await prisma.userResume.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserResumeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserResumeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserResumes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserResumeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserResumes
     * const userResumes = await prisma.userResume.findMany()
     * 
     * // Get first 10 UserResumes
     * const userResumes = await prisma.userResume.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userResumeWithIdOnly = await prisma.userResume.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserResumeFindManyArgs>(args?: SelectSubset<T, UserResumeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserResume.
     * @param {UserResumeCreateArgs} args - Arguments to create a UserResume.
     * @example
     * // Create one UserResume
     * const UserResume = await prisma.userResume.create({
     *   data: {
     *     // ... data to create a UserResume
     *   }
     * })
     * 
     */
    create<T extends UserResumeCreateArgs>(args: SelectSubset<T, UserResumeCreateArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserResumes.
     * @param {UserResumeCreateManyArgs} args - Arguments to create many UserResumes.
     * @example
     * // Create many UserResumes
     * const userResume = await prisma.userResume.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserResumeCreateManyArgs>(args?: SelectSubset<T, UserResumeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserResumes and returns the data saved in the database.
     * @param {UserResumeCreateManyAndReturnArgs} args - Arguments to create many UserResumes.
     * @example
     * // Create many UserResumes
     * const userResume = await prisma.userResume.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserResumes and only return the `id`
     * const userResumeWithIdOnly = await prisma.userResume.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserResumeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserResumeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserResume.
     * @param {UserResumeDeleteArgs} args - Arguments to delete one UserResume.
     * @example
     * // Delete one UserResume
     * const UserResume = await prisma.userResume.delete({
     *   where: {
     *     // ... filter to delete one UserResume
     *   }
     * })
     * 
     */
    delete<T extends UserResumeDeleteArgs>(args: SelectSubset<T, UserResumeDeleteArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserResume.
     * @param {UserResumeUpdateArgs} args - Arguments to update one UserResume.
     * @example
     * // Update one UserResume
     * const userResume = await prisma.userResume.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserResumeUpdateArgs>(args: SelectSubset<T, UserResumeUpdateArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserResumes.
     * @param {UserResumeDeleteManyArgs} args - Arguments to filter UserResumes to delete.
     * @example
     * // Delete a few UserResumes
     * const { count } = await prisma.userResume.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserResumeDeleteManyArgs>(args?: SelectSubset<T, UserResumeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserResumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserResumeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserResumes
     * const userResume = await prisma.userResume.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserResumeUpdateManyArgs>(args: SelectSubset<T, UserResumeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserResumes and returns the data updated in the database.
     * @param {UserResumeUpdateManyAndReturnArgs} args - Arguments to update many UserResumes.
     * @example
     * // Update many UserResumes
     * const userResume = await prisma.userResume.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserResumes and only return the `id`
     * const userResumeWithIdOnly = await prisma.userResume.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserResumeUpdateManyAndReturnArgs>(args: SelectSubset<T, UserResumeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserResume.
     * @param {UserResumeUpsertArgs} args - Arguments to update or create a UserResume.
     * @example
     * // Update or create a UserResume
     * const userResume = await prisma.userResume.upsert({
     *   create: {
     *     // ... data to create a UserResume
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserResume we want to update
     *   }
     * })
     */
    upsert<T extends UserResumeUpsertArgs>(args: SelectSubset<T, UserResumeUpsertArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserResumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserResumeCountArgs} args - Arguments to filter UserResumes to count.
     * @example
     * // Count the number of UserResumes
     * const count = await prisma.userResume.count({
     *   where: {
     *     // ... the filter for the UserResumes we want to count
     *   }
     * })
    **/
    count<T extends UserResumeCountArgs>(
      args?: Subset<T, UserResumeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserResumeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserResume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserResumeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserResumeAggregateArgs>(args: Subset<T, UserResumeAggregateArgs>): Prisma.PrismaPromise<GetUserResumeAggregateType<T>>

    /**
     * Group by UserResume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserResumeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserResumeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserResumeGroupByArgs['orderBy'] }
        : { orderBy?: UserResumeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserResumeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserResumeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserResume model
   */
  readonly fields: UserResumeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserResume.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserResumeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    primaryOf<T extends UserResume$primaryOfArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$primaryOfArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    languages<T extends UserResume$languagesArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$languagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    educations<T extends UserResume$educationsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$educationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    experiences<T extends UserResume$experiencesArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$experiencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skills<T extends UserResume$skillsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    certificates<T extends UserResume$certificatesArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$certificatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    traits<T extends UserResume$traitsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$traitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commuteOptions<T extends UserResume$commuteOptionsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$commuteOptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workingTimes<T extends UserResume$workingTimesArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$workingTimesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workIdentities<T extends UserResume$workIdentitiesArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$workIdentitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobPreferences<T extends UserResume$jobPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$jobPreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emergencyContacts<T extends UserResume$emergencyContactsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$emergencyContactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    biography<T extends UserResume$biographyArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$biographyArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    portfolio<T extends UserResume$portfolioArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$portfolioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profilePhotos<T extends UserResume$profilePhotosArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$profilePhotosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumeVersions<T extends UserResume$resumeVersionsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$resumeVersionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumeVisibility<T extends UserResume$resumeVisibilityArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$resumeVisibilityArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    resumeReviewStatuses<T extends UserResume$resumeReviewStatusesArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$resumeReviewStatusesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumeViewLogs<T extends UserResume$resumeViewLogsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$resumeViewLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumePDFs<T extends UserResume$resumePDFsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$resumePDFsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumeReviewLogs<T extends UserResume$resumeReviewLogsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$resumeReviewLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messageThreads<T extends UserResume$messageThreadsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$messageThreadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accessGrants<T extends UserResume$accessGrantsArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$accessGrantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobapplication<T extends UserResume$jobapplicationArgs<ExtArgs> = {}>(args?: Subset<T, UserResume$jobapplicationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserResume model
   */
  interface UserResumeFieldRefs {
    readonly id: FieldRef<"UserResume", 'Int'>
    readonly userId: FieldRef<"UserResume", 'Int'>
    readonly isPrimary: FieldRef<"UserResume", 'Boolean'>
    readonly title: FieldRef<"UserResume", 'String'>
    readonly companyId: FieldRef<"UserResume", 'Int'>
    readonly identityNumber: FieldRef<"UserResume", 'String'>
    readonly workPermit: FieldRef<"UserResume", 'String'>
    readonly passport: FieldRef<"UserResume", 'String'>
    readonly email: FieldRef<"UserResume", 'String'>
    readonly emailVerified: FieldRef<"UserResume", 'Boolean'>
    readonly phoneNumber: FieldRef<"UserResume", 'String'>
    readonly phoneVerified: FieldRef<"UserResume", 'Boolean'>
    readonly profilePicture: FieldRef<"UserResume", 'String'>
    readonly firstName: FieldRef<"UserResume", 'String'>
    readonly lastName: FieldRef<"UserResume", 'String'>
    readonly englishName: FieldRef<"UserResume", 'String'>
    readonly nickname: FieldRef<"UserResume", 'String'>
    readonly mailCountry: FieldRef<"UserResume", 'String'>
    readonly mailCity: FieldRef<"UserResume", 'String'>
    readonly mailDistrict: FieldRef<"UserResume", 'String'>
    readonly mailAddress: FieldRef<"UserResume", 'String'>
    readonly residentialCountry: FieldRef<"UserResume", 'String'>
    readonly residentialCity: FieldRef<"UserResume", 'String'>
    readonly residentialDistrict: FieldRef<"UserResume", 'String'>
    readonly residentialAddress: FieldRef<"UserResume", 'String'>
    readonly isRegistered: FieldRef<"UserResume", 'Boolean'>
    readonly isDeleted: FieldRef<"UserResume", 'Boolean'>
    readonly deletedAt: FieldRef<"UserResume", 'DateTime'>
    readonly createdAt: FieldRef<"UserResume", 'DateTime'>
    readonly updatedAt: FieldRef<"UserResume", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserResume findUnique
   */
  export type UserResumeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * Filter, which UserResume to fetch.
     */
    where: UserResumeWhereUniqueInput
  }

  /**
   * UserResume findUniqueOrThrow
   */
  export type UserResumeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * Filter, which UserResume to fetch.
     */
    where: UserResumeWhereUniqueInput
  }

  /**
   * UserResume findFirst
   */
  export type UserResumeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * Filter, which UserResume to fetch.
     */
    where?: UserResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserResumes to fetch.
     */
    orderBy?: UserResumeOrderByWithRelationInput | UserResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserResumes.
     */
    cursor?: UserResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserResumes.
     */
    distinct?: UserResumeScalarFieldEnum | UserResumeScalarFieldEnum[]
  }

  /**
   * UserResume findFirstOrThrow
   */
  export type UserResumeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * Filter, which UserResume to fetch.
     */
    where?: UserResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserResumes to fetch.
     */
    orderBy?: UserResumeOrderByWithRelationInput | UserResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserResumes.
     */
    cursor?: UserResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserResumes.
     */
    distinct?: UserResumeScalarFieldEnum | UserResumeScalarFieldEnum[]
  }

  /**
   * UserResume findMany
   */
  export type UserResumeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * Filter, which UserResumes to fetch.
     */
    where?: UserResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserResumes to fetch.
     */
    orderBy?: UserResumeOrderByWithRelationInput | UserResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserResumes.
     */
    cursor?: UserResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserResumes.
     */
    skip?: number
    distinct?: UserResumeScalarFieldEnum | UserResumeScalarFieldEnum[]
  }

  /**
   * UserResume create
   */
  export type UserResumeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserResume.
     */
    data: XOR<UserResumeCreateInput, UserResumeUncheckedCreateInput>
  }

  /**
   * UserResume createMany
   */
  export type UserResumeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserResumes.
     */
    data: UserResumeCreateManyInput | UserResumeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserResume createManyAndReturn
   */
  export type UserResumeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * The data used to create many UserResumes.
     */
    data: UserResumeCreateManyInput | UserResumeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserResume update
   */
  export type UserResumeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserResume.
     */
    data: XOR<UserResumeUpdateInput, UserResumeUncheckedUpdateInput>
    /**
     * Choose, which UserResume to update.
     */
    where: UserResumeWhereUniqueInput
  }

  /**
   * UserResume updateMany
   */
  export type UserResumeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserResumes.
     */
    data: XOR<UserResumeUpdateManyMutationInput, UserResumeUncheckedUpdateManyInput>
    /**
     * Filter which UserResumes to update
     */
    where?: UserResumeWhereInput
    /**
     * Limit how many UserResumes to update.
     */
    limit?: number
  }

  /**
   * UserResume updateManyAndReturn
   */
  export type UserResumeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * The data used to update UserResumes.
     */
    data: XOR<UserResumeUpdateManyMutationInput, UserResumeUncheckedUpdateManyInput>
    /**
     * Filter which UserResumes to update
     */
    where?: UserResumeWhereInput
    /**
     * Limit how many UserResumes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserResume upsert
   */
  export type UserResumeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserResume to update in case it exists.
     */
    where: UserResumeWhereUniqueInput
    /**
     * In case the UserResume found by the `where` argument doesn't exist, create a new UserResume with this data.
     */
    create: XOR<UserResumeCreateInput, UserResumeUncheckedCreateInput>
    /**
     * In case the UserResume was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserResumeUpdateInput, UserResumeUncheckedUpdateInput>
  }

  /**
   * UserResume delete
   */
  export type UserResumeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    /**
     * Filter which UserResume to delete.
     */
    where: UserResumeWhereUniqueInput
  }

  /**
   * UserResume deleteMany
   */
  export type UserResumeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserResumes to delete
     */
    where?: UserResumeWhereInput
    /**
     * Limit how many UserResumes to delete.
     */
    limit?: number
  }

  /**
   * UserResume.primaryOf
   */
  export type UserResume$primaryOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserResume.languages
   */
  export type UserResume$languagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    where?: LanguageWhereInput
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    cursor?: LanguageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * UserResume.educations
   */
  export type UserResume$educationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * UserResume.experiences
   */
  export type UserResume$experiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    cursor?: ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * UserResume.skills
   */
  export type UserResume$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * UserResume.certificates
   */
  export type UserResume$certificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    cursor?: CertificateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * UserResume.traits
   */
  export type UserResume$traitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    where?: TraitWhereInput
    orderBy?: TraitOrderByWithRelationInput | TraitOrderByWithRelationInput[]
    cursor?: TraitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TraitScalarFieldEnum | TraitScalarFieldEnum[]
  }

  /**
   * UserResume.commuteOptions
   */
  export type UserResume$commuteOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    where?: CommuteWhereInput
    orderBy?: CommuteOrderByWithRelationInput | CommuteOrderByWithRelationInput[]
    cursor?: CommuteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommuteScalarFieldEnum | CommuteScalarFieldEnum[]
  }

  /**
   * UserResume.workingTimes
   */
  export type UserResume$workingTimesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    where?: WorkingTimeWhereInput
    orderBy?: WorkingTimeOrderByWithRelationInput | WorkingTimeOrderByWithRelationInput[]
    cursor?: WorkingTimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkingTimeScalarFieldEnum | WorkingTimeScalarFieldEnum[]
  }

  /**
   * UserResume.workIdentities
   */
  export type UserResume$workIdentitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    where?: WorkIdentityWhereInput
    orderBy?: WorkIdentityOrderByWithRelationInput | WorkIdentityOrderByWithRelationInput[]
    cursor?: WorkIdentityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkIdentityScalarFieldEnum | WorkIdentityScalarFieldEnum[]
  }

  /**
   * UserResume.jobPreferences
   */
  export type UserResume$jobPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    where?: JobTypeWhereInput
    orderBy?: JobTypeOrderByWithRelationInput | JobTypeOrderByWithRelationInput[]
    cursor?: JobTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobTypeScalarFieldEnum | JobTypeScalarFieldEnum[]
  }

  /**
   * UserResume.emergencyContacts
   */
  export type UserResume$emergencyContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    where?: EmergencyContactWhereInput
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    cursor?: EmergencyContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmergencyContactScalarFieldEnum | EmergencyContactScalarFieldEnum[]
  }

  /**
   * UserResume.biography
   */
  export type UserResume$biographyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    where?: BiographyWhereInput
  }

  /**
   * UserResume.portfolio
   */
  export type UserResume$portfolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    where?: PortfolioWhereInput
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    cursor?: PortfolioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * UserResume.profilePhotos
   */
  export type UserResume$profilePhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    where?: ProfilePhotoWhereInput
    orderBy?: ProfilePhotoOrderByWithRelationInput | ProfilePhotoOrderByWithRelationInput[]
    cursor?: ProfilePhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfilePhotoScalarFieldEnum | ProfilePhotoScalarFieldEnum[]
  }

  /**
   * UserResume.resumeVersions
   */
  export type UserResume$resumeVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    where?: ResumeVersionWhereInput
    orderBy?: ResumeVersionOrderByWithRelationInput | ResumeVersionOrderByWithRelationInput[]
    cursor?: ResumeVersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeVersionScalarFieldEnum | ResumeVersionScalarFieldEnum[]
  }

  /**
   * UserResume.resumeVisibility
   */
  export type UserResume$resumeVisibilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    where?: ResumeVisibilityWhereInput
  }

  /**
   * UserResume.resumeReviewStatuses
   */
  export type UserResume$resumeReviewStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    where?: ResumeReviewStatusWhereInput
    orderBy?: ResumeReviewStatusOrderByWithRelationInput | ResumeReviewStatusOrderByWithRelationInput[]
    cursor?: ResumeReviewStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeReviewStatusScalarFieldEnum | ResumeReviewStatusScalarFieldEnum[]
  }

  /**
   * UserResume.resumeViewLogs
   */
  export type UserResume$resumeViewLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    where?: ResumeViewLogWhereInput
    orderBy?: ResumeViewLogOrderByWithRelationInput | ResumeViewLogOrderByWithRelationInput[]
    cursor?: ResumeViewLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeViewLogScalarFieldEnum | ResumeViewLogScalarFieldEnum[]
  }

  /**
   * UserResume.resumePDFs
   */
  export type UserResume$resumePDFsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    where?: ResumePDFWhereInput
    orderBy?: ResumePDFOrderByWithRelationInput | ResumePDFOrderByWithRelationInput[]
    cursor?: ResumePDFWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumePDFScalarFieldEnum | ResumePDFScalarFieldEnum[]
  }

  /**
   * UserResume.resumeReviewLogs
   */
  export type UserResume$resumeReviewLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    where?: ResumeReviewLogWhereInput
    orderBy?: ResumeReviewLogOrderByWithRelationInput | ResumeReviewLogOrderByWithRelationInput[]
    cursor?: ResumeReviewLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeReviewLogScalarFieldEnum | ResumeReviewLogScalarFieldEnum[]
  }

  /**
   * UserResume.messageThreads
   */
  export type UserResume$messageThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    where?: MessageThreadWhereInput
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    cursor?: MessageThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * UserResume.accessGrants
   */
  export type UserResume$accessGrantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    where?: ResumeAccessGrantWhereInput
    orderBy?: ResumeAccessGrantOrderByWithRelationInput | ResumeAccessGrantOrderByWithRelationInput[]
    cursor?: ResumeAccessGrantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeAccessGrantScalarFieldEnum | ResumeAccessGrantScalarFieldEnum[]
  }

  /**
   * UserResume.jobapplication
   */
  export type UserResume$jobapplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    where?: JobApplicationWhereInput
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    cursor?: JobApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * UserResume without action
   */
  export type UserResumeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
  }


  /**
   * Model Language
   */

  export type AggregateLanguage = {
    _count: LanguageCountAggregateOutputType | null
    _avg: LanguageAvgAggregateOutputType | null
    _sum: LanguageSumAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  export type LanguageAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type LanguageSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type LanguageMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    name: string | null
    level: $Enums.LanguageLevel | null
    levelOther: string | null
  }

  export type LanguageMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    name: string | null
    level: $Enums.LanguageLevel | null
    levelOther: string | null
  }

  export type LanguageCountAggregateOutputType = {
    id: number
    resumeId: number
    name: number
    level: number
    levelOther: number
    _all: number
  }


  export type LanguageAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type LanguageSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type LanguageMinAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
    level?: true
    levelOther?: true
  }

  export type LanguageMaxAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
    level?: true
    levelOther?: true
  }

  export type LanguageCountAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
    level?: true
    levelOther?: true
    _all?: true
  }

  export type LanguageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Language to aggregate.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Languages
    **/
    _count?: true | LanguageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageMaxAggregateInputType
  }

  export type GetLanguageAggregateType<T extends LanguageAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguage[P]>
      : GetScalarType<T[P], AggregateLanguage[P]>
  }




  export type LanguageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageWhereInput
    orderBy?: LanguageOrderByWithAggregationInput | LanguageOrderByWithAggregationInput[]
    by: LanguageScalarFieldEnum[] | LanguageScalarFieldEnum
    having?: LanguageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageCountAggregateInputType | true
    _avg?: LanguageAvgAggregateInputType
    _sum?: LanguageSumAggregateInputType
    _min?: LanguageMinAggregateInputType
    _max?: LanguageMaxAggregateInputType
  }

  export type LanguageGroupByOutputType = {
    id: number
    resumeId: number
    name: string
    level: $Enums.LanguageLevel
    levelOther: string | null
    _count: LanguageCountAggregateOutputType | null
    _avg: LanguageAvgAggregateOutputType | null
    _sum: LanguageSumAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  type GetLanguageGroupByPayload<T extends LanguageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageGroupByOutputType[P]>
        }
      >
    >


  export type LanguageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    level?: boolean
    levelOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["language"]>

  export type LanguageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    level?: boolean
    levelOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["language"]>

  export type LanguageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    level?: boolean
    levelOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["language"]>

  export type LanguageSelectScalar = {
    id?: boolean
    resumeId?: boolean
    name?: boolean
    level?: boolean
    levelOther?: boolean
  }

  export type LanguageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "name" | "level" | "levelOther", ExtArgs["result"]["language"]>
  export type LanguageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type LanguageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type LanguageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $LanguagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Language"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      name: string
      level: $Enums.LanguageLevel
      levelOther: string | null
    }, ExtArgs["result"]["language"]>
    composites: {}
  }

  type LanguageGetPayload<S extends boolean | null | undefined | LanguageDefaultArgs> = $Result.GetResult<Prisma.$LanguagePayload, S>

  type LanguageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageCountAggregateInputType | true
    }

  export interface LanguageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Language'], meta: { name: 'Language' } }
    /**
     * Find zero or one Language that matches the filter.
     * @param {LanguageFindUniqueArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageFindUniqueArgs>(args: SelectSubset<T, LanguageFindUniqueArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Language that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageFindUniqueOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Language that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageFindFirstArgs>(args?: SelectSubset<T, LanguageFindFirstArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Language that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.language.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.language.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageWithIdOnly = await prisma.language.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageFindManyArgs>(args?: SelectSubset<T, LanguageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Language.
     * @param {LanguageCreateArgs} args - Arguments to create a Language.
     * @example
     * // Create one Language
     * const Language = await prisma.language.create({
     *   data: {
     *     // ... data to create a Language
     *   }
     * })
     * 
     */
    create<T extends LanguageCreateArgs>(args: SelectSubset<T, LanguageCreateArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Languages.
     * @param {LanguageCreateManyArgs} args - Arguments to create many Languages.
     * @example
     * // Create many Languages
     * const language = await prisma.language.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageCreateManyArgs>(args?: SelectSubset<T, LanguageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Languages and returns the data saved in the database.
     * @param {LanguageCreateManyAndReturnArgs} args - Arguments to create many Languages.
     * @example
     * // Create many Languages
     * const language = await prisma.language.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Languages and only return the `id`
     * const languageWithIdOnly = await prisma.language.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LanguageCreateManyAndReturnArgs>(args?: SelectSubset<T, LanguageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Language.
     * @param {LanguageDeleteArgs} args - Arguments to delete one Language.
     * @example
     * // Delete one Language
     * const Language = await prisma.language.delete({
     *   where: {
     *     // ... filter to delete one Language
     *   }
     * })
     * 
     */
    delete<T extends LanguageDeleteArgs>(args: SelectSubset<T, LanguageDeleteArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Language.
     * @param {LanguageUpdateArgs} args - Arguments to update one Language.
     * @example
     * // Update one Language
     * const language = await prisma.language.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageUpdateArgs>(args: SelectSubset<T, LanguageUpdateArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Languages.
     * @param {LanguageDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.language.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageDeleteManyArgs>(args?: SelectSubset<T, LanguageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const language = await prisma.language.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageUpdateManyArgs>(args: SelectSubset<T, LanguageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages and returns the data updated in the database.
     * @param {LanguageUpdateManyAndReturnArgs} args - Arguments to update many Languages.
     * @example
     * // Update many Languages
     * const language = await prisma.language.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Languages and only return the `id`
     * const languageWithIdOnly = await prisma.language.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LanguageUpdateManyAndReturnArgs>(args: SelectSubset<T, LanguageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Language.
     * @param {LanguageUpsertArgs} args - Arguments to update or create a Language.
     * @example
     * // Update or create a Language
     * const language = await prisma.language.upsert({
     *   create: {
     *     // ... data to create a Language
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Language we want to update
     *   }
     * })
     */
    upsert<T extends LanguageUpsertArgs>(args: SelectSubset<T, LanguageUpsertArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.language.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends LanguageCountArgs>(
      args?: Subset<T, LanguageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageAggregateArgs>(args: Subset<T, LanguageAggregateArgs>): Prisma.PrismaPromise<GetLanguageAggregateType<T>>

    /**
     * Group by Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageGroupByArgs['orderBy'] }
        : { orderBy?: LanguageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Language model
   */
  readonly fields: LanguageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Language.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Language model
   */
  interface LanguageFieldRefs {
    readonly id: FieldRef<"Language", 'Int'>
    readonly resumeId: FieldRef<"Language", 'Int'>
    readonly name: FieldRef<"Language", 'String'>
    readonly level: FieldRef<"Language", 'LanguageLevel'>
    readonly levelOther: FieldRef<"Language", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Language findUnique
   */
  export type LanguageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language findUniqueOrThrow
   */
  export type LanguageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language findFirst
   */
  export type LanguageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language findFirstOrThrow
   */
  export type LanguageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language findMany
   */
  export type LanguageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language create
   */
  export type LanguageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The data needed to create a Language.
     */
    data: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
  }

  /**
   * Language createMany
   */
  export type LanguageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Languages.
     */
    data: LanguageCreateManyInput | LanguageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Language createManyAndReturn
   */
  export type LanguageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * The data used to create many Languages.
     */
    data: LanguageCreateManyInput | LanguageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Language update
   */
  export type LanguageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The data needed to update a Language.
     */
    data: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
    /**
     * Choose, which Language to update.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language updateMany
   */
  export type LanguageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Languages.
     */
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     */
    where?: LanguageWhereInput
    /**
     * Limit how many Languages to update.
     */
    limit?: number
  }

  /**
   * Language updateManyAndReturn
   */
  export type LanguageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * The data used to update Languages.
     */
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     */
    where?: LanguageWhereInput
    /**
     * Limit how many Languages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Language upsert
   */
  export type LanguageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The filter to search for the Language to update in case it exists.
     */
    where: LanguageWhereUniqueInput
    /**
     * In case the Language found by the `where` argument doesn't exist, create a new Language with this data.
     */
    create: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
    /**
     * In case the Language was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
  }

  /**
   * Language delete
   */
  export type LanguageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter which Language to delete.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language deleteMany
   */
  export type LanguageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to delete
     */
    where?: LanguageWhereInput
    /**
     * Limit how many Languages to delete.
     */
    limit?: number
  }

  /**
   * Language without action
   */
  export type LanguageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
  }


  /**
   * Model Education
   */

  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type EducationSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type EducationMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    school: string | null
    department: string | null
    status: $Enums.EducationStatus | null
    statusOther: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type EducationMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    school: string | null
    department: string | null
    status: $Enums.EducationStatus | null
    statusOther: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    resumeId: number
    school: number
    department: number
    status: number
    statusOther: number
    startDate: number
    endDate: number
    _all: number
  }


  export type EducationAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type EducationSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type EducationMinAggregateInputType = {
    id?: true
    resumeId?: true
    school?: true
    department?: true
    status?: true
    statusOther?: true
    startDate?: true
    endDate?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    resumeId?: true
    school?: true
    department?: true
    status?: true
    statusOther?: true
    startDate?: true
    endDate?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    resumeId?: true
    school?: true
    department?: true
    status?: true
    statusOther?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type EducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EducationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EducationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithAggregationInput | EducationOrderByWithAggregationInput[]
    by: EducationScalarFieldEnum[] | EducationScalarFieldEnum
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _avg?: EducationAvgAggregateInputType
    _sum?: EducationSumAggregateInputType
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }

  export type EducationGroupByOutputType = {
    id: number
    resumeId: number
    school: string
    department: string
    status: $Enums.EducationStatus
    statusOther: string | null
    startDate: Date
    endDate: Date
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    school?: boolean
    department?: boolean
    status?: boolean
    statusOther?: boolean
    startDate?: boolean
    endDate?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>

  export type EducationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    school?: boolean
    department?: boolean
    status?: boolean
    statusOther?: boolean
    startDate?: boolean
    endDate?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>

  export type EducationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    school?: boolean
    department?: boolean
    status?: boolean
    statusOther?: boolean
    startDate?: boolean
    endDate?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>

  export type EducationSelectScalar = {
    id?: boolean
    resumeId?: boolean
    school?: boolean
    department?: boolean
    status?: boolean
    statusOther?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type EducationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "school" | "department" | "status" | "statusOther" | "startDate" | "endDate", ExtArgs["result"]["education"]>
  export type EducationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type EducationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type EducationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $EducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Education"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      school: string
      department: string
      status: $Enums.EducationStatus
      statusOther: string | null
      startDate: Date
      endDate: Date
    }, ExtArgs["result"]["education"]>
    composites: {}
  }

  type EducationGetPayload<S extends boolean | null | undefined | EducationDefaultArgs> = $Result.GetResult<Prisma.$EducationPayload, S>

  type EducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EducationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Education'], meta: { name: 'Education' } }
    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EducationFindUniqueArgs>(args: SelectSubset<T, EducationFindUniqueArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Education that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(args: SelectSubset<T, EducationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EducationFindFirstArgs>(args?: SelectSubset<T, EducationFindFirstArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Education that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(args?: SelectSubset<T, EducationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EducationFindManyArgs>(args?: SelectSubset<T, EducationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
     */
    create<T extends EducationCreateArgs>(args: SelectSubset<T, EducationCreateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Educations.
     * @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EducationCreateManyArgs>(args?: SelectSubset<T, EducationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Educations and returns the data saved in the database.
     * @param {EducationCreateManyAndReturnArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Educations and only return the `id`
     * const educationWithIdOnly = await prisma.education.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EducationCreateManyAndReturnArgs>(args?: SelectSubset<T, EducationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
     */
    delete<T extends EducationDeleteArgs>(args: SelectSubset<T, EducationDeleteArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EducationUpdateArgs>(args: SelectSubset<T, EducationUpdateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EducationDeleteManyArgs>(args?: SelectSubset<T, EducationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EducationUpdateManyArgs>(args: SelectSubset<T, EducationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations and returns the data updated in the database.
     * @param {EducationUpdateManyAndReturnArgs} args - Arguments to update many Educations.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Educations and only return the `id`
     * const educationWithIdOnly = await prisma.education.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EducationUpdateManyAndReturnArgs>(args: SelectSubset<T, EducationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
     */
    upsert<T extends EducationUpsertArgs>(args: SelectSubset<T, EducationUpsertArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): Prisma.PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Education model
   */
  readonly fields: EducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Education model
   */
  interface EducationFieldRefs {
    readonly id: FieldRef<"Education", 'Int'>
    readonly resumeId: FieldRef<"Education", 'Int'>
    readonly school: FieldRef<"Education", 'String'>
    readonly department: FieldRef<"Education", 'String'>
    readonly status: FieldRef<"Education", 'EducationStatus'>
    readonly statusOther: FieldRef<"Education", 'String'>
    readonly startDate: FieldRef<"Education", 'DateTime'>
    readonly endDate: FieldRef<"Education", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Education findUnique
   */
  export type EducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findFirst
   */
  export type EducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findMany
   */
  export type EducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education create
   */
  export type EducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }

  /**
   * Education createMany
   */
  export type EducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Education createManyAndReturn
   */
  export type EducationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Education update
   */
  export type EducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to update.
     */
    limit?: number
  }

  /**
   * Education updateManyAndReturn
   */
  export type EducationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Education upsert
   */
  export type EducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }

  /**
   * Education delete
   */
  export type EducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to delete.
     */
    limit?: number
  }

  /**
   * Education without action
   */
  export type EducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
  }


  /**
   * Model Experience
   */

  export type AggregateExperience = {
    _count: ExperienceCountAggregateOutputType | null
    _avg: ExperienceAvgAggregateOutputType | null
    _sum: ExperienceSumAggregateOutputType | null
    _min: ExperienceMinAggregateOutputType | null
    _max: ExperienceMaxAggregateOutputType | null
  }

  export type ExperienceAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ExperienceSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ExperienceMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    company: string | null
    title: string | null
    startDate: Date | null
    endDate: Date | null
    description: string | null
  }

  export type ExperienceMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    company: string | null
    title: string | null
    startDate: Date | null
    endDate: Date | null
    description: string | null
  }

  export type ExperienceCountAggregateOutputType = {
    id: number
    resumeId: number
    company: number
    title: number
    startDate: number
    endDate: number
    description: number
    _all: number
  }


  export type ExperienceAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ExperienceSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ExperienceMinAggregateInputType = {
    id?: true
    resumeId?: true
    company?: true
    title?: true
    startDate?: true
    endDate?: true
    description?: true
  }

  export type ExperienceMaxAggregateInputType = {
    id?: true
    resumeId?: true
    company?: true
    title?: true
    startDate?: true
    endDate?: true
    description?: true
  }

  export type ExperienceCountAggregateInputType = {
    id?: true
    resumeId?: true
    company?: true
    title?: true
    startDate?: true
    endDate?: true
    description?: true
    _all?: true
  }

  export type ExperienceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experience to aggregate.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Experiences
    **/
    _count?: true | ExperienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExperienceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExperienceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperienceMaxAggregateInputType
  }

  export type GetExperienceAggregateType<T extends ExperienceAggregateArgs> = {
        [P in keyof T & keyof AggregateExperience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperience[P]>
      : GetScalarType<T[P], AggregateExperience[P]>
  }




  export type ExperienceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithAggregationInput | ExperienceOrderByWithAggregationInput[]
    by: ExperienceScalarFieldEnum[] | ExperienceScalarFieldEnum
    having?: ExperienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperienceCountAggregateInputType | true
    _avg?: ExperienceAvgAggregateInputType
    _sum?: ExperienceSumAggregateInputType
    _min?: ExperienceMinAggregateInputType
    _max?: ExperienceMaxAggregateInputType
  }

  export type ExperienceGroupByOutputType = {
    id: number
    resumeId: number
    company: string
    title: string
    startDate: Date
    endDate: Date
    description: string
    _count: ExperienceCountAggregateOutputType | null
    _avg: ExperienceAvgAggregateOutputType | null
    _sum: ExperienceSumAggregateOutputType | null
    _min: ExperienceMinAggregateOutputType | null
    _max: ExperienceMaxAggregateOutputType | null
  }

  type GetExperienceGroupByPayload<T extends ExperienceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExperienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperienceGroupByOutputType[P]>
            : GetScalarType<T[P], ExperienceGroupByOutputType[P]>
        }
      >
    >


  export type ExperienceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    company?: boolean
    title?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experience"]>

  export type ExperienceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    company?: boolean
    title?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experience"]>

  export type ExperienceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    company?: boolean
    title?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experience"]>

  export type ExperienceSelectScalar = {
    id?: boolean
    resumeId?: boolean
    company?: boolean
    title?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
  }

  export type ExperienceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "company" | "title" | "startDate" | "endDate" | "description", ExtArgs["result"]["experience"]>
  export type ExperienceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ExperienceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ExperienceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $ExperiencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Experience"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      company: string
      title: string
      startDate: Date
      endDate: Date
      description: string
    }, ExtArgs["result"]["experience"]>
    composites: {}
  }

  type ExperienceGetPayload<S extends boolean | null | undefined | ExperienceDefaultArgs> = $Result.GetResult<Prisma.$ExperiencePayload, S>

  type ExperienceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExperienceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExperienceCountAggregateInputType | true
    }

  export interface ExperienceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Experience'], meta: { name: 'Experience' } }
    /**
     * Find zero or one Experience that matches the filter.
     * @param {ExperienceFindUniqueArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExperienceFindUniqueArgs>(args: SelectSubset<T, ExperienceFindUniqueArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Experience that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExperienceFindUniqueOrThrowArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExperienceFindUniqueOrThrowArgs>(args: SelectSubset<T, ExperienceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Experience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindFirstArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExperienceFindFirstArgs>(args?: SelectSubset<T, ExperienceFindFirstArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Experience that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindFirstOrThrowArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExperienceFindFirstOrThrowArgs>(args?: SelectSubset<T, ExperienceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Experiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Experiences
     * const experiences = await prisma.experience.findMany()
     * 
     * // Get first 10 Experiences
     * const experiences = await prisma.experience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experienceWithIdOnly = await prisma.experience.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExperienceFindManyArgs>(args?: SelectSubset<T, ExperienceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Experience.
     * @param {ExperienceCreateArgs} args - Arguments to create a Experience.
     * @example
     * // Create one Experience
     * const Experience = await prisma.experience.create({
     *   data: {
     *     // ... data to create a Experience
     *   }
     * })
     * 
     */
    create<T extends ExperienceCreateArgs>(args: SelectSubset<T, ExperienceCreateArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Experiences.
     * @param {ExperienceCreateManyArgs} args - Arguments to create many Experiences.
     * @example
     * // Create many Experiences
     * const experience = await prisma.experience.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExperienceCreateManyArgs>(args?: SelectSubset<T, ExperienceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Experiences and returns the data saved in the database.
     * @param {ExperienceCreateManyAndReturnArgs} args - Arguments to create many Experiences.
     * @example
     * // Create many Experiences
     * const experience = await prisma.experience.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Experiences and only return the `id`
     * const experienceWithIdOnly = await prisma.experience.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExperienceCreateManyAndReturnArgs>(args?: SelectSubset<T, ExperienceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Experience.
     * @param {ExperienceDeleteArgs} args - Arguments to delete one Experience.
     * @example
     * // Delete one Experience
     * const Experience = await prisma.experience.delete({
     *   where: {
     *     // ... filter to delete one Experience
     *   }
     * })
     * 
     */
    delete<T extends ExperienceDeleteArgs>(args: SelectSubset<T, ExperienceDeleteArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Experience.
     * @param {ExperienceUpdateArgs} args - Arguments to update one Experience.
     * @example
     * // Update one Experience
     * const experience = await prisma.experience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExperienceUpdateArgs>(args: SelectSubset<T, ExperienceUpdateArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Experiences.
     * @param {ExperienceDeleteManyArgs} args - Arguments to filter Experiences to delete.
     * @example
     * // Delete a few Experiences
     * const { count } = await prisma.experience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExperienceDeleteManyArgs>(args?: SelectSubset<T, ExperienceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Experiences
     * const experience = await prisma.experience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExperienceUpdateManyArgs>(args: SelectSubset<T, ExperienceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Experiences and returns the data updated in the database.
     * @param {ExperienceUpdateManyAndReturnArgs} args - Arguments to update many Experiences.
     * @example
     * // Update many Experiences
     * const experience = await prisma.experience.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Experiences and only return the `id`
     * const experienceWithIdOnly = await prisma.experience.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExperienceUpdateManyAndReturnArgs>(args: SelectSubset<T, ExperienceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Experience.
     * @param {ExperienceUpsertArgs} args - Arguments to update or create a Experience.
     * @example
     * // Update or create a Experience
     * const experience = await prisma.experience.upsert({
     *   create: {
     *     // ... data to create a Experience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Experience we want to update
     *   }
     * })
     */
    upsert<T extends ExperienceUpsertArgs>(args: SelectSubset<T, ExperienceUpsertArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceCountArgs} args - Arguments to filter Experiences to count.
     * @example
     * // Count the number of Experiences
     * const count = await prisma.experience.count({
     *   where: {
     *     // ... the filter for the Experiences we want to count
     *   }
     * })
    **/
    count<T extends ExperienceCountArgs>(
      args?: Subset<T, ExperienceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperienceAggregateArgs>(args: Subset<T, ExperienceAggregateArgs>): Prisma.PrismaPromise<GetExperienceAggregateType<T>>

    /**
     * Group by Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperienceGroupByArgs['orderBy'] }
        : { orderBy?: ExperienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Experience model
   */
  readonly fields: ExperienceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Experience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExperienceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Experience model
   */
  interface ExperienceFieldRefs {
    readonly id: FieldRef<"Experience", 'Int'>
    readonly resumeId: FieldRef<"Experience", 'Int'>
    readonly company: FieldRef<"Experience", 'String'>
    readonly title: FieldRef<"Experience", 'String'>
    readonly startDate: FieldRef<"Experience", 'DateTime'>
    readonly endDate: FieldRef<"Experience", 'DateTime'>
    readonly description: FieldRef<"Experience", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Experience findUnique
   */
  export type ExperienceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience findUniqueOrThrow
   */
  export type ExperienceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience findFirst
   */
  export type ExperienceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiences.
     */
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * Experience findFirstOrThrow
   */
  export type ExperienceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiences.
     */
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * Experience findMany
   */
  export type ExperienceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experiences to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * Experience create
   */
  export type ExperienceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The data needed to create a Experience.
     */
    data: XOR<ExperienceCreateInput, ExperienceUncheckedCreateInput>
  }

  /**
   * Experience createMany
   */
  export type ExperienceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Experiences.
     */
    data: ExperienceCreateManyInput | ExperienceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Experience createManyAndReturn
   */
  export type ExperienceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * The data used to create many Experiences.
     */
    data: ExperienceCreateManyInput | ExperienceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Experience update
   */
  export type ExperienceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The data needed to update a Experience.
     */
    data: XOR<ExperienceUpdateInput, ExperienceUncheckedUpdateInput>
    /**
     * Choose, which Experience to update.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience updateMany
   */
  export type ExperienceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Experiences.
     */
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyInput>
    /**
     * Filter which Experiences to update
     */
    where?: ExperienceWhereInput
    /**
     * Limit how many Experiences to update.
     */
    limit?: number
  }

  /**
   * Experience updateManyAndReturn
   */
  export type ExperienceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * The data used to update Experiences.
     */
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyInput>
    /**
     * Filter which Experiences to update
     */
    where?: ExperienceWhereInput
    /**
     * Limit how many Experiences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Experience upsert
   */
  export type ExperienceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The filter to search for the Experience to update in case it exists.
     */
    where: ExperienceWhereUniqueInput
    /**
     * In case the Experience found by the `where` argument doesn't exist, create a new Experience with this data.
     */
    create: XOR<ExperienceCreateInput, ExperienceUncheckedCreateInput>
    /**
     * In case the Experience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperienceUpdateInput, ExperienceUncheckedUpdateInput>
  }

  /**
   * Experience delete
   */
  export type ExperienceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter which Experience to delete.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience deleteMany
   */
  export type ExperienceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experiences to delete
     */
    where?: ExperienceWhereInput
    /**
     * Limit how many Experiences to delete.
     */
    limit?: number
  }

  /**
   * Experience without action
   */
  export type ExperienceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Experience
     */
    omit?: ExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
  }


  /**
   * Model Skill
   */

  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type SkillSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type SkillMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    name: string | null
  }

  export type SkillMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    name: string | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    resumeId: number
    name: number
    _all: number
  }


  export type SkillAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type SkillSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type SkillMinAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
    _all?: true
  }

  export type SkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithAggregationInput | SkillOrderByWithAggregationInput[]
    by: SkillScalarFieldEnum[] | SkillScalarFieldEnum
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _avg?: SkillAvgAggregateInputType
    _sum?: SkillSumAggregateInputType
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }

  export type SkillGroupByOutputType = {
    id: number
    resumeId: number
    name: string
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectScalar = {
    id?: boolean
    resumeId?: boolean
    name?: boolean
  }

  export type SkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "name", ExtArgs["result"]["skill"]>
  export type SkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type SkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type SkillIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $SkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skill"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      name: string
    }, ExtArgs["result"]["skill"]>
    composites: {}
  }

  type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = $Result.GetResult<Prisma.$SkillPayload, S>

  type SkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillFindUniqueArgs>(args: SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Skill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillFindFirstArgs>(args?: SelectSubset<T, SkillFindFirstArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillFindManyArgs>(args?: SelectSubset<T, SkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
     */
    create<T extends SkillCreateArgs>(args: SelectSubset<T, SkillCreateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Skills.
     * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillCreateManyArgs>(args?: SelectSubset<T, SkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skills and returns the data saved in the database.
     * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
     */
    delete<T extends SkillDeleteArgs>(args: SelectSubset<T, SkillDeleteArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillUpdateArgs>(args: SelectSubset<T, SkillUpdateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillDeleteManyArgs>(args?: SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillUpdateManyArgs>(args: SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills and returns the data updated in the database.
     * @param {SkillUpdateManyAndReturnArgs} args - Arguments to update many Skills.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkillUpdateManyAndReturnArgs>(args: SelectSubset<T, SkillUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
     */
    upsert<T extends SkillUpsertArgs>(args: SelectSubset<T, SkillUpsertArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skill model
   */
  readonly fields: SkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skill model
   */
  interface SkillFieldRefs {
    readonly id: FieldRef<"Skill", 'Int'>
    readonly resumeId: FieldRef<"Skill", 'Int'>
    readonly name: FieldRef<"Skill", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findMany
   */
  export type SkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill create
   */
  export type SkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }

  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skill createManyAndReturn
   */
  export type SkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Skill update
   */
  export type SkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill updateManyAndReturn
   */
  export type SkillUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Skill upsert
   */
  export type SkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }

  /**
   * Skill delete
   */
  export type SkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to delete.
     */
    limit?: number
  }

  /**
   * Skill without action
   */
  export type SkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
  }


  /**
   * Model Certificate
   */

  export type AggregateCertificate = {
    _count: CertificateCountAggregateOutputType | null
    _avg: CertificateAvgAggregateOutputType | null
    _sum: CertificateSumAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  export type CertificateAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type CertificateSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type CertificateMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    name: string | null
    expiry: Date | null
  }

  export type CertificateMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    name: string | null
    expiry: Date | null
  }

  export type CertificateCountAggregateOutputType = {
    id: number
    resumeId: number
    name: number
    expiry: number
    _all: number
  }


  export type CertificateAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type CertificateSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type CertificateMinAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
    expiry?: true
  }

  export type CertificateMaxAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
    expiry?: true
  }

  export type CertificateCountAggregateInputType = {
    id?: true
    resumeId?: true
    name?: true
    expiry?: true
    _all?: true
  }

  export type CertificateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificate to aggregate.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Certificates
    **/
    _count?: true | CertificateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CertificateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CertificateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateMaxAggregateInputType
  }

  export type GetCertificateAggregateType<T extends CertificateAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificate[P]>
      : GetScalarType<T[P], AggregateCertificate[P]>
  }




  export type CertificateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithAggregationInput | CertificateOrderByWithAggregationInput[]
    by: CertificateScalarFieldEnum[] | CertificateScalarFieldEnum
    having?: CertificateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateCountAggregateInputType | true
    _avg?: CertificateAvgAggregateInputType
    _sum?: CertificateSumAggregateInputType
    _min?: CertificateMinAggregateInputType
    _max?: CertificateMaxAggregateInputType
  }

  export type CertificateGroupByOutputType = {
    id: number
    resumeId: number
    name: string
    expiry: Date | null
    _count: CertificateCountAggregateOutputType | null
    _avg: CertificateAvgAggregateOutputType | null
    _sum: CertificateSumAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  type GetCertificateGroupByPayload<T extends CertificateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateGroupByOutputType[P]>
        }
      >
    >


  export type CertificateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    expiry?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    expiry?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    name?: boolean
    expiry?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectScalar = {
    id?: boolean
    resumeId?: boolean
    name?: boolean
    expiry?: boolean
  }

  export type CertificateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "name" | "expiry", ExtArgs["result"]["certificate"]>
  export type CertificateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type CertificateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type CertificateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $CertificatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Certificate"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      name: string
      expiry: Date | null
    }, ExtArgs["result"]["certificate"]>
    composites: {}
  }

  type CertificateGetPayload<S extends boolean | null | undefined | CertificateDefaultArgs> = $Result.GetResult<Prisma.$CertificatePayload, S>

  type CertificateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateCountAggregateInputType | true
    }

  export interface CertificateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certificate'], meta: { name: 'Certificate' } }
    /**
     * Find zero or one Certificate that matches the filter.
     * @param {CertificateFindUniqueArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateFindUniqueArgs>(args: SelectSubset<T, CertificateFindUniqueArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Certificate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateFindUniqueOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateFindFirstArgs>(args?: SelectSubset<T, CertificateFindFirstArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Certificates
     * const certificates = await prisma.certificate.findMany()
     * 
     * // Get first 10 Certificates
     * const certificates = await prisma.certificate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateWithIdOnly = await prisma.certificate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateFindManyArgs>(args?: SelectSubset<T, CertificateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Certificate.
     * @param {CertificateCreateArgs} args - Arguments to create a Certificate.
     * @example
     * // Create one Certificate
     * const Certificate = await prisma.certificate.create({
     *   data: {
     *     // ... data to create a Certificate
     *   }
     * })
     * 
     */
    create<T extends CertificateCreateArgs>(args: SelectSubset<T, CertificateCreateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Certificates.
     * @param {CertificateCreateManyArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateCreateManyArgs>(args?: SelectSubset<T, CertificateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Certificates and returns the data saved in the database.
     * @param {CertificateCreateManyAndReturnArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Certificates and only return the `id`
     * const certificateWithIdOnly = await prisma.certificate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Certificate.
     * @param {CertificateDeleteArgs} args - Arguments to delete one Certificate.
     * @example
     * // Delete one Certificate
     * const Certificate = await prisma.certificate.delete({
     *   where: {
     *     // ... filter to delete one Certificate
     *   }
     * })
     * 
     */
    delete<T extends CertificateDeleteArgs>(args: SelectSubset<T, CertificateDeleteArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Certificate.
     * @param {CertificateUpdateArgs} args - Arguments to update one Certificate.
     * @example
     * // Update one Certificate
     * const certificate = await prisma.certificate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateUpdateArgs>(args: SelectSubset<T, CertificateUpdateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Certificates.
     * @param {CertificateDeleteManyArgs} args - Arguments to filter Certificates to delete.
     * @example
     * // Delete a few Certificates
     * const { count } = await prisma.certificate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateDeleteManyArgs>(args?: SelectSubset<T, CertificateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateUpdateManyArgs>(args: SelectSubset<T, CertificateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates and returns the data updated in the database.
     * @param {CertificateUpdateManyAndReturnArgs} args - Arguments to update many Certificates.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Certificates and only return the `id`
     * const certificateWithIdOnly = await prisma.certificate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Certificate.
     * @param {CertificateUpsertArgs} args - Arguments to update or create a Certificate.
     * @example
     * // Update or create a Certificate
     * const certificate = await prisma.certificate.upsert({
     *   create: {
     *     // ... data to create a Certificate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Certificate we want to update
     *   }
     * })
     */
    upsert<T extends CertificateUpsertArgs>(args: SelectSubset<T, CertificateUpsertArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateCountArgs} args - Arguments to filter Certificates to count.
     * @example
     * // Count the number of Certificates
     * const count = await prisma.certificate.count({
     *   where: {
     *     // ... the filter for the Certificates we want to count
     *   }
     * })
    **/
    count<T extends CertificateCountArgs>(
      args?: Subset<T, CertificateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateAggregateArgs>(args: Subset<T, CertificateAggregateArgs>): Prisma.PrismaPromise<GetCertificateAggregateType<T>>

    /**
     * Group by Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateGroupByArgs['orderBy'] }
        : { orderBy?: CertificateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Certificate model
   */
  readonly fields: CertificateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Certificate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Certificate model
   */
  interface CertificateFieldRefs {
    readonly id: FieldRef<"Certificate", 'Int'>
    readonly resumeId: FieldRef<"Certificate", 'Int'>
    readonly name: FieldRef<"Certificate", 'String'>
    readonly expiry: FieldRef<"Certificate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Certificate findUnique
   */
  export type CertificateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findUniqueOrThrow
   */
  export type CertificateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findFirst
   */
  export type CertificateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findFirstOrThrow
   */
  export type CertificateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findMany
   */
  export type CertificateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate create
   */
  export type CertificateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to create a Certificate.
     */
    data: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
  }

  /**
   * Certificate createMany
   */
  export type CertificateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Certificate createManyAndReturn
   */
  export type CertificateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certificate update
   */
  export type CertificateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to update a Certificate.
     */
    data: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
    /**
     * Choose, which Certificate to update.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate updateMany
   */
  export type CertificateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
  }

  /**
   * Certificate updateManyAndReturn
   */
  export type CertificateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certificate upsert
   */
  export type CertificateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The filter to search for the Certificate to update in case it exists.
     */
    where: CertificateWhereUniqueInput
    /**
     * In case the Certificate found by the `where` argument doesn't exist, create a new Certificate with this data.
     */
    create: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
    /**
     * In case the Certificate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
  }

  /**
   * Certificate delete
   */
  export type CertificateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter which Certificate to delete.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate deleteMany
   */
  export type CertificateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificates to delete
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to delete.
     */
    limit?: number
  }

  /**
   * Certificate without action
   */
  export type CertificateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
  }


  /**
   * Model Trait
   */

  export type AggregateTrait = {
    _count: TraitCountAggregateOutputType | null
    _avg: TraitAvgAggregateOutputType | null
    _sum: TraitSumAggregateOutputType | null
    _min: TraitMinAggregateOutputType | null
    _max: TraitMaxAggregateOutputType | null
  }

  export type TraitAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type TraitSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type TraitMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    personality: string | null
    interest: string | null
  }

  export type TraitMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    personality: string | null
    interest: string | null
  }

  export type TraitCountAggregateOutputType = {
    id: number
    resumeId: number
    personality: number
    interest: number
    _all: number
  }


  export type TraitAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type TraitSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type TraitMinAggregateInputType = {
    id?: true
    resumeId?: true
    personality?: true
    interest?: true
  }

  export type TraitMaxAggregateInputType = {
    id?: true
    resumeId?: true
    personality?: true
    interest?: true
  }

  export type TraitCountAggregateInputType = {
    id?: true
    resumeId?: true
    personality?: true
    interest?: true
    _all?: true
  }

  export type TraitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trait to aggregate.
     */
    where?: TraitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Traits to fetch.
     */
    orderBy?: TraitOrderByWithRelationInput | TraitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TraitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Traits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Traits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Traits
    **/
    _count?: true | TraitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TraitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TraitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TraitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TraitMaxAggregateInputType
  }

  export type GetTraitAggregateType<T extends TraitAggregateArgs> = {
        [P in keyof T & keyof AggregateTrait]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrait[P]>
      : GetScalarType<T[P], AggregateTrait[P]>
  }




  export type TraitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TraitWhereInput
    orderBy?: TraitOrderByWithAggregationInput | TraitOrderByWithAggregationInput[]
    by: TraitScalarFieldEnum[] | TraitScalarFieldEnum
    having?: TraitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TraitCountAggregateInputType | true
    _avg?: TraitAvgAggregateInputType
    _sum?: TraitSumAggregateInputType
    _min?: TraitMinAggregateInputType
    _max?: TraitMaxAggregateInputType
  }

  export type TraitGroupByOutputType = {
    id: number
    resumeId: number
    personality: string
    interest: string | null
    _count: TraitCountAggregateOutputType | null
    _avg: TraitAvgAggregateOutputType | null
    _sum: TraitSumAggregateOutputType | null
    _min: TraitMinAggregateOutputType | null
    _max: TraitMaxAggregateOutputType | null
  }

  type GetTraitGroupByPayload<T extends TraitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TraitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TraitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TraitGroupByOutputType[P]>
            : GetScalarType<T[P], TraitGroupByOutputType[P]>
        }
      >
    >


  export type TraitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    personality?: boolean
    interest?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trait"]>

  export type TraitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    personality?: boolean
    interest?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trait"]>

  export type TraitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    personality?: boolean
    interest?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trait"]>

  export type TraitSelectScalar = {
    id?: boolean
    resumeId?: boolean
    personality?: boolean
    interest?: boolean
  }

  export type TraitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "personality" | "interest", ExtArgs["result"]["trait"]>
  export type TraitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type TraitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type TraitIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $TraitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trait"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      personality: string
      interest: string | null
    }, ExtArgs["result"]["trait"]>
    composites: {}
  }

  type TraitGetPayload<S extends boolean | null | undefined | TraitDefaultArgs> = $Result.GetResult<Prisma.$TraitPayload, S>

  type TraitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TraitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TraitCountAggregateInputType | true
    }

  export interface TraitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trait'], meta: { name: 'Trait' } }
    /**
     * Find zero or one Trait that matches the filter.
     * @param {TraitFindUniqueArgs} args - Arguments to find a Trait
     * @example
     * // Get one Trait
     * const trait = await prisma.trait.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TraitFindUniqueArgs>(args: SelectSubset<T, TraitFindUniqueArgs<ExtArgs>>): Prisma__TraitClient<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trait that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TraitFindUniqueOrThrowArgs} args - Arguments to find a Trait
     * @example
     * // Get one Trait
     * const trait = await prisma.trait.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TraitFindUniqueOrThrowArgs>(args: SelectSubset<T, TraitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TraitClient<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trait that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TraitFindFirstArgs} args - Arguments to find a Trait
     * @example
     * // Get one Trait
     * const trait = await prisma.trait.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TraitFindFirstArgs>(args?: SelectSubset<T, TraitFindFirstArgs<ExtArgs>>): Prisma__TraitClient<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trait that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TraitFindFirstOrThrowArgs} args - Arguments to find a Trait
     * @example
     * // Get one Trait
     * const trait = await prisma.trait.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TraitFindFirstOrThrowArgs>(args?: SelectSubset<T, TraitFindFirstOrThrowArgs<ExtArgs>>): Prisma__TraitClient<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Traits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TraitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Traits
     * const traits = await prisma.trait.findMany()
     * 
     * // Get first 10 Traits
     * const traits = await prisma.trait.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const traitWithIdOnly = await prisma.trait.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TraitFindManyArgs>(args?: SelectSubset<T, TraitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trait.
     * @param {TraitCreateArgs} args - Arguments to create a Trait.
     * @example
     * // Create one Trait
     * const Trait = await prisma.trait.create({
     *   data: {
     *     // ... data to create a Trait
     *   }
     * })
     * 
     */
    create<T extends TraitCreateArgs>(args: SelectSubset<T, TraitCreateArgs<ExtArgs>>): Prisma__TraitClient<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Traits.
     * @param {TraitCreateManyArgs} args - Arguments to create many Traits.
     * @example
     * // Create many Traits
     * const trait = await prisma.trait.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TraitCreateManyArgs>(args?: SelectSubset<T, TraitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Traits and returns the data saved in the database.
     * @param {TraitCreateManyAndReturnArgs} args - Arguments to create many Traits.
     * @example
     * // Create many Traits
     * const trait = await prisma.trait.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Traits and only return the `id`
     * const traitWithIdOnly = await prisma.trait.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TraitCreateManyAndReturnArgs>(args?: SelectSubset<T, TraitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Trait.
     * @param {TraitDeleteArgs} args - Arguments to delete one Trait.
     * @example
     * // Delete one Trait
     * const Trait = await prisma.trait.delete({
     *   where: {
     *     // ... filter to delete one Trait
     *   }
     * })
     * 
     */
    delete<T extends TraitDeleteArgs>(args: SelectSubset<T, TraitDeleteArgs<ExtArgs>>): Prisma__TraitClient<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trait.
     * @param {TraitUpdateArgs} args - Arguments to update one Trait.
     * @example
     * // Update one Trait
     * const trait = await prisma.trait.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TraitUpdateArgs>(args: SelectSubset<T, TraitUpdateArgs<ExtArgs>>): Prisma__TraitClient<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Traits.
     * @param {TraitDeleteManyArgs} args - Arguments to filter Traits to delete.
     * @example
     * // Delete a few Traits
     * const { count } = await prisma.trait.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TraitDeleteManyArgs>(args?: SelectSubset<T, TraitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Traits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TraitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Traits
     * const trait = await prisma.trait.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TraitUpdateManyArgs>(args: SelectSubset<T, TraitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Traits and returns the data updated in the database.
     * @param {TraitUpdateManyAndReturnArgs} args - Arguments to update many Traits.
     * @example
     * // Update many Traits
     * const trait = await prisma.trait.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Traits and only return the `id`
     * const traitWithIdOnly = await prisma.trait.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TraitUpdateManyAndReturnArgs>(args: SelectSubset<T, TraitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Trait.
     * @param {TraitUpsertArgs} args - Arguments to update or create a Trait.
     * @example
     * // Update or create a Trait
     * const trait = await prisma.trait.upsert({
     *   create: {
     *     // ... data to create a Trait
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trait we want to update
     *   }
     * })
     */
    upsert<T extends TraitUpsertArgs>(args: SelectSubset<T, TraitUpsertArgs<ExtArgs>>): Prisma__TraitClient<$Result.GetResult<Prisma.$TraitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Traits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TraitCountArgs} args - Arguments to filter Traits to count.
     * @example
     * // Count the number of Traits
     * const count = await prisma.trait.count({
     *   where: {
     *     // ... the filter for the Traits we want to count
     *   }
     * })
    **/
    count<T extends TraitCountArgs>(
      args?: Subset<T, TraitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TraitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trait.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TraitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TraitAggregateArgs>(args: Subset<T, TraitAggregateArgs>): Prisma.PrismaPromise<GetTraitAggregateType<T>>

    /**
     * Group by Trait.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TraitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TraitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TraitGroupByArgs['orderBy'] }
        : { orderBy?: TraitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TraitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTraitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trait model
   */
  readonly fields: TraitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trait.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TraitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trait model
   */
  interface TraitFieldRefs {
    readonly id: FieldRef<"Trait", 'Int'>
    readonly resumeId: FieldRef<"Trait", 'Int'>
    readonly personality: FieldRef<"Trait", 'String'>
    readonly interest: FieldRef<"Trait", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Trait findUnique
   */
  export type TraitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * Filter, which Trait to fetch.
     */
    where: TraitWhereUniqueInput
  }

  /**
   * Trait findUniqueOrThrow
   */
  export type TraitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * Filter, which Trait to fetch.
     */
    where: TraitWhereUniqueInput
  }

  /**
   * Trait findFirst
   */
  export type TraitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * Filter, which Trait to fetch.
     */
    where?: TraitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Traits to fetch.
     */
    orderBy?: TraitOrderByWithRelationInput | TraitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Traits.
     */
    cursor?: TraitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Traits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Traits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Traits.
     */
    distinct?: TraitScalarFieldEnum | TraitScalarFieldEnum[]
  }

  /**
   * Trait findFirstOrThrow
   */
  export type TraitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * Filter, which Trait to fetch.
     */
    where?: TraitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Traits to fetch.
     */
    orderBy?: TraitOrderByWithRelationInput | TraitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Traits.
     */
    cursor?: TraitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Traits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Traits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Traits.
     */
    distinct?: TraitScalarFieldEnum | TraitScalarFieldEnum[]
  }

  /**
   * Trait findMany
   */
  export type TraitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * Filter, which Traits to fetch.
     */
    where?: TraitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Traits to fetch.
     */
    orderBy?: TraitOrderByWithRelationInput | TraitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Traits.
     */
    cursor?: TraitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Traits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Traits.
     */
    skip?: number
    distinct?: TraitScalarFieldEnum | TraitScalarFieldEnum[]
  }

  /**
   * Trait create
   */
  export type TraitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * The data needed to create a Trait.
     */
    data: XOR<TraitCreateInput, TraitUncheckedCreateInput>
  }

  /**
   * Trait createMany
   */
  export type TraitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Traits.
     */
    data: TraitCreateManyInput | TraitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trait createManyAndReturn
   */
  export type TraitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * The data used to create many Traits.
     */
    data: TraitCreateManyInput | TraitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trait update
   */
  export type TraitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * The data needed to update a Trait.
     */
    data: XOR<TraitUpdateInput, TraitUncheckedUpdateInput>
    /**
     * Choose, which Trait to update.
     */
    where: TraitWhereUniqueInput
  }

  /**
   * Trait updateMany
   */
  export type TraitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Traits.
     */
    data: XOR<TraitUpdateManyMutationInput, TraitUncheckedUpdateManyInput>
    /**
     * Filter which Traits to update
     */
    where?: TraitWhereInput
    /**
     * Limit how many Traits to update.
     */
    limit?: number
  }

  /**
   * Trait updateManyAndReturn
   */
  export type TraitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * The data used to update Traits.
     */
    data: XOR<TraitUpdateManyMutationInput, TraitUncheckedUpdateManyInput>
    /**
     * Filter which Traits to update
     */
    where?: TraitWhereInput
    /**
     * Limit how many Traits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trait upsert
   */
  export type TraitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * The filter to search for the Trait to update in case it exists.
     */
    where: TraitWhereUniqueInput
    /**
     * In case the Trait found by the `where` argument doesn't exist, create a new Trait with this data.
     */
    create: XOR<TraitCreateInput, TraitUncheckedCreateInput>
    /**
     * In case the Trait was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TraitUpdateInput, TraitUncheckedUpdateInput>
  }

  /**
   * Trait delete
   */
  export type TraitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
    /**
     * Filter which Trait to delete.
     */
    where: TraitWhereUniqueInput
  }

  /**
   * Trait deleteMany
   */
  export type TraitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Traits to delete
     */
    where?: TraitWhereInput
    /**
     * Limit how many Traits to delete.
     */
    limit?: number
  }

  /**
   * Trait without action
   */
  export type TraitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trait
     */
    select?: TraitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trait
     */
    omit?: TraitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TraitInclude<ExtArgs> | null
  }


  /**
   * Model Commute
   */

  export type AggregateCommute = {
    _count: CommuteCountAggregateOutputType | null
    _avg: CommuteAvgAggregateOutputType | null
    _sum: CommuteSumAggregateOutputType | null
    _min: CommuteMinAggregateOutputType | null
    _max: CommuteMaxAggregateOutputType | null
  }

  export type CommuteAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type CommuteSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type CommuteMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    method: $Enums.CommuteMethod | null
    methodOther: string | null
  }

  export type CommuteMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    method: $Enums.CommuteMethod | null
    methodOther: string | null
  }

  export type CommuteCountAggregateOutputType = {
    id: number
    resumeId: number
    method: number
    methodOther: number
    _all: number
  }


  export type CommuteAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type CommuteSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type CommuteMinAggregateInputType = {
    id?: true
    resumeId?: true
    method?: true
    methodOther?: true
  }

  export type CommuteMaxAggregateInputType = {
    id?: true
    resumeId?: true
    method?: true
    methodOther?: true
  }

  export type CommuteCountAggregateInputType = {
    id?: true
    resumeId?: true
    method?: true
    methodOther?: true
    _all?: true
  }

  export type CommuteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Commute to aggregate.
     */
    where?: CommuteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commutes to fetch.
     */
    orderBy?: CommuteOrderByWithRelationInput | CommuteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommuteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Commutes
    **/
    _count?: true | CommuteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommuteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommuteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommuteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommuteMaxAggregateInputType
  }

  export type GetCommuteAggregateType<T extends CommuteAggregateArgs> = {
        [P in keyof T & keyof AggregateCommute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommute[P]>
      : GetScalarType<T[P], AggregateCommute[P]>
  }




  export type CommuteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommuteWhereInput
    orderBy?: CommuteOrderByWithAggregationInput | CommuteOrderByWithAggregationInput[]
    by: CommuteScalarFieldEnum[] | CommuteScalarFieldEnum
    having?: CommuteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommuteCountAggregateInputType | true
    _avg?: CommuteAvgAggregateInputType
    _sum?: CommuteSumAggregateInputType
    _min?: CommuteMinAggregateInputType
    _max?: CommuteMaxAggregateInputType
  }

  export type CommuteGroupByOutputType = {
    id: number
    resumeId: number
    method: $Enums.CommuteMethod
    methodOther: string | null
    _count: CommuteCountAggregateOutputType | null
    _avg: CommuteAvgAggregateOutputType | null
    _sum: CommuteSumAggregateOutputType | null
    _min: CommuteMinAggregateOutputType | null
    _max: CommuteMaxAggregateOutputType | null
  }

  type GetCommuteGroupByPayload<T extends CommuteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommuteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommuteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommuteGroupByOutputType[P]>
            : GetScalarType<T[P], CommuteGroupByOutputType[P]>
        }
      >
    >


  export type CommuteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    method?: boolean
    methodOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commute"]>

  export type CommuteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    method?: boolean
    methodOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commute"]>

  export type CommuteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    method?: boolean
    methodOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commute"]>

  export type CommuteSelectScalar = {
    id?: boolean
    resumeId?: boolean
    method?: boolean
    methodOther?: boolean
  }

  export type CommuteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "method" | "methodOther", ExtArgs["result"]["commute"]>
  export type CommuteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type CommuteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type CommuteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $CommutePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Commute"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      method: $Enums.CommuteMethod
      methodOther: string | null
    }, ExtArgs["result"]["commute"]>
    composites: {}
  }

  type CommuteGetPayload<S extends boolean | null | undefined | CommuteDefaultArgs> = $Result.GetResult<Prisma.$CommutePayload, S>

  type CommuteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommuteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommuteCountAggregateInputType | true
    }

  export interface CommuteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Commute'], meta: { name: 'Commute' } }
    /**
     * Find zero or one Commute that matches the filter.
     * @param {CommuteFindUniqueArgs} args - Arguments to find a Commute
     * @example
     * // Get one Commute
     * const commute = await prisma.commute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommuteFindUniqueArgs>(args: SelectSubset<T, CommuteFindUniqueArgs<ExtArgs>>): Prisma__CommuteClient<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Commute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommuteFindUniqueOrThrowArgs} args - Arguments to find a Commute
     * @example
     * // Get one Commute
     * const commute = await prisma.commute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommuteFindUniqueOrThrowArgs>(args: SelectSubset<T, CommuteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommuteClient<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Commute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuteFindFirstArgs} args - Arguments to find a Commute
     * @example
     * // Get one Commute
     * const commute = await prisma.commute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommuteFindFirstArgs>(args?: SelectSubset<T, CommuteFindFirstArgs<ExtArgs>>): Prisma__CommuteClient<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Commute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuteFindFirstOrThrowArgs} args - Arguments to find a Commute
     * @example
     * // Get one Commute
     * const commute = await prisma.commute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommuteFindFirstOrThrowArgs>(args?: SelectSubset<T, CommuteFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommuteClient<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Commutes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commutes
     * const commutes = await prisma.commute.findMany()
     * 
     * // Get first 10 Commutes
     * const commutes = await prisma.commute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commuteWithIdOnly = await prisma.commute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommuteFindManyArgs>(args?: SelectSubset<T, CommuteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Commute.
     * @param {CommuteCreateArgs} args - Arguments to create a Commute.
     * @example
     * // Create one Commute
     * const Commute = await prisma.commute.create({
     *   data: {
     *     // ... data to create a Commute
     *   }
     * })
     * 
     */
    create<T extends CommuteCreateArgs>(args: SelectSubset<T, CommuteCreateArgs<ExtArgs>>): Prisma__CommuteClient<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Commutes.
     * @param {CommuteCreateManyArgs} args - Arguments to create many Commutes.
     * @example
     * // Create many Commutes
     * const commute = await prisma.commute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommuteCreateManyArgs>(args?: SelectSubset<T, CommuteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Commutes and returns the data saved in the database.
     * @param {CommuteCreateManyAndReturnArgs} args - Arguments to create many Commutes.
     * @example
     * // Create many Commutes
     * const commute = await prisma.commute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Commutes and only return the `id`
     * const commuteWithIdOnly = await prisma.commute.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommuteCreateManyAndReturnArgs>(args?: SelectSubset<T, CommuteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Commute.
     * @param {CommuteDeleteArgs} args - Arguments to delete one Commute.
     * @example
     * // Delete one Commute
     * const Commute = await prisma.commute.delete({
     *   where: {
     *     // ... filter to delete one Commute
     *   }
     * })
     * 
     */
    delete<T extends CommuteDeleteArgs>(args: SelectSubset<T, CommuteDeleteArgs<ExtArgs>>): Prisma__CommuteClient<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Commute.
     * @param {CommuteUpdateArgs} args - Arguments to update one Commute.
     * @example
     * // Update one Commute
     * const commute = await prisma.commute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommuteUpdateArgs>(args: SelectSubset<T, CommuteUpdateArgs<ExtArgs>>): Prisma__CommuteClient<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Commutes.
     * @param {CommuteDeleteManyArgs} args - Arguments to filter Commutes to delete.
     * @example
     * // Delete a few Commutes
     * const { count } = await prisma.commute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommuteDeleteManyArgs>(args?: SelectSubset<T, CommuteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commutes
     * const commute = await prisma.commute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommuteUpdateManyArgs>(args: SelectSubset<T, CommuteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commutes and returns the data updated in the database.
     * @param {CommuteUpdateManyAndReturnArgs} args - Arguments to update many Commutes.
     * @example
     * // Update many Commutes
     * const commute = await prisma.commute.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Commutes and only return the `id`
     * const commuteWithIdOnly = await prisma.commute.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommuteUpdateManyAndReturnArgs>(args: SelectSubset<T, CommuteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Commute.
     * @param {CommuteUpsertArgs} args - Arguments to update or create a Commute.
     * @example
     * // Update or create a Commute
     * const commute = await prisma.commute.upsert({
     *   create: {
     *     // ... data to create a Commute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commute we want to update
     *   }
     * })
     */
    upsert<T extends CommuteUpsertArgs>(args: SelectSubset<T, CommuteUpsertArgs<ExtArgs>>): Prisma__CommuteClient<$Result.GetResult<Prisma.$CommutePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Commutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuteCountArgs} args - Arguments to filter Commutes to count.
     * @example
     * // Count the number of Commutes
     * const count = await prisma.commute.count({
     *   where: {
     *     // ... the filter for the Commutes we want to count
     *   }
     * })
    **/
    count<T extends CommuteCountArgs>(
      args?: Subset<T, CommuteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommuteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommuteAggregateArgs>(args: Subset<T, CommuteAggregateArgs>): Prisma.PrismaPromise<GetCommuteAggregateType<T>>

    /**
     * Group by Commute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommuteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommuteGroupByArgs['orderBy'] }
        : { orderBy?: CommuteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommuteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommuteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Commute model
   */
  readonly fields: CommuteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Commute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommuteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Commute model
   */
  interface CommuteFieldRefs {
    readonly id: FieldRef<"Commute", 'Int'>
    readonly resumeId: FieldRef<"Commute", 'Int'>
    readonly method: FieldRef<"Commute", 'CommuteMethod'>
    readonly methodOther: FieldRef<"Commute", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Commute findUnique
   */
  export type CommuteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * Filter, which Commute to fetch.
     */
    where: CommuteWhereUniqueInput
  }

  /**
   * Commute findUniqueOrThrow
   */
  export type CommuteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * Filter, which Commute to fetch.
     */
    where: CommuteWhereUniqueInput
  }

  /**
   * Commute findFirst
   */
  export type CommuteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * Filter, which Commute to fetch.
     */
    where?: CommuteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commutes to fetch.
     */
    orderBy?: CommuteOrderByWithRelationInput | CommuteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commutes.
     */
    cursor?: CommuteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commutes.
     */
    distinct?: CommuteScalarFieldEnum | CommuteScalarFieldEnum[]
  }

  /**
   * Commute findFirstOrThrow
   */
  export type CommuteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * Filter, which Commute to fetch.
     */
    where?: CommuteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commutes to fetch.
     */
    orderBy?: CommuteOrderByWithRelationInput | CommuteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commutes.
     */
    cursor?: CommuteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commutes.
     */
    distinct?: CommuteScalarFieldEnum | CommuteScalarFieldEnum[]
  }

  /**
   * Commute findMany
   */
  export type CommuteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * Filter, which Commutes to fetch.
     */
    where?: CommuteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commutes to fetch.
     */
    orderBy?: CommuteOrderByWithRelationInput | CommuteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Commutes.
     */
    cursor?: CommuteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commutes.
     */
    skip?: number
    distinct?: CommuteScalarFieldEnum | CommuteScalarFieldEnum[]
  }

  /**
   * Commute create
   */
  export type CommuteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * The data needed to create a Commute.
     */
    data: XOR<CommuteCreateInput, CommuteUncheckedCreateInput>
  }

  /**
   * Commute createMany
   */
  export type CommuteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Commutes.
     */
    data: CommuteCreateManyInput | CommuteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Commute createManyAndReturn
   */
  export type CommuteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * The data used to create many Commutes.
     */
    data: CommuteCreateManyInput | CommuteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Commute update
   */
  export type CommuteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * The data needed to update a Commute.
     */
    data: XOR<CommuteUpdateInput, CommuteUncheckedUpdateInput>
    /**
     * Choose, which Commute to update.
     */
    where: CommuteWhereUniqueInput
  }

  /**
   * Commute updateMany
   */
  export type CommuteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Commutes.
     */
    data: XOR<CommuteUpdateManyMutationInput, CommuteUncheckedUpdateManyInput>
    /**
     * Filter which Commutes to update
     */
    where?: CommuteWhereInput
    /**
     * Limit how many Commutes to update.
     */
    limit?: number
  }

  /**
   * Commute updateManyAndReturn
   */
  export type CommuteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * The data used to update Commutes.
     */
    data: XOR<CommuteUpdateManyMutationInput, CommuteUncheckedUpdateManyInput>
    /**
     * Filter which Commutes to update
     */
    where?: CommuteWhereInput
    /**
     * Limit how many Commutes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Commute upsert
   */
  export type CommuteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * The filter to search for the Commute to update in case it exists.
     */
    where: CommuteWhereUniqueInput
    /**
     * In case the Commute found by the `where` argument doesn't exist, create a new Commute with this data.
     */
    create: XOR<CommuteCreateInput, CommuteUncheckedCreateInput>
    /**
     * In case the Commute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommuteUpdateInput, CommuteUncheckedUpdateInput>
  }

  /**
   * Commute delete
   */
  export type CommuteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
    /**
     * Filter which Commute to delete.
     */
    where: CommuteWhereUniqueInput
  }

  /**
   * Commute deleteMany
   */
  export type CommuteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Commutes to delete
     */
    where?: CommuteWhereInput
    /**
     * Limit how many Commutes to delete.
     */
    limit?: number
  }

  /**
   * Commute without action
   */
  export type CommuteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commute
     */
    select?: CommuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commute
     */
    omit?: CommuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuteInclude<ExtArgs> | null
  }


  /**
   * Model WorkingTime
   */

  export type AggregateWorkingTime = {
    _count: WorkingTimeCountAggregateOutputType | null
    _avg: WorkingTimeAvgAggregateOutputType | null
    _sum: WorkingTimeSumAggregateOutputType | null
    _min: WorkingTimeMinAggregateOutputType | null
    _max: WorkingTimeMaxAggregateOutputType | null
  }

  export type WorkingTimeAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type WorkingTimeSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type WorkingTimeMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    shift: $Enums.ShiftType | null
    shiftOther: string | null
    preference: string | null
    expectedStart: Date | null
    expectedEnd: Date | null
  }

  export type WorkingTimeMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    shift: $Enums.ShiftType | null
    shiftOther: string | null
    preference: string | null
    expectedStart: Date | null
    expectedEnd: Date | null
  }

  export type WorkingTimeCountAggregateOutputType = {
    id: number
    resumeId: number
    shift: number
    shiftOther: number
    preference: number
    expectedStart: number
    expectedEnd: number
    _all: number
  }


  export type WorkingTimeAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type WorkingTimeSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type WorkingTimeMinAggregateInputType = {
    id?: true
    resumeId?: true
    shift?: true
    shiftOther?: true
    preference?: true
    expectedStart?: true
    expectedEnd?: true
  }

  export type WorkingTimeMaxAggregateInputType = {
    id?: true
    resumeId?: true
    shift?: true
    shiftOther?: true
    preference?: true
    expectedStart?: true
    expectedEnd?: true
  }

  export type WorkingTimeCountAggregateInputType = {
    id?: true
    resumeId?: true
    shift?: true
    shiftOther?: true
    preference?: true
    expectedStart?: true
    expectedEnd?: true
    _all?: true
  }

  export type WorkingTimeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkingTime to aggregate.
     */
    where?: WorkingTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingTimes to fetch.
     */
    orderBy?: WorkingTimeOrderByWithRelationInput | WorkingTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkingTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkingTimes
    **/
    _count?: true | WorkingTimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkingTimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkingTimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkingTimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkingTimeMaxAggregateInputType
  }

  export type GetWorkingTimeAggregateType<T extends WorkingTimeAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkingTime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkingTime[P]>
      : GetScalarType<T[P], AggregateWorkingTime[P]>
  }




  export type WorkingTimeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkingTimeWhereInput
    orderBy?: WorkingTimeOrderByWithAggregationInput | WorkingTimeOrderByWithAggregationInput[]
    by: WorkingTimeScalarFieldEnum[] | WorkingTimeScalarFieldEnum
    having?: WorkingTimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkingTimeCountAggregateInputType | true
    _avg?: WorkingTimeAvgAggregateInputType
    _sum?: WorkingTimeSumAggregateInputType
    _min?: WorkingTimeMinAggregateInputType
    _max?: WorkingTimeMaxAggregateInputType
  }

  export type WorkingTimeGroupByOutputType = {
    id: number
    resumeId: number
    shift: $Enums.ShiftType
    shiftOther: string | null
    preference: string
    expectedStart: Date | null
    expectedEnd: Date | null
    _count: WorkingTimeCountAggregateOutputType | null
    _avg: WorkingTimeAvgAggregateOutputType | null
    _sum: WorkingTimeSumAggregateOutputType | null
    _min: WorkingTimeMinAggregateOutputType | null
    _max: WorkingTimeMaxAggregateOutputType | null
  }

  type GetWorkingTimeGroupByPayload<T extends WorkingTimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkingTimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkingTimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkingTimeGroupByOutputType[P]>
            : GetScalarType<T[P], WorkingTimeGroupByOutputType[P]>
        }
      >
    >


  export type WorkingTimeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    shift?: boolean
    shiftOther?: boolean
    preference?: boolean
    expectedStart?: boolean
    expectedEnd?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workingTime"]>

  export type WorkingTimeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    shift?: boolean
    shiftOther?: boolean
    preference?: boolean
    expectedStart?: boolean
    expectedEnd?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workingTime"]>

  export type WorkingTimeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    shift?: boolean
    shiftOther?: boolean
    preference?: boolean
    expectedStart?: boolean
    expectedEnd?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workingTime"]>

  export type WorkingTimeSelectScalar = {
    id?: boolean
    resumeId?: boolean
    shift?: boolean
    shiftOther?: boolean
    preference?: boolean
    expectedStart?: boolean
    expectedEnd?: boolean
  }

  export type WorkingTimeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "shift" | "shiftOther" | "preference" | "expectedStart" | "expectedEnd", ExtArgs["result"]["workingTime"]>
  export type WorkingTimeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type WorkingTimeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type WorkingTimeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $WorkingTimePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkingTime"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      shift: $Enums.ShiftType
      shiftOther: string | null
      preference: string
      expectedStart: Date | null
      expectedEnd: Date | null
    }, ExtArgs["result"]["workingTime"]>
    composites: {}
  }

  type WorkingTimeGetPayload<S extends boolean | null | undefined | WorkingTimeDefaultArgs> = $Result.GetResult<Prisma.$WorkingTimePayload, S>

  type WorkingTimeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkingTimeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkingTimeCountAggregateInputType | true
    }

  export interface WorkingTimeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkingTime'], meta: { name: 'WorkingTime' } }
    /**
     * Find zero or one WorkingTime that matches the filter.
     * @param {WorkingTimeFindUniqueArgs} args - Arguments to find a WorkingTime
     * @example
     * // Get one WorkingTime
     * const workingTime = await prisma.workingTime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkingTimeFindUniqueArgs>(args: SelectSubset<T, WorkingTimeFindUniqueArgs<ExtArgs>>): Prisma__WorkingTimeClient<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkingTime that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkingTimeFindUniqueOrThrowArgs} args - Arguments to find a WorkingTime
     * @example
     * // Get one WorkingTime
     * const workingTime = await prisma.workingTime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkingTimeFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkingTimeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkingTimeClient<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkingTime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeFindFirstArgs} args - Arguments to find a WorkingTime
     * @example
     * // Get one WorkingTime
     * const workingTime = await prisma.workingTime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkingTimeFindFirstArgs>(args?: SelectSubset<T, WorkingTimeFindFirstArgs<ExtArgs>>): Prisma__WorkingTimeClient<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkingTime that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeFindFirstOrThrowArgs} args - Arguments to find a WorkingTime
     * @example
     * // Get one WorkingTime
     * const workingTime = await prisma.workingTime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkingTimeFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkingTimeFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkingTimeClient<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkingTimes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkingTimes
     * const workingTimes = await prisma.workingTime.findMany()
     * 
     * // Get first 10 WorkingTimes
     * const workingTimes = await prisma.workingTime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workingTimeWithIdOnly = await prisma.workingTime.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkingTimeFindManyArgs>(args?: SelectSubset<T, WorkingTimeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkingTime.
     * @param {WorkingTimeCreateArgs} args - Arguments to create a WorkingTime.
     * @example
     * // Create one WorkingTime
     * const WorkingTime = await prisma.workingTime.create({
     *   data: {
     *     // ... data to create a WorkingTime
     *   }
     * })
     * 
     */
    create<T extends WorkingTimeCreateArgs>(args: SelectSubset<T, WorkingTimeCreateArgs<ExtArgs>>): Prisma__WorkingTimeClient<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkingTimes.
     * @param {WorkingTimeCreateManyArgs} args - Arguments to create many WorkingTimes.
     * @example
     * // Create many WorkingTimes
     * const workingTime = await prisma.workingTime.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkingTimeCreateManyArgs>(args?: SelectSubset<T, WorkingTimeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkingTimes and returns the data saved in the database.
     * @param {WorkingTimeCreateManyAndReturnArgs} args - Arguments to create many WorkingTimes.
     * @example
     * // Create many WorkingTimes
     * const workingTime = await prisma.workingTime.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkingTimes and only return the `id`
     * const workingTimeWithIdOnly = await prisma.workingTime.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkingTimeCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkingTimeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkingTime.
     * @param {WorkingTimeDeleteArgs} args - Arguments to delete one WorkingTime.
     * @example
     * // Delete one WorkingTime
     * const WorkingTime = await prisma.workingTime.delete({
     *   where: {
     *     // ... filter to delete one WorkingTime
     *   }
     * })
     * 
     */
    delete<T extends WorkingTimeDeleteArgs>(args: SelectSubset<T, WorkingTimeDeleteArgs<ExtArgs>>): Prisma__WorkingTimeClient<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkingTime.
     * @param {WorkingTimeUpdateArgs} args - Arguments to update one WorkingTime.
     * @example
     * // Update one WorkingTime
     * const workingTime = await prisma.workingTime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkingTimeUpdateArgs>(args: SelectSubset<T, WorkingTimeUpdateArgs<ExtArgs>>): Prisma__WorkingTimeClient<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkingTimes.
     * @param {WorkingTimeDeleteManyArgs} args - Arguments to filter WorkingTimes to delete.
     * @example
     * // Delete a few WorkingTimes
     * const { count } = await prisma.workingTime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkingTimeDeleteManyArgs>(args?: SelectSubset<T, WorkingTimeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkingTimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkingTimes
     * const workingTime = await prisma.workingTime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkingTimeUpdateManyArgs>(args: SelectSubset<T, WorkingTimeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkingTimes and returns the data updated in the database.
     * @param {WorkingTimeUpdateManyAndReturnArgs} args - Arguments to update many WorkingTimes.
     * @example
     * // Update many WorkingTimes
     * const workingTime = await prisma.workingTime.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkingTimes and only return the `id`
     * const workingTimeWithIdOnly = await prisma.workingTime.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkingTimeUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkingTimeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkingTime.
     * @param {WorkingTimeUpsertArgs} args - Arguments to update or create a WorkingTime.
     * @example
     * // Update or create a WorkingTime
     * const workingTime = await prisma.workingTime.upsert({
     *   create: {
     *     // ... data to create a WorkingTime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkingTime we want to update
     *   }
     * })
     */
    upsert<T extends WorkingTimeUpsertArgs>(args: SelectSubset<T, WorkingTimeUpsertArgs<ExtArgs>>): Prisma__WorkingTimeClient<$Result.GetResult<Prisma.$WorkingTimePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkingTimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeCountArgs} args - Arguments to filter WorkingTimes to count.
     * @example
     * // Count the number of WorkingTimes
     * const count = await prisma.workingTime.count({
     *   where: {
     *     // ... the filter for the WorkingTimes we want to count
     *   }
     * })
    **/
    count<T extends WorkingTimeCountArgs>(
      args?: Subset<T, WorkingTimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkingTimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkingTime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkingTimeAggregateArgs>(args: Subset<T, WorkingTimeAggregateArgs>): Prisma.PrismaPromise<GetWorkingTimeAggregateType<T>>

    /**
     * Group by WorkingTime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkingTimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkingTimeGroupByArgs['orderBy'] }
        : { orderBy?: WorkingTimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkingTimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkingTimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkingTime model
   */
  readonly fields: WorkingTimeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkingTime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkingTimeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkingTime model
   */
  interface WorkingTimeFieldRefs {
    readonly id: FieldRef<"WorkingTime", 'Int'>
    readonly resumeId: FieldRef<"WorkingTime", 'Int'>
    readonly shift: FieldRef<"WorkingTime", 'ShiftType'>
    readonly shiftOther: FieldRef<"WorkingTime", 'String'>
    readonly preference: FieldRef<"WorkingTime", 'String'>
    readonly expectedStart: FieldRef<"WorkingTime", 'DateTime'>
    readonly expectedEnd: FieldRef<"WorkingTime", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkingTime findUnique
   */
  export type WorkingTimeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTime to fetch.
     */
    where: WorkingTimeWhereUniqueInput
  }

  /**
   * WorkingTime findUniqueOrThrow
   */
  export type WorkingTimeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTime to fetch.
     */
    where: WorkingTimeWhereUniqueInput
  }

  /**
   * WorkingTime findFirst
   */
  export type WorkingTimeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTime to fetch.
     */
    where?: WorkingTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingTimes to fetch.
     */
    orderBy?: WorkingTimeOrderByWithRelationInput | WorkingTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkingTimes.
     */
    cursor?: WorkingTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkingTimes.
     */
    distinct?: WorkingTimeScalarFieldEnum | WorkingTimeScalarFieldEnum[]
  }

  /**
   * WorkingTime findFirstOrThrow
   */
  export type WorkingTimeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTime to fetch.
     */
    where?: WorkingTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingTimes to fetch.
     */
    orderBy?: WorkingTimeOrderByWithRelationInput | WorkingTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkingTimes.
     */
    cursor?: WorkingTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkingTimes.
     */
    distinct?: WorkingTimeScalarFieldEnum | WorkingTimeScalarFieldEnum[]
  }

  /**
   * WorkingTime findMany
   */
  export type WorkingTimeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTimes to fetch.
     */
    where?: WorkingTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingTimes to fetch.
     */
    orderBy?: WorkingTimeOrderByWithRelationInput | WorkingTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkingTimes.
     */
    cursor?: WorkingTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingTimes.
     */
    skip?: number
    distinct?: WorkingTimeScalarFieldEnum | WorkingTimeScalarFieldEnum[]
  }

  /**
   * WorkingTime create
   */
  export type WorkingTimeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkingTime.
     */
    data: XOR<WorkingTimeCreateInput, WorkingTimeUncheckedCreateInput>
  }

  /**
   * WorkingTime createMany
   */
  export type WorkingTimeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkingTimes.
     */
    data: WorkingTimeCreateManyInput | WorkingTimeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkingTime createManyAndReturn
   */
  export type WorkingTimeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * The data used to create many WorkingTimes.
     */
    data: WorkingTimeCreateManyInput | WorkingTimeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkingTime update
   */
  export type WorkingTimeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkingTime.
     */
    data: XOR<WorkingTimeUpdateInput, WorkingTimeUncheckedUpdateInput>
    /**
     * Choose, which WorkingTime to update.
     */
    where: WorkingTimeWhereUniqueInput
  }

  /**
   * WorkingTime updateMany
   */
  export type WorkingTimeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkingTimes.
     */
    data: XOR<WorkingTimeUpdateManyMutationInput, WorkingTimeUncheckedUpdateManyInput>
    /**
     * Filter which WorkingTimes to update
     */
    where?: WorkingTimeWhereInput
    /**
     * Limit how many WorkingTimes to update.
     */
    limit?: number
  }

  /**
   * WorkingTime updateManyAndReturn
   */
  export type WorkingTimeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * The data used to update WorkingTimes.
     */
    data: XOR<WorkingTimeUpdateManyMutationInput, WorkingTimeUncheckedUpdateManyInput>
    /**
     * Filter which WorkingTimes to update
     */
    where?: WorkingTimeWhereInput
    /**
     * Limit how many WorkingTimes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkingTime upsert
   */
  export type WorkingTimeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkingTime to update in case it exists.
     */
    where: WorkingTimeWhereUniqueInput
    /**
     * In case the WorkingTime found by the `where` argument doesn't exist, create a new WorkingTime with this data.
     */
    create: XOR<WorkingTimeCreateInput, WorkingTimeUncheckedCreateInput>
    /**
     * In case the WorkingTime was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkingTimeUpdateInput, WorkingTimeUncheckedUpdateInput>
  }

  /**
   * WorkingTime delete
   */
  export type WorkingTimeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
    /**
     * Filter which WorkingTime to delete.
     */
    where: WorkingTimeWhereUniqueInput
  }

  /**
   * WorkingTime deleteMany
   */
  export type WorkingTimeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkingTimes to delete
     */
    where?: WorkingTimeWhereInput
    /**
     * Limit how many WorkingTimes to delete.
     */
    limit?: number
  }

  /**
   * WorkingTime without action
   */
  export type WorkingTimeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTime
     */
    select?: WorkingTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkingTime
     */
    omit?: WorkingTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeInclude<ExtArgs> | null
  }


  /**
   * Model WorkIdentity
   */

  export type AggregateWorkIdentity = {
    _count: WorkIdentityCountAggregateOutputType | null
    _avg: WorkIdentityAvgAggregateOutputType | null
    _sum: WorkIdentitySumAggregateOutputType | null
    _min: WorkIdentityMinAggregateOutputType | null
    _max: WorkIdentityMaxAggregateOutputType | null
  }

  export type WorkIdentityAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type WorkIdentitySumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type WorkIdentityMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    identity: $Enums.WorkIdentityType | null
    identityOther: string | null
  }

  export type WorkIdentityMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    identity: $Enums.WorkIdentityType | null
    identityOther: string | null
  }

  export type WorkIdentityCountAggregateOutputType = {
    id: number
    resumeId: number
    identity: number
    identityOther: number
    _all: number
  }


  export type WorkIdentityAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type WorkIdentitySumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type WorkIdentityMinAggregateInputType = {
    id?: true
    resumeId?: true
    identity?: true
    identityOther?: true
  }

  export type WorkIdentityMaxAggregateInputType = {
    id?: true
    resumeId?: true
    identity?: true
    identityOther?: true
  }

  export type WorkIdentityCountAggregateInputType = {
    id?: true
    resumeId?: true
    identity?: true
    identityOther?: true
    _all?: true
  }

  export type WorkIdentityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkIdentity to aggregate.
     */
    where?: WorkIdentityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkIdentities to fetch.
     */
    orderBy?: WorkIdentityOrderByWithRelationInput | WorkIdentityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkIdentityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkIdentities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkIdentities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkIdentities
    **/
    _count?: true | WorkIdentityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkIdentityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkIdentitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkIdentityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkIdentityMaxAggregateInputType
  }

  export type GetWorkIdentityAggregateType<T extends WorkIdentityAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkIdentity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkIdentity[P]>
      : GetScalarType<T[P], AggregateWorkIdentity[P]>
  }




  export type WorkIdentityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkIdentityWhereInput
    orderBy?: WorkIdentityOrderByWithAggregationInput | WorkIdentityOrderByWithAggregationInput[]
    by: WorkIdentityScalarFieldEnum[] | WorkIdentityScalarFieldEnum
    having?: WorkIdentityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkIdentityCountAggregateInputType | true
    _avg?: WorkIdentityAvgAggregateInputType
    _sum?: WorkIdentitySumAggregateInputType
    _min?: WorkIdentityMinAggregateInputType
    _max?: WorkIdentityMaxAggregateInputType
  }

  export type WorkIdentityGroupByOutputType = {
    id: number
    resumeId: number
    identity: $Enums.WorkIdentityType
    identityOther: string | null
    _count: WorkIdentityCountAggregateOutputType | null
    _avg: WorkIdentityAvgAggregateOutputType | null
    _sum: WorkIdentitySumAggregateOutputType | null
    _min: WorkIdentityMinAggregateOutputType | null
    _max: WorkIdentityMaxAggregateOutputType | null
  }

  type GetWorkIdentityGroupByPayload<T extends WorkIdentityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkIdentityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkIdentityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkIdentityGroupByOutputType[P]>
            : GetScalarType<T[P], WorkIdentityGroupByOutputType[P]>
        }
      >
    >


  export type WorkIdentitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    identity?: boolean
    identityOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workIdentity"]>

  export type WorkIdentitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    identity?: boolean
    identityOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workIdentity"]>

  export type WorkIdentitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    identity?: boolean
    identityOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workIdentity"]>

  export type WorkIdentitySelectScalar = {
    id?: boolean
    resumeId?: boolean
    identity?: boolean
    identityOther?: boolean
  }

  export type WorkIdentityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "identity" | "identityOther", ExtArgs["result"]["workIdentity"]>
  export type WorkIdentityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type WorkIdentityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type WorkIdentityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $WorkIdentityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkIdentity"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      identity: $Enums.WorkIdentityType
      identityOther: string | null
    }, ExtArgs["result"]["workIdentity"]>
    composites: {}
  }

  type WorkIdentityGetPayload<S extends boolean | null | undefined | WorkIdentityDefaultArgs> = $Result.GetResult<Prisma.$WorkIdentityPayload, S>

  type WorkIdentityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkIdentityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkIdentityCountAggregateInputType | true
    }

  export interface WorkIdentityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkIdentity'], meta: { name: 'WorkIdentity' } }
    /**
     * Find zero or one WorkIdentity that matches the filter.
     * @param {WorkIdentityFindUniqueArgs} args - Arguments to find a WorkIdentity
     * @example
     * // Get one WorkIdentity
     * const workIdentity = await prisma.workIdentity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkIdentityFindUniqueArgs>(args: SelectSubset<T, WorkIdentityFindUniqueArgs<ExtArgs>>): Prisma__WorkIdentityClient<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkIdentity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkIdentityFindUniqueOrThrowArgs} args - Arguments to find a WorkIdentity
     * @example
     * // Get one WorkIdentity
     * const workIdentity = await prisma.workIdentity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkIdentityFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkIdentityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkIdentityClient<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkIdentity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkIdentityFindFirstArgs} args - Arguments to find a WorkIdentity
     * @example
     * // Get one WorkIdentity
     * const workIdentity = await prisma.workIdentity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkIdentityFindFirstArgs>(args?: SelectSubset<T, WorkIdentityFindFirstArgs<ExtArgs>>): Prisma__WorkIdentityClient<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkIdentity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkIdentityFindFirstOrThrowArgs} args - Arguments to find a WorkIdentity
     * @example
     * // Get one WorkIdentity
     * const workIdentity = await prisma.workIdentity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkIdentityFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkIdentityFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkIdentityClient<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkIdentities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkIdentityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkIdentities
     * const workIdentities = await prisma.workIdentity.findMany()
     * 
     * // Get first 10 WorkIdentities
     * const workIdentities = await prisma.workIdentity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workIdentityWithIdOnly = await prisma.workIdentity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkIdentityFindManyArgs>(args?: SelectSubset<T, WorkIdentityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkIdentity.
     * @param {WorkIdentityCreateArgs} args - Arguments to create a WorkIdentity.
     * @example
     * // Create one WorkIdentity
     * const WorkIdentity = await prisma.workIdentity.create({
     *   data: {
     *     // ... data to create a WorkIdentity
     *   }
     * })
     * 
     */
    create<T extends WorkIdentityCreateArgs>(args: SelectSubset<T, WorkIdentityCreateArgs<ExtArgs>>): Prisma__WorkIdentityClient<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkIdentities.
     * @param {WorkIdentityCreateManyArgs} args - Arguments to create many WorkIdentities.
     * @example
     * // Create many WorkIdentities
     * const workIdentity = await prisma.workIdentity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkIdentityCreateManyArgs>(args?: SelectSubset<T, WorkIdentityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkIdentities and returns the data saved in the database.
     * @param {WorkIdentityCreateManyAndReturnArgs} args - Arguments to create many WorkIdentities.
     * @example
     * // Create many WorkIdentities
     * const workIdentity = await prisma.workIdentity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkIdentities and only return the `id`
     * const workIdentityWithIdOnly = await prisma.workIdentity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkIdentityCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkIdentityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkIdentity.
     * @param {WorkIdentityDeleteArgs} args - Arguments to delete one WorkIdentity.
     * @example
     * // Delete one WorkIdentity
     * const WorkIdentity = await prisma.workIdentity.delete({
     *   where: {
     *     // ... filter to delete one WorkIdentity
     *   }
     * })
     * 
     */
    delete<T extends WorkIdentityDeleteArgs>(args: SelectSubset<T, WorkIdentityDeleteArgs<ExtArgs>>): Prisma__WorkIdentityClient<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkIdentity.
     * @param {WorkIdentityUpdateArgs} args - Arguments to update one WorkIdentity.
     * @example
     * // Update one WorkIdentity
     * const workIdentity = await prisma.workIdentity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkIdentityUpdateArgs>(args: SelectSubset<T, WorkIdentityUpdateArgs<ExtArgs>>): Prisma__WorkIdentityClient<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkIdentities.
     * @param {WorkIdentityDeleteManyArgs} args - Arguments to filter WorkIdentities to delete.
     * @example
     * // Delete a few WorkIdentities
     * const { count } = await prisma.workIdentity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkIdentityDeleteManyArgs>(args?: SelectSubset<T, WorkIdentityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkIdentities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkIdentityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkIdentities
     * const workIdentity = await prisma.workIdentity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkIdentityUpdateManyArgs>(args: SelectSubset<T, WorkIdentityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkIdentities and returns the data updated in the database.
     * @param {WorkIdentityUpdateManyAndReturnArgs} args - Arguments to update many WorkIdentities.
     * @example
     * // Update many WorkIdentities
     * const workIdentity = await prisma.workIdentity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkIdentities and only return the `id`
     * const workIdentityWithIdOnly = await prisma.workIdentity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkIdentityUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkIdentityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkIdentity.
     * @param {WorkIdentityUpsertArgs} args - Arguments to update or create a WorkIdentity.
     * @example
     * // Update or create a WorkIdentity
     * const workIdentity = await prisma.workIdentity.upsert({
     *   create: {
     *     // ... data to create a WorkIdentity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkIdentity we want to update
     *   }
     * })
     */
    upsert<T extends WorkIdentityUpsertArgs>(args: SelectSubset<T, WorkIdentityUpsertArgs<ExtArgs>>): Prisma__WorkIdentityClient<$Result.GetResult<Prisma.$WorkIdentityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkIdentities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkIdentityCountArgs} args - Arguments to filter WorkIdentities to count.
     * @example
     * // Count the number of WorkIdentities
     * const count = await prisma.workIdentity.count({
     *   where: {
     *     // ... the filter for the WorkIdentities we want to count
     *   }
     * })
    **/
    count<T extends WorkIdentityCountArgs>(
      args?: Subset<T, WorkIdentityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkIdentityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkIdentity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkIdentityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkIdentityAggregateArgs>(args: Subset<T, WorkIdentityAggregateArgs>): Prisma.PrismaPromise<GetWorkIdentityAggregateType<T>>

    /**
     * Group by WorkIdentity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkIdentityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkIdentityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkIdentityGroupByArgs['orderBy'] }
        : { orderBy?: WorkIdentityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkIdentityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkIdentityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkIdentity model
   */
  readonly fields: WorkIdentityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkIdentity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkIdentityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkIdentity model
   */
  interface WorkIdentityFieldRefs {
    readonly id: FieldRef<"WorkIdentity", 'Int'>
    readonly resumeId: FieldRef<"WorkIdentity", 'Int'>
    readonly identity: FieldRef<"WorkIdentity", 'WorkIdentityType'>
    readonly identityOther: FieldRef<"WorkIdentity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkIdentity findUnique
   */
  export type WorkIdentityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * Filter, which WorkIdentity to fetch.
     */
    where: WorkIdentityWhereUniqueInput
  }

  /**
   * WorkIdentity findUniqueOrThrow
   */
  export type WorkIdentityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * Filter, which WorkIdentity to fetch.
     */
    where: WorkIdentityWhereUniqueInput
  }

  /**
   * WorkIdentity findFirst
   */
  export type WorkIdentityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * Filter, which WorkIdentity to fetch.
     */
    where?: WorkIdentityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkIdentities to fetch.
     */
    orderBy?: WorkIdentityOrderByWithRelationInput | WorkIdentityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkIdentities.
     */
    cursor?: WorkIdentityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkIdentities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkIdentities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkIdentities.
     */
    distinct?: WorkIdentityScalarFieldEnum | WorkIdentityScalarFieldEnum[]
  }

  /**
   * WorkIdentity findFirstOrThrow
   */
  export type WorkIdentityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * Filter, which WorkIdentity to fetch.
     */
    where?: WorkIdentityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkIdentities to fetch.
     */
    orderBy?: WorkIdentityOrderByWithRelationInput | WorkIdentityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkIdentities.
     */
    cursor?: WorkIdentityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkIdentities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkIdentities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkIdentities.
     */
    distinct?: WorkIdentityScalarFieldEnum | WorkIdentityScalarFieldEnum[]
  }

  /**
   * WorkIdentity findMany
   */
  export type WorkIdentityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * Filter, which WorkIdentities to fetch.
     */
    where?: WorkIdentityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkIdentities to fetch.
     */
    orderBy?: WorkIdentityOrderByWithRelationInput | WorkIdentityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkIdentities.
     */
    cursor?: WorkIdentityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkIdentities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkIdentities.
     */
    skip?: number
    distinct?: WorkIdentityScalarFieldEnum | WorkIdentityScalarFieldEnum[]
  }

  /**
   * WorkIdentity create
   */
  export type WorkIdentityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkIdentity.
     */
    data: XOR<WorkIdentityCreateInput, WorkIdentityUncheckedCreateInput>
  }

  /**
   * WorkIdentity createMany
   */
  export type WorkIdentityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkIdentities.
     */
    data: WorkIdentityCreateManyInput | WorkIdentityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkIdentity createManyAndReturn
   */
  export type WorkIdentityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * The data used to create many WorkIdentities.
     */
    data: WorkIdentityCreateManyInput | WorkIdentityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkIdentity update
   */
  export type WorkIdentityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkIdentity.
     */
    data: XOR<WorkIdentityUpdateInput, WorkIdentityUncheckedUpdateInput>
    /**
     * Choose, which WorkIdentity to update.
     */
    where: WorkIdentityWhereUniqueInput
  }

  /**
   * WorkIdentity updateMany
   */
  export type WorkIdentityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkIdentities.
     */
    data: XOR<WorkIdentityUpdateManyMutationInput, WorkIdentityUncheckedUpdateManyInput>
    /**
     * Filter which WorkIdentities to update
     */
    where?: WorkIdentityWhereInput
    /**
     * Limit how many WorkIdentities to update.
     */
    limit?: number
  }

  /**
   * WorkIdentity updateManyAndReturn
   */
  export type WorkIdentityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * The data used to update WorkIdentities.
     */
    data: XOR<WorkIdentityUpdateManyMutationInput, WorkIdentityUncheckedUpdateManyInput>
    /**
     * Filter which WorkIdentities to update
     */
    where?: WorkIdentityWhereInput
    /**
     * Limit how many WorkIdentities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkIdentity upsert
   */
  export type WorkIdentityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkIdentity to update in case it exists.
     */
    where: WorkIdentityWhereUniqueInput
    /**
     * In case the WorkIdentity found by the `where` argument doesn't exist, create a new WorkIdentity with this data.
     */
    create: XOR<WorkIdentityCreateInput, WorkIdentityUncheckedCreateInput>
    /**
     * In case the WorkIdentity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkIdentityUpdateInput, WorkIdentityUncheckedUpdateInput>
  }

  /**
   * WorkIdentity delete
   */
  export type WorkIdentityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
    /**
     * Filter which WorkIdentity to delete.
     */
    where: WorkIdentityWhereUniqueInput
  }

  /**
   * WorkIdentity deleteMany
   */
  export type WorkIdentityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkIdentities to delete
     */
    where?: WorkIdentityWhereInput
    /**
     * Limit how many WorkIdentities to delete.
     */
    limit?: number
  }

  /**
   * WorkIdentity without action
   */
  export type WorkIdentityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkIdentity
     */
    select?: WorkIdentitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkIdentity
     */
    omit?: WorkIdentityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkIdentityInclude<ExtArgs> | null
  }


  /**
   * Model JobType
   */

  export type AggregateJobType = {
    _count: JobTypeCountAggregateOutputType | null
    _avg: JobTypeAvgAggregateOutputType | null
    _sum: JobTypeSumAggregateOutputType | null
    _min: JobTypeMinAggregateOutputType | null
    _max: JobTypeMaxAggregateOutputType | null
  }

  export type JobTypeAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type JobTypeSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type JobTypeMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    type: $Enums.JobTypeEnum | null
    typeOther: string | null
  }

  export type JobTypeMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    type: $Enums.JobTypeEnum | null
    typeOther: string | null
  }

  export type JobTypeCountAggregateOutputType = {
    id: number
    resumeId: number
    type: number
    typeOther: number
    _all: number
  }


  export type JobTypeAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type JobTypeSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type JobTypeMinAggregateInputType = {
    id?: true
    resumeId?: true
    type?: true
    typeOther?: true
  }

  export type JobTypeMaxAggregateInputType = {
    id?: true
    resumeId?: true
    type?: true
    typeOther?: true
  }

  export type JobTypeCountAggregateInputType = {
    id?: true
    resumeId?: true
    type?: true
    typeOther?: true
    _all?: true
  }

  export type JobTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobType to aggregate.
     */
    where?: JobTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobTypes to fetch.
     */
    orderBy?: JobTypeOrderByWithRelationInput | JobTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobTypes
    **/
    _count?: true | JobTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobTypeMaxAggregateInputType
  }

  export type GetJobTypeAggregateType<T extends JobTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateJobType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobType[P]>
      : GetScalarType<T[P], AggregateJobType[P]>
  }




  export type JobTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobTypeWhereInput
    orderBy?: JobTypeOrderByWithAggregationInput | JobTypeOrderByWithAggregationInput[]
    by: JobTypeScalarFieldEnum[] | JobTypeScalarFieldEnum
    having?: JobTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobTypeCountAggregateInputType | true
    _avg?: JobTypeAvgAggregateInputType
    _sum?: JobTypeSumAggregateInputType
    _min?: JobTypeMinAggregateInputType
    _max?: JobTypeMaxAggregateInputType
  }

  export type JobTypeGroupByOutputType = {
    id: number
    resumeId: number
    type: $Enums.JobTypeEnum
    typeOther: string | null
    _count: JobTypeCountAggregateOutputType | null
    _avg: JobTypeAvgAggregateOutputType | null
    _sum: JobTypeSumAggregateOutputType | null
    _min: JobTypeMinAggregateOutputType | null
    _max: JobTypeMaxAggregateOutputType | null
  }

  type GetJobTypeGroupByPayload<T extends JobTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobTypeGroupByOutputType[P]>
            : GetScalarType<T[P], JobTypeGroupByOutputType[P]>
        }
      >
    >


  export type JobTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    type?: boolean
    typeOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobType"]>

  export type JobTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    type?: boolean
    typeOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobType"]>

  export type JobTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    type?: boolean
    typeOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobType"]>

  export type JobTypeSelectScalar = {
    id?: boolean
    resumeId?: boolean
    type?: boolean
    typeOther?: boolean
  }

  export type JobTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "type" | "typeOther", ExtArgs["result"]["jobType"]>
  export type JobTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type JobTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type JobTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $JobTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobType"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      type: $Enums.JobTypeEnum
      typeOther: string | null
    }, ExtArgs["result"]["jobType"]>
    composites: {}
  }

  type JobTypeGetPayload<S extends boolean | null | undefined | JobTypeDefaultArgs> = $Result.GetResult<Prisma.$JobTypePayload, S>

  type JobTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobTypeCountAggregateInputType | true
    }

  export interface JobTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobType'], meta: { name: 'JobType' } }
    /**
     * Find zero or one JobType that matches the filter.
     * @param {JobTypeFindUniqueArgs} args - Arguments to find a JobType
     * @example
     * // Get one JobType
     * const jobType = await prisma.jobType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobTypeFindUniqueArgs>(args: SelectSubset<T, JobTypeFindUniqueArgs<ExtArgs>>): Prisma__JobTypeClient<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobTypeFindUniqueOrThrowArgs} args - Arguments to find a JobType
     * @example
     * // Get one JobType
     * const jobType = await prisma.jobType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, JobTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobTypeClient<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeFindFirstArgs} args - Arguments to find a JobType
     * @example
     * // Get one JobType
     * const jobType = await prisma.jobType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobTypeFindFirstArgs>(args?: SelectSubset<T, JobTypeFindFirstArgs<ExtArgs>>): Prisma__JobTypeClient<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeFindFirstOrThrowArgs} args - Arguments to find a JobType
     * @example
     * // Get one JobType
     * const jobType = await prisma.jobType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, JobTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobTypeClient<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobTypes
     * const jobTypes = await prisma.jobType.findMany()
     * 
     * // Get first 10 JobTypes
     * const jobTypes = await prisma.jobType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobTypeWithIdOnly = await prisma.jobType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobTypeFindManyArgs>(args?: SelectSubset<T, JobTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobType.
     * @param {JobTypeCreateArgs} args - Arguments to create a JobType.
     * @example
     * // Create one JobType
     * const JobType = await prisma.jobType.create({
     *   data: {
     *     // ... data to create a JobType
     *   }
     * })
     * 
     */
    create<T extends JobTypeCreateArgs>(args: SelectSubset<T, JobTypeCreateArgs<ExtArgs>>): Prisma__JobTypeClient<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobTypes.
     * @param {JobTypeCreateManyArgs} args - Arguments to create many JobTypes.
     * @example
     * // Create many JobTypes
     * const jobType = await prisma.jobType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobTypeCreateManyArgs>(args?: SelectSubset<T, JobTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobTypes and returns the data saved in the database.
     * @param {JobTypeCreateManyAndReturnArgs} args - Arguments to create many JobTypes.
     * @example
     * // Create many JobTypes
     * const jobType = await prisma.jobType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobTypes and only return the `id`
     * const jobTypeWithIdOnly = await prisma.jobType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, JobTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobType.
     * @param {JobTypeDeleteArgs} args - Arguments to delete one JobType.
     * @example
     * // Delete one JobType
     * const JobType = await prisma.jobType.delete({
     *   where: {
     *     // ... filter to delete one JobType
     *   }
     * })
     * 
     */
    delete<T extends JobTypeDeleteArgs>(args: SelectSubset<T, JobTypeDeleteArgs<ExtArgs>>): Prisma__JobTypeClient<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobType.
     * @param {JobTypeUpdateArgs} args - Arguments to update one JobType.
     * @example
     * // Update one JobType
     * const jobType = await prisma.jobType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobTypeUpdateArgs>(args: SelectSubset<T, JobTypeUpdateArgs<ExtArgs>>): Prisma__JobTypeClient<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobTypes.
     * @param {JobTypeDeleteManyArgs} args - Arguments to filter JobTypes to delete.
     * @example
     * // Delete a few JobTypes
     * const { count } = await prisma.jobType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobTypeDeleteManyArgs>(args?: SelectSubset<T, JobTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobTypes
     * const jobType = await prisma.jobType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobTypeUpdateManyArgs>(args: SelectSubset<T, JobTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobTypes and returns the data updated in the database.
     * @param {JobTypeUpdateManyAndReturnArgs} args - Arguments to update many JobTypes.
     * @example
     * // Update many JobTypes
     * const jobType = await prisma.jobType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobTypes and only return the `id`
     * const jobTypeWithIdOnly = await prisma.jobType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, JobTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobType.
     * @param {JobTypeUpsertArgs} args - Arguments to update or create a JobType.
     * @example
     * // Update or create a JobType
     * const jobType = await prisma.jobType.upsert({
     *   create: {
     *     // ... data to create a JobType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobType we want to update
     *   }
     * })
     */
    upsert<T extends JobTypeUpsertArgs>(args: SelectSubset<T, JobTypeUpsertArgs<ExtArgs>>): Prisma__JobTypeClient<$Result.GetResult<Prisma.$JobTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeCountArgs} args - Arguments to filter JobTypes to count.
     * @example
     * // Count the number of JobTypes
     * const count = await prisma.jobType.count({
     *   where: {
     *     // ... the filter for the JobTypes we want to count
     *   }
     * })
    **/
    count<T extends JobTypeCountArgs>(
      args?: Subset<T, JobTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobTypeAggregateArgs>(args: Subset<T, JobTypeAggregateArgs>): Prisma.PrismaPromise<GetJobTypeAggregateType<T>>

    /**
     * Group by JobType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobTypeGroupByArgs['orderBy'] }
        : { orderBy?: JobTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobType model
   */
  readonly fields: JobTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobType model
   */
  interface JobTypeFieldRefs {
    readonly id: FieldRef<"JobType", 'Int'>
    readonly resumeId: FieldRef<"JobType", 'Int'>
    readonly type: FieldRef<"JobType", 'JobTypeEnum'>
    readonly typeOther: FieldRef<"JobType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JobType findUnique
   */
  export type JobTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * Filter, which JobType to fetch.
     */
    where: JobTypeWhereUniqueInput
  }

  /**
   * JobType findUniqueOrThrow
   */
  export type JobTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * Filter, which JobType to fetch.
     */
    where: JobTypeWhereUniqueInput
  }

  /**
   * JobType findFirst
   */
  export type JobTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * Filter, which JobType to fetch.
     */
    where?: JobTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobTypes to fetch.
     */
    orderBy?: JobTypeOrderByWithRelationInput | JobTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobTypes.
     */
    cursor?: JobTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobTypes.
     */
    distinct?: JobTypeScalarFieldEnum | JobTypeScalarFieldEnum[]
  }

  /**
   * JobType findFirstOrThrow
   */
  export type JobTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * Filter, which JobType to fetch.
     */
    where?: JobTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobTypes to fetch.
     */
    orderBy?: JobTypeOrderByWithRelationInput | JobTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobTypes.
     */
    cursor?: JobTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobTypes.
     */
    distinct?: JobTypeScalarFieldEnum | JobTypeScalarFieldEnum[]
  }

  /**
   * JobType findMany
   */
  export type JobTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * Filter, which JobTypes to fetch.
     */
    where?: JobTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobTypes to fetch.
     */
    orderBy?: JobTypeOrderByWithRelationInput | JobTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobTypes.
     */
    cursor?: JobTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobTypes.
     */
    skip?: number
    distinct?: JobTypeScalarFieldEnum | JobTypeScalarFieldEnum[]
  }

  /**
   * JobType create
   */
  export type JobTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a JobType.
     */
    data: XOR<JobTypeCreateInput, JobTypeUncheckedCreateInput>
  }

  /**
   * JobType createMany
   */
  export type JobTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobTypes.
     */
    data: JobTypeCreateManyInput | JobTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobType createManyAndReturn
   */
  export type JobTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * The data used to create many JobTypes.
     */
    data: JobTypeCreateManyInput | JobTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobType update
   */
  export type JobTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a JobType.
     */
    data: XOR<JobTypeUpdateInput, JobTypeUncheckedUpdateInput>
    /**
     * Choose, which JobType to update.
     */
    where: JobTypeWhereUniqueInput
  }

  /**
   * JobType updateMany
   */
  export type JobTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobTypes.
     */
    data: XOR<JobTypeUpdateManyMutationInput, JobTypeUncheckedUpdateManyInput>
    /**
     * Filter which JobTypes to update
     */
    where?: JobTypeWhereInput
    /**
     * Limit how many JobTypes to update.
     */
    limit?: number
  }

  /**
   * JobType updateManyAndReturn
   */
  export type JobTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * The data used to update JobTypes.
     */
    data: XOR<JobTypeUpdateManyMutationInput, JobTypeUncheckedUpdateManyInput>
    /**
     * Filter which JobTypes to update
     */
    where?: JobTypeWhereInput
    /**
     * Limit how many JobTypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobType upsert
   */
  export type JobTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the JobType to update in case it exists.
     */
    where: JobTypeWhereUniqueInput
    /**
     * In case the JobType found by the `where` argument doesn't exist, create a new JobType with this data.
     */
    create: XOR<JobTypeCreateInput, JobTypeUncheckedCreateInput>
    /**
     * In case the JobType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobTypeUpdateInput, JobTypeUncheckedUpdateInput>
  }

  /**
   * JobType delete
   */
  export type JobTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
    /**
     * Filter which JobType to delete.
     */
    where: JobTypeWhereUniqueInput
  }

  /**
   * JobType deleteMany
   */
  export type JobTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobTypes to delete
     */
    where?: JobTypeWhereInput
    /**
     * Limit how many JobTypes to delete.
     */
    limit?: number
  }

  /**
   * JobType without action
   */
  export type JobTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobType
     */
    select?: JobTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobType
     */
    omit?: JobTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobTypeInclude<ExtArgs> | null
  }


  /**
   * Model EmergencyContact
   */

  export type AggregateEmergencyContact = {
    _count: EmergencyContactCountAggregateOutputType | null
    _avg: EmergencyContactAvgAggregateOutputType | null
    _sum: EmergencyContactSumAggregateOutputType | null
    _min: EmergencyContactMinAggregateOutputType | null
    _max: EmergencyContactMaxAggregateOutputType | null
  }

  export type EmergencyContactAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type EmergencyContactSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type EmergencyContactMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    relation: $Enums.ContactRelation | null
    relationOther: string | null
  }

  export type EmergencyContactMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    relation: $Enums.ContactRelation | null
    relationOther: string | null
  }

  export type EmergencyContactCountAggregateOutputType = {
    id: number
    resumeId: number
    firstName: number
    lastName: number
    phoneNumber: number
    relation: number
    relationOther: number
    _all: number
  }


  export type EmergencyContactAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type EmergencyContactSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type EmergencyContactMinAggregateInputType = {
    id?: true
    resumeId?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    relation?: true
    relationOther?: true
  }

  export type EmergencyContactMaxAggregateInputType = {
    id?: true
    resumeId?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    relation?: true
    relationOther?: true
  }

  export type EmergencyContactCountAggregateInputType = {
    id?: true
    resumeId?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    relation?: true
    relationOther?: true
    _all?: true
  }

  export type EmergencyContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmergencyContact to aggregate.
     */
    where?: EmergencyContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmergencyContacts to fetch.
     */
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmergencyContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmergencyContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmergencyContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmergencyContacts
    **/
    _count?: true | EmergencyContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmergencyContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmergencyContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmergencyContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmergencyContactMaxAggregateInputType
  }

  export type GetEmergencyContactAggregateType<T extends EmergencyContactAggregateArgs> = {
        [P in keyof T & keyof AggregateEmergencyContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmergencyContact[P]>
      : GetScalarType<T[P], AggregateEmergencyContact[P]>
  }




  export type EmergencyContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmergencyContactWhereInput
    orderBy?: EmergencyContactOrderByWithAggregationInput | EmergencyContactOrderByWithAggregationInput[]
    by: EmergencyContactScalarFieldEnum[] | EmergencyContactScalarFieldEnum
    having?: EmergencyContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmergencyContactCountAggregateInputType | true
    _avg?: EmergencyContactAvgAggregateInputType
    _sum?: EmergencyContactSumAggregateInputType
    _min?: EmergencyContactMinAggregateInputType
    _max?: EmergencyContactMaxAggregateInputType
  }

  export type EmergencyContactGroupByOutputType = {
    id: number
    resumeId: number
    firstName: string
    lastName: string
    phoneNumber: string
    relation: $Enums.ContactRelation
    relationOther: string | null
    _count: EmergencyContactCountAggregateOutputType | null
    _avg: EmergencyContactAvgAggregateOutputType | null
    _sum: EmergencyContactSumAggregateOutputType | null
    _min: EmergencyContactMinAggregateOutputType | null
    _max: EmergencyContactMaxAggregateOutputType | null
  }

  type GetEmergencyContactGroupByPayload<T extends EmergencyContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmergencyContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmergencyContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmergencyContactGroupByOutputType[P]>
            : GetScalarType<T[P], EmergencyContactGroupByOutputType[P]>
        }
      >
    >


  export type EmergencyContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    relation?: boolean
    relationOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emergencyContact"]>

  export type EmergencyContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    relation?: boolean
    relationOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emergencyContact"]>

  export type EmergencyContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    relation?: boolean
    relationOther?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emergencyContact"]>

  export type EmergencyContactSelectScalar = {
    id?: boolean
    resumeId?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    relation?: boolean
    relationOther?: boolean
  }

  export type EmergencyContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "firstName" | "lastName" | "phoneNumber" | "relation" | "relationOther", ExtArgs["result"]["emergencyContact"]>
  export type EmergencyContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type EmergencyContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type EmergencyContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $EmergencyContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmergencyContact"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      firstName: string
      lastName: string
      phoneNumber: string
      relation: $Enums.ContactRelation
      relationOther: string | null
    }, ExtArgs["result"]["emergencyContact"]>
    composites: {}
  }

  type EmergencyContactGetPayload<S extends boolean | null | undefined | EmergencyContactDefaultArgs> = $Result.GetResult<Prisma.$EmergencyContactPayload, S>

  type EmergencyContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmergencyContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmergencyContactCountAggregateInputType | true
    }

  export interface EmergencyContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmergencyContact'], meta: { name: 'EmergencyContact' } }
    /**
     * Find zero or one EmergencyContact that matches the filter.
     * @param {EmergencyContactFindUniqueArgs} args - Arguments to find a EmergencyContact
     * @example
     * // Get one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmergencyContactFindUniqueArgs>(args: SelectSubset<T, EmergencyContactFindUniqueArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmergencyContact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmergencyContactFindUniqueOrThrowArgs} args - Arguments to find a EmergencyContact
     * @example
     * // Get one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmergencyContactFindUniqueOrThrowArgs>(args: SelectSubset<T, EmergencyContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmergencyContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactFindFirstArgs} args - Arguments to find a EmergencyContact
     * @example
     * // Get one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmergencyContactFindFirstArgs>(args?: SelectSubset<T, EmergencyContactFindFirstArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmergencyContact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactFindFirstOrThrowArgs} args - Arguments to find a EmergencyContact
     * @example
     * // Get one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmergencyContactFindFirstOrThrowArgs>(args?: SelectSubset<T, EmergencyContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmergencyContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmergencyContacts
     * const emergencyContacts = await prisma.emergencyContact.findMany()
     * 
     * // Get first 10 EmergencyContacts
     * const emergencyContacts = await prisma.emergencyContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emergencyContactWithIdOnly = await prisma.emergencyContact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmergencyContactFindManyArgs>(args?: SelectSubset<T, EmergencyContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmergencyContact.
     * @param {EmergencyContactCreateArgs} args - Arguments to create a EmergencyContact.
     * @example
     * // Create one EmergencyContact
     * const EmergencyContact = await prisma.emergencyContact.create({
     *   data: {
     *     // ... data to create a EmergencyContact
     *   }
     * })
     * 
     */
    create<T extends EmergencyContactCreateArgs>(args: SelectSubset<T, EmergencyContactCreateArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmergencyContacts.
     * @param {EmergencyContactCreateManyArgs} args - Arguments to create many EmergencyContacts.
     * @example
     * // Create many EmergencyContacts
     * const emergencyContact = await prisma.emergencyContact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmergencyContactCreateManyArgs>(args?: SelectSubset<T, EmergencyContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmergencyContacts and returns the data saved in the database.
     * @param {EmergencyContactCreateManyAndReturnArgs} args - Arguments to create many EmergencyContacts.
     * @example
     * // Create many EmergencyContacts
     * const emergencyContact = await prisma.emergencyContact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmergencyContacts and only return the `id`
     * const emergencyContactWithIdOnly = await prisma.emergencyContact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmergencyContactCreateManyAndReturnArgs>(args?: SelectSubset<T, EmergencyContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmergencyContact.
     * @param {EmergencyContactDeleteArgs} args - Arguments to delete one EmergencyContact.
     * @example
     * // Delete one EmergencyContact
     * const EmergencyContact = await prisma.emergencyContact.delete({
     *   where: {
     *     // ... filter to delete one EmergencyContact
     *   }
     * })
     * 
     */
    delete<T extends EmergencyContactDeleteArgs>(args: SelectSubset<T, EmergencyContactDeleteArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmergencyContact.
     * @param {EmergencyContactUpdateArgs} args - Arguments to update one EmergencyContact.
     * @example
     * // Update one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmergencyContactUpdateArgs>(args: SelectSubset<T, EmergencyContactUpdateArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmergencyContacts.
     * @param {EmergencyContactDeleteManyArgs} args - Arguments to filter EmergencyContacts to delete.
     * @example
     * // Delete a few EmergencyContacts
     * const { count } = await prisma.emergencyContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmergencyContactDeleteManyArgs>(args?: SelectSubset<T, EmergencyContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmergencyContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmergencyContacts
     * const emergencyContact = await prisma.emergencyContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmergencyContactUpdateManyArgs>(args: SelectSubset<T, EmergencyContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmergencyContacts and returns the data updated in the database.
     * @param {EmergencyContactUpdateManyAndReturnArgs} args - Arguments to update many EmergencyContacts.
     * @example
     * // Update many EmergencyContacts
     * const emergencyContact = await prisma.emergencyContact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmergencyContacts and only return the `id`
     * const emergencyContactWithIdOnly = await prisma.emergencyContact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmergencyContactUpdateManyAndReturnArgs>(args: SelectSubset<T, EmergencyContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmergencyContact.
     * @param {EmergencyContactUpsertArgs} args - Arguments to update or create a EmergencyContact.
     * @example
     * // Update or create a EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.upsert({
     *   create: {
     *     // ... data to create a EmergencyContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmergencyContact we want to update
     *   }
     * })
     */
    upsert<T extends EmergencyContactUpsertArgs>(args: SelectSubset<T, EmergencyContactUpsertArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmergencyContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactCountArgs} args - Arguments to filter EmergencyContacts to count.
     * @example
     * // Count the number of EmergencyContacts
     * const count = await prisma.emergencyContact.count({
     *   where: {
     *     // ... the filter for the EmergencyContacts we want to count
     *   }
     * })
    **/
    count<T extends EmergencyContactCountArgs>(
      args?: Subset<T, EmergencyContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmergencyContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmergencyContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmergencyContactAggregateArgs>(args: Subset<T, EmergencyContactAggregateArgs>): Prisma.PrismaPromise<GetEmergencyContactAggregateType<T>>

    /**
     * Group by EmergencyContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmergencyContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmergencyContactGroupByArgs['orderBy'] }
        : { orderBy?: EmergencyContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmergencyContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmergencyContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmergencyContact model
   */
  readonly fields: EmergencyContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmergencyContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmergencyContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmergencyContact model
   */
  interface EmergencyContactFieldRefs {
    readonly id: FieldRef<"EmergencyContact", 'Int'>
    readonly resumeId: FieldRef<"EmergencyContact", 'Int'>
    readonly firstName: FieldRef<"EmergencyContact", 'String'>
    readonly lastName: FieldRef<"EmergencyContact", 'String'>
    readonly phoneNumber: FieldRef<"EmergencyContact", 'String'>
    readonly relation: FieldRef<"EmergencyContact", 'ContactRelation'>
    readonly relationOther: FieldRef<"EmergencyContact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmergencyContact findUnique
   */
  export type EmergencyContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContact to fetch.
     */
    where: EmergencyContactWhereUniqueInput
  }

  /**
   * EmergencyContact findUniqueOrThrow
   */
  export type EmergencyContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContact to fetch.
     */
    where: EmergencyContactWhereUniqueInput
  }

  /**
   * EmergencyContact findFirst
   */
  export type EmergencyContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContact to fetch.
     */
    where?: EmergencyContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmergencyContacts to fetch.
     */
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmergencyContacts.
     */
    cursor?: EmergencyContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmergencyContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmergencyContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmergencyContacts.
     */
    distinct?: EmergencyContactScalarFieldEnum | EmergencyContactScalarFieldEnum[]
  }

  /**
   * EmergencyContact findFirstOrThrow
   */
  export type EmergencyContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContact to fetch.
     */
    where?: EmergencyContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmergencyContacts to fetch.
     */
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmergencyContacts.
     */
    cursor?: EmergencyContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmergencyContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmergencyContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmergencyContacts.
     */
    distinct?: EmergencyContactScalarFieldEnum | EmergencyContactScalarFieldEnum[]
  }

  /**
   * EmergencyContact findMany
   */
  export type EmergencyContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContacts to fetch.
     */
    where?: EmergencyContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmergencyContacts to fetch.
     */
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmergencyContacts.
     */
    cursor?: EmergencyContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmergencyContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmergencyContacts.
     */
    skip?: number
    distinct?: EmergencyContactScalarFieldEnum | EmergencyContactScalarFieldEnum[]
  }

  /**
   * EmergencyContact create
   */
  export type EmergencyContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * The data needed to create a EmergencyContact.
     */
    data: XOR<EmergencyContactCreateInput, EmergencyContactUncheckedCreateInput>
  }

  /**
   * EmergencyContact createMany
   */
  export type EmergencyContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmergencyContacts.
     */
    data: EmergencyContactCreateManyInput | EmergencyContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmergencyContact createManyAndReturn
   */
  export type EmergencyContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * The data used to create many EmergencyContacts.
     */
    data: EmergencyContactCreateManyInput | EmergencyContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmergencyContact update
   */
  export type EmergencyContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * The data needed to update a EmergencyContact.
     */
    data: XOR<EmergencyContactUpdateInput, EmergencyContactUncheckedUpdateInput>
    /**
     * Choose, which EmergencyContact to update.
     */
    where: EmergencyContactWhereUniqueInput
  }

  /**
   * EmergencyContact updateMany
   */
  export type EmergencyContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmergencyContacts.
     */
    data: XOR<EmergencyContactUpdateManyMutationInput, EmergencyContactUncheckedUpdateManyInput>
    /**
     * Filter which EmergencyContacts to update
     */
    where?: EmergencyContactWhereInput
    /**
     * Limit how many EmergencyContacts to update.
     */
    limit?: number
  }

  /**
   * EmergencyContact updateManyAndReturn
   */
  export type EmergencyContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * The data used to update EmergencyContacts.
     */
    data: XOR<EmergencyContactUpdateManyMutationInput, EmergencyContactUncheckedUpdateManyInput>
    /**
     * Filter which EmergencyContacts to update
     */
    where?: EmergencyContactWhereInput
    /**
     * Limit how many EmergencyContacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmergencyContact upsert
   */
  export type EmergencyContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * The filter to search for the EmergencyContact to update in case it exists.
     */
    where: EmergencyContactWhereUniqueInput
    /**
     * In case the EmergencyContact found by the `where` argument doesn't exist, create a new EmergencyContact with this data.
     */
    create: XOR<EmergencyContactCreateInput, EmergencyContactUncheckedCreateInput>
    /**
     * In case the EmergencyContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmergencyContactUpdateInput, EmergencyContactUncheckedUpdateInput>
  }

  /**
   * EmergencyContact delete
   */
  export type EmergencyContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter which EmergencyContact to delete.
     */
    where: EmergencyContactWhereUniqueInput
  }

  /**
   * EmergencyContact deleteMany
   */
  export type EmergencyContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmergencyContacts to delete
     */
    where?: EmergencyContactWhereInput
    /**
     * Limit how many EmergencyContacts to delete.
     */
    limit?: number
  }

  /**
   * EmergencyContact without action
   */
  export type EmergencyContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
  }


  /**
   * Model Biography
   */

  export type AggregateBiography = {
    _count: BiographyCountAggregateOutputType | null
    _avg: BiographyAvgAggregateOutputType | null
    _sum: BiographySumAggregateOutputType | null
    _min: BiographyMinAggregateOutputType | null
    _max: BiographyMaxAggregateOutputType | null
  }

  export type BiographyAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type BiographySumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type BiographyMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    content: string | null
  }

  export type BiographyMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    content: string | null
  }

  export type BiographyCountAggregateOutputType = {
    id: number
    resumeId: number
    content: number
    _all: number
  }


  export type BiographyAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type BiographySumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type BiographyMinAggregateInputType = {
    id?: true
    resumeId?: true
    content?: true
  }

  export type BiographyMaxAggregateInputType = {
    id?: true
    resumeId?: true
    content?: true
  }

  export type BiographyCountAggregateInputType = {
    id?: true
    resumeId?: true
    content?: true
    _all?: true
  }

  export type BiographyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Biography to aggregate.
     */
    where?: BiographyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biographies to fetch.
     */
    orderBy?: BiographyOrderByWithRelationInput | BiographyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BiographyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Biographies
    **/
    _count?: true | BiographyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BiographyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BiographySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BiographyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BiographyMaxAggregateInputType
  }

  export type GetBiographyAggregateType<T extends BiographyAggregateArgs> = {
        [P in keyof T & keyof AggregateBiography]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBiography[P]>
      : GetScalarType<T[P], AggregateBiography[P]>
  }




  export type BiographyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiographyWhereInput
    orderBy?: BiographyOrderByWithAggregationInput | BiographyOrderByWithAggregationInput[]
    by: BiographyScalarFieldEnum[] | BiographyScalarFieldEnum
    having?: BiographyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BiographyCountAggregateInputType | true
    _avg?: BiographyAvgAggregateInputType
    _sum?: BiographySumAggregateInputType
    _min?: BiographyMinAggregateInputType
    _max?: BiographyMaxAggregateInputType
  }

  export type BiographyGroupByOutputType = {
    id: number
    resumeId: number
    content: string
    _count: BiographyCountAggregateOutputType | null
    _avg: BiographyAvgAggregateOutputType | null
    _sum: BiographySumAggregateOutputType | null
    _min: BiographyMinAggregateOutputType | null
    _max: BiographyMaxAggregateOutputType | null
  }

  type GetBiographyGroupByPayload<T extends BiographyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BiographyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BiographyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BiographyGroupByOutputType[P]>
            : GetScalarType<T[P], BiographyGroupByOutputType[P]>
        }
      >
    >


  export type BiographySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    content?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["biography"]>

  export type BiographySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    content?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["biography"]>

  export type BiographySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    content?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["biography"]>

  export type BiographySelectScalar = {
    id?: boolean
    resumeId?: boolean
    content?: boolean
  }

  export type BiographyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "content", ExtArgs["result"]["biography"]>
  export type BiographyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type BiographyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type BiographyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $BiographyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Biography"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      content: string
    }, ExtArgs["result"]["biography"]>
    composites: {}
  }

  type BiographyGetPayload<S extends boolean | null | undefined | BiographyDefaultArgs> = $Result.GetResult<Prisma.$BiographyPayload, S>

  type BiographyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BiographyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BiographyCountAggregateInputType | true
    }

  export interface BiographyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Biography'], meta: { name: 'Biography' } }
    /**
     * Find zero or one Biography that matches the filter.
     * @param {BiographyFindUniqueArgs} args - Arguments to find a Biography
     * @example
     * // Get one Biography
     * const biography = await prisma.biography.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BiographyFindUniqueArgs>(args: SelectSubset<T, BiographyFindUniqueArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Biography that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BiographyFindUniqueOrThrowArgs} args - Arguments to find a Biography
     * @example
     * // Get one Biography
     * const biography = await prisma.biography.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BiographyFindUniqueOrThrowArgs>(args: SelectSubset<T, BiographyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Biography that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiographyFindFirstArgs} args - Arguments to find a Biography
     * @example
     * // Get one Biography
     * const biography = await prisma.biography.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BiographyFindFirstArgs>(args?: SelectSubset<T, BiographyFindFirstArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Biography that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiographyFindFirstOrThrowArgs} args - Arguments to find a Biography
     * @example
     * // Get one Biography
     * const biography = await prisma.biography.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BiographyFindFirstOrThrowArgs>(args?: SelectSubset<T, BiographyFindFirstOrThrowArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Biographies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiographyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Biographies
     * const biographies = await prisma.biography.findMany()
     * 
     * // Get first 10 Biographies
     * const biographies = await prisma.biography.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const biographyWithIdOnly = await prisma.biography.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BiographyFindManyArgs>(args?: SelectSubset<T, BiographyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Biography.
     * @param {BiographyCreateArgs} args - Arguments to create a Biography.
     * @example
     * // Create one Biography
     * const Biography = await prisma.biography.create({
     *   data: {
     *     // ... data to create a Biography
     *   }
     * })
     * 
     */
    create<T extends BiographyCreateArgs>(args: SelectSubset<T, BiographyCreateArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Biographies.
     * @param {BiographyCreateManyArgs} args - Arguments to create many Biographies.
     * @example
     * // Create many Biographies
     * const biography = await prisma.biography.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BiographyCreateManyArgs>(args?: SelectSubset<T, BiographyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Biographies and returns the data saved in the database.
     * @param {BiographyCreateManyAndReturnArgs} args - Arguments to create many Biographies.
     * @example
     * // Create many Biographies
     * const biography = await prisma.biography.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Biographies and only return the `id`
     * const biographyWithIdOnly = await prisma.biography.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BiographyCreateManyAndReturnArgs>(args?: SelectSubset<T, BiographyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Biography.
     * @param {BiographyDeleteArgs} args - Arguments to delete one Biography.
     * @example
     * // Delete one Biography
     * const Biography = await prisma.biography.delete({
     *   where: {
     *     // ... filter to delete one Biography
     *   }
     * })
     * 
     */
    delete<T extends BiographyDeleteArgs>(args: SelectSubset<T, BiographyDeleteArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Biography.
     * @param {BiographyUpdateArgs} args - Arguments to update one Biography.
     * @example
     * // Update one Biography
     * const biography = await prisma.biography.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BiographyUpdateArgs>(args: SelectSubset<T, BiographyUpdateArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Biographies.
     * @param {BiographyDeleteManyArgs} args - Arguments to filter Biographies to delete.
     * @example
     * // Delete a few Biographies
     * const { count } = await prisma.biography.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BiographyDeleteManyArgs>(args?: SelectSubset<T, BiographyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Biographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiographyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Biographies
     * const biography = await prisma.biography.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BiographyUpdateManyArgs>(args: SelectSubset<T, BiographyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Biographies and returns the data updated in the database.
     * @param {BiographyUpdateManyAndReturnArgs} args - Arguments to update many Biographies.
     * @example
     * // Update many Biographies
     * const biography = await prisma.biography.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Biographies and only return the `id`
     * const biographyWithIdOnly = await prisma.biography.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BiographyUpdateManyAndReturnArgs>(args: SelectSubset<T, BiographyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Biography.
     * @param {BiographyUpsertArgs} args - Arguments to update or create a Biography.
     * @example
     * // Update or create a Biography
     * const biography = await prisma.biography.upsert({
     *   create: {
     *     // ... data to create a Biography
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Biography we want to update
     *   }
     * })
     */
    upsert<T extends BiographyUpsertArgs>(args: SelectSubset<T, BiographyUpsertArgs<ExtArgs>>): Prisma__BiographyClient<$Result.GetResult<Prisma.$BiographyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Biographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiographyCountArgs} args - Arguments to filter Biographies to count.
     * @example
     * // Count the number of Biographies
     * const count = await prisma.biography.count({
     *   where: {
     *     // ... the filter for the Biographies we want to count
     *   }
     * })
    **/
    count<T extends BiographyCountArgs>(
      args?: Subset<T, BiographyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BiographyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Biography.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiographyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BiographyAggregateArgs>(args: Subset<T, BiographyAggregateArgs>): Prisma.PrismaPromise<GetBiographyAggregateType<T>>

    /**
     * Group by Biography.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiographyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BiographyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BiographyGroupByArgs['orderBy'] }
        : { orderBy?: BiographyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BiographyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBiographyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Biography model
   */
  readonly fields: BiographyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Biography.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BiographyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Biography model
   */
  interface BiographyFieldRefs {
    readonly id: FieldRef<"Biography", 'Int'>
    readonly resumeId: FieldRef<"Biography", 'Int'>
    readonly content: FieldRef<"Biography", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Biography findUnique
   */
  export type BiographyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * Filter, which Biography to fetch.
     */
    where: BiographyWhereUniqueInput
  }

  /**
   * Biography findUniqueOrThrow
   */
  export type BiographyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * Filter, which Biography to fetch.
     */
    where: BiographyWhereUniqueInput
  }

  /**
   * Biography findFirst
   */
  export type BiographyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * Filter, which Biography to fetch.
     */
    where?: BiographyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biographies to fetch.
     */
    orderBy?: BiographyOrderByWithRelationInput | BiographyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Biographies.
     */
    cursor?: BiographyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Biographies.
     */
    distinct?: BiographyScalarFieldEnum | BiographyScalarFieldEnum[]
  }

  /**
   * Biography findFirstOrThrow
   */
  export type BiographyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * Filter, which Biography to fetch.
     */
    where?: BiographyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biographies to fetch.
     */
    orderBy?: BiographyOrderByWithRelationInput | BiographyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Biographies.
     */
    cursor?: BiographyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Biographies.
     */
    distinct?: BiographyScalarFieldEnum | BiographyScalarFieldEnum[]
  }

  /**
   * Biography findMany
   */
  export type BiographyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * Filter, which Biographies to fetch.
     */
    where?: BiographyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biographies to fetch.
     */
    orderBy?: BiographyOrderByWithRelationInput | BiographyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Biographies.
     */
    cursor?: BiographyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biographies.
     */
    skip?: number
    distinct?: BiographyScalarFieldEnum | BiographyScalarFieldEnum[]
  }

  /**
   * Biography create
   */
  export type BiographyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * The data needed to create a Biography.
     */
    data: XOR<BiographyCreateInput, BiographyUncheckedCreateInput>
  }

  /**
   * Biography createMany
   */
  export type BiographyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Biographies.
     */
    data: BiographyCreateManyInput | BiographyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Biography createManyAndReturn
   */
  export type BiographyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * The data used to create many Biographies.
     */
    data: BiographyCreateManyInput | BiographyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Biography update
   */
  export type BiographyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * The data needed to update a Biography.
     */
    data: XOR<BiographyUpdateInput, BiographyUncheckedUpdateInput>
    /**
     * Choose, which Biography to update.
     */
    where: BiographyWhereUniqueInput
  }

  /**
   * Biography updateMany
   */
  export type BiographyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Biographies.
     */
    data: XOR<BiographyUpdateManyMutationInput, BiographyUncheckedUpdateManyInput>
    /**
     * Filter which Biographies to update
     */
    where?: BiographyWhereInput
    /**
     * Limit how many Biographies to update.
     */
    limit?: number
  }

  /**
   * Biography updateManyAndReturn
   */
  export type BiographyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * The data used to update Biographies.
     */
    data: XOR<BiographyUpdateManyMutationInput, BiographyUncheckedUpdateManyInput>
    /**
     * Filter which Biographies to update
     */
    where?: BiographyWhereInput
    /**
     * Limit how many Biographies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Biography upsert
   */
  export type BiographyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * The filter to search for the Biography to update in case it exists.
     */
    where: BiographyWhereUniqueInput
    /**
     * In case the Biography found by the `where` argument doesn't exist, create a new Biography with this data.
     */
    create: XOR<BiographyCreateInput, BiographyUncheckedCreateInput>
    /**
     * In case the Biography was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BiographyUpdateInput, BiographyUncheckedUpdateInput>
  }

  /**
   * Biography delete
   */
  export type BiographyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
    /**
     * Filter which Biography to delete.
     */
    where: BiographyWhereUniqueInput
  }

  /**
   * Biography deleteMany
   */
  export type BiographyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Biographies to delete
     */
    where?: BiographyWhereInput
    /**
     * Limit how many Biographies to delete.
     */
    limit?: number
  }

  /**
   * Biography without action
   */
  export type BiographyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Biography
     */
    select?: BiographySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Biography
     */
    omit?: BiographyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiographyInclude<ExtArgs> | null
  }


  /**
   * Model Portfolio
   */

  export type AggregatePortfolio = {
    _count: PortfolioCountAggregateOutputType | null
    _avg: PortfolioAvgAggregateOutputType | null
    _sum: PortfolioSumAggregateOutputType | null
    _min: PortfolioMinAggregateOutputType | null
    _max: PortfolioMaxAggregateOutputType | null
  }

  export type PortfolioAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type PortfolioSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type PortfolioMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    externalUrl: string | null
    title: string | null
    description: string | null
  }

  export type PortfolioMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    externalUrl: string | null
    title: string | null
    description: string | null
  }

  export type PortfolioCountAggregateOutputType = {
    id: number
    resumeId: number
    externalUrl: number
    title: number
    description: number
    _all: number
  }


  export type PortfolioAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type PortfolioSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type PortfolioMinAggregateInputType = {
    id?: true
    resumeId?: true
    externalUrl?: true
    title?: true
    description?: true
  }

  export type PortfolioMaxAggregateInputType = {
    id?: true
    resumeId?: true
    externalUrl?: true
    title?: true
    description?: true
  }

  export type PortfolioCountAggregateInputType = {
    id?: true
    resumeId?: true
    externalUrl?: true
    title?: true
    description?: true
    _all?: true
  }

  export type PortfolioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portfolio to aggregate.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Portfolios
    **/
    _count?: true | PortfolioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PortfolioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PortfolioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PortfolioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PortfolioMaxAggregateInputType
  }

  export type GetPortfolioAggregateType<T extends PortfolioAggregateArgs> = {
        [P in keyof T & keyof AggregatePortfolio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePortfolio[P]>
      : GetScalarType<T[P], AggregatePortfolio[P]>
  }




  export type PortfolioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioWhereInput
    orderBy?: PortfolioOrderByWithAggregationInput | PortfolioOrderByWithAggregationInput[]
    by: PortfolioScalarFieldEnum[] | PortfolioScalarFieldEnum
    having?: PortfolioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PortfolioCountAggregateInputType | true
    _avg?: PortfolioAvgAggregateInputType
    _sum?: PortfolioSumAggregateInputType
    _min?: PortfolioMinAggregateInputType
    _max?: PortfolioMaxAggregateInputType
  }

  export type PortfolioGroupByOutputType = {
    id: number
    resumeId: number
    externalUrl: string
    title: string | null
    description: string | null
    _count: PortfolioCountAggregateOutputType | null
    _avg: PortfolioAvgAggregateOutputType | null
    _sum: PortfolioSumAggregateOutputType | null
    _min: PortfolioMinAggregateOutputType | null
    _max: PortfolioMaxAggregateOutputType | null
  }

  type GetPortfolioGroupByPayload<T extends PortfolioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PortfolioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PortfolioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PortfolioGroupByOutputType[P]>
            : GetScalarType<T[P], PortfolioGroupByOutputType[P]>
        }
      >
    >


  export type PortfolioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    externalUrl?: boolean
    title?: boolean
    description?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    externalUrl?: boolean
    title?: boolean
    description?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    externalUrl?: boolean
    title?: boolean
    description?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectScalar = {
    id?: boolean
    resumeId?: boolean
    externalUrl?: boolean
    title?: boolean
    description?: boolean
  }

  export type PortfolioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "externalUrl" | "title" | "description", ExtArgs["result"]["portfolio"]>
  export type PortfolioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type PortfolioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type PortfolioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $PortfolioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Portfolio"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      externalUrl: string
      title: string | null
      description: string | null
    }, ExtArgs["result"]["portfolio"]>
    composites: {}
  }

  type PortfolioGetPayload<S extends boolean | null | undefined | PortfolioDefaultArgs> = $Result.GetResult<Prisma.$PortfolioPayload, S>

  type PortfolioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PortfolioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PortfolioCountAggregateInputType | true
    }

  export interface PortfolioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Portfolio'], meta: { name: 'Portfolio' } }
    /**
     * Find zero or one Portfolio that matches the filter.
     * @param {PortfolioFindUniqueArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PortfolioFindUniqueArgs>(args: SelectSubset<T, PortfolioFindUniqueArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Portfolio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PortfolioFindUniqueOrThrowArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PortfolioFindUniqueOrThrowArgs>(args: SelectSubset<T, PortfolioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Portfolio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindFirstArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PortfolioFindFirstArgs>(args?: SelectSubset<T, PortfolioFindFirstArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Portfolio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindFirstOrThrowArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PortfolioFindFirstOrThrowArgs>(args?: SelectSubset<T, PortfolioFindFirstOrThrowArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Portfolios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Portfolios
     * const portfolios = await prisma.portfolio.findMany()
     * 
     * // Get first 10 Portfolios
     * const portfolios = await prisma.portfolio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PortfolioFindManyArgs>(args?: SelectSubset<T, PortfolioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Portfolio.
     * @param {PortfolioCreateArgs} args - Arguments to create a Portfolio.
     * @example
     * // Create one Portfolio
     * const Portfolio = await prisma.portfolio.create({
     *   data: {
     *     // ... data to create a Portfolio
     *   }
     * })
     * 
     */
    create<T extends PortfolioCreateArgs>(args: SelectSubset<T, PortfolioCreateArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Portfolios.
     * @param {PortfolioCreateManyArgs} args - Arguments to create many Portfolios.
     * @example
     * // Create many Portfolios
     * const portfolio = await prisma.portfolio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PortfolioCreateManyArgs>(args?: SelectSubset<T, PortfolioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Portfolios and returns the data saved in the database.
     * @param {PortfolioCreateManyAndReturnArgs} args - Arguments to create many Portfolios.
     * @example
     * // Create many Portfolios
     * const portfolio = await prisma.portfolio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Portfolios and only return the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PortfolioCreateManyAndReturnArgs>(args?: SelectSubset<T, PortfolioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Portfolio.
     * @param {PortfolioDeleteArgs} args - Arguments to delete one Portfolio.
     * @example
     * // Delete one Portfolio
     * const Portfolio = await prisma.portfolio.delete({
     *   where: {
     *     // ... filter to delete one Portfolio
     *   }
     * })
     * 
     */
    delete<T extends PortfolioDeleteArgs>(args: SelectSubset<T, PortfolioDeleteArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Portfolio.
     * @param {PortfolioUpdateArgs} args - Arguments to update one Portfolio.
     * @example
     * // Update one Portfolio
     * const portfolio = await prisma.portfolio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PortfolioUpdateArgs>(args: SelectSubset<T, PortfolioUpdateArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Portfolios.
     * @param {PortfolioDeleteManyArgs} args - Arguments to filter Portfolios to delete.
     * @example
     * // Delete a few Portfolios
     * const { count } = await prisma.portfolio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PortfolioDeleteManyArgs>(args?: SelectSubset<T, PortfolioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Portfolios
     * const portfolio = await prisma.portfolio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PortfolioUpdateManyArgs>(args: SelectSubset<T, PortfolioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portfolios and returns the data updated in the database.
     * @param {PortfolioUpdateManyAndReturnArgs} args - Arguments to update many Portfolios.
     * @example
     * // Update many Portfolios
     * const portfolio = await prisma.portfolio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Portfolios and only return the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PortfolioUpdateManyAndReturnArgs>(args: SelectSubset<T, PortfolioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Portfolio.
     * @param {PortfolioUpsertArgs} args - Arguments to update or create a Portfolio.
     * @example
     * // Update or create a Portfolio
     * const portfolio = await prisma.portfolio.upsert({
     *   create: {
     *     // ... data to create a Portfolio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Portfolio we want to update
     *   }
     * })
     */
    upsert<T extends PortfolioUpsertArgs>(args: SelectSubset<T, PortfolioUpsertArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Portfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioCountArgs} args - Arguments to filter Portfolios to count.
     * @example
     * // Count the number of Portfolios
     * const count = await prisma.portfolio.count({
     *   where: {
     *     // ... the filter for the Portfolios we want to count
     *   }
     * })
    **/
    count<T extends PortfolioCountArgs>(
      args?: Subset<T, PortfolioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PortfolioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Portfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PortfolioAggregateArgs>(args: Subset<T, PortfolioAggregateArgs>): Prisma.PrismaPromise<GetPortfolioAggregateType<T>>

    /**
     * Group by Portfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PortfolioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PortfolioGroupByArgs['orderBy'] }
        : { orderBy?: PortfolioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PortfolioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Portfolio model
   */
  readonly fields: PortfolioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Portfolio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PortfolioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Portfolio model
   */
  interface PortfolioFieldRefs {
    readonly id: FieldRef<"Portfolio", 'Int'>
    readonly resumeId: FieldRef<"Portfolio", 'Int'>
    readonly externalUrl: FieldRef<"Portfolio", 'String'>
    readonly title: FieldRef<"Portfolio", 'String'>
    readonly description: FieldRef<"Portfolio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Portfolio findUnique
   */
  export type PortfolioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio findUniqueOrThrow
   */
  export type PortfolioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio findFirst
   */
  export type PortfolioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portfolios.
     */
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio findFirstOrThrow
   */
  export type PortfolioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portfolios.
     */
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio findMany
   */
  export type PortfolioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolios to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio create
   */
  export type PortfolioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The data needed to create a Portfolio.
     */
    data: XOR<PortfolioCreateInput, PortfolioUncheckedCreateInput>
  }

  /**
   * Portfolio createMany
   */
  export type PortfolioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Portfolios.
     */
    data: PortfolioCreateManyInput | PortfolioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Portfolio createManyAndReturn
   */
  export type PortfolioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * The data used to create many Portfolios.
     */
    data: PortfolioCreateManyInput | PortfolioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Portfolio update
   */
  export type PortfolioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The data needed to update a Portfolio.
     */
    data: XOR<PortfolioUpdateInput, PortfolioUncheckedUpdateInput>
    /**
     * Choose, which Portfolio to update.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio updateMany
   */
  export type PortfolioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Portfolios.
     */
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyInput>
    /**
     * Filter which Portfolios to update
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to update.
     */
    limit?: number
  }

  /**
   * Portfolio updateManyAndReturn
   */
  export type PortfolioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * The data used to update Portfolios.
     */
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyInput>
    /**
     * Filter which Portfolios to update
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Portfolio upsert
   */
  export type PortfolioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The filter to search for the Portfolio to update in case it exists.
     */
    where: PortfolioWhereUniqueInput
    /**
     * In case the Portfolio found by the `where` argument doesn't exist, create a new Portfolio with this data.
     */
    create: XOR<PortfolioCreateInput, PortfolioUncheckedCreateInput>
    /**
     * In case the Portfolio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PortfolioUpdateInput, PortfolioUncheckedUpdateInput>
  }

  /**
   * Portfolio delete
   */
  export type PortfolioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter which Portfolio to delete.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio deleteMany
   */
  export type PortfolioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portfolios to delete
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to delete.
     */
    limit?: number
  }

  /**
   * Portfolio without action
   */
  export type PortfolioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
  }


  /**
   * Model ProfilePhoto
   */

  export type AggregateProfilePhoto = {
    _count: ProfilePhotoCountAggregateOutputType | null
    _avg: ProfilePhotoAvgAggregateOutputType | null
    _sum: ProfilePhotoSumAggregateOutputType | null
    _min: ProfilePhotoMinAggregateOutputType | null
    _max: ProfilePhotoMaxAggregateOutputType | null
  }

  export type ProfilePhotoAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ProfilePhotoSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ProfilePhotoMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    fileUrl: string | null
    type: string | null
  }

  export type ProfilePhotoMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    fileUrl: string | null
    type: string | null
  }

  export type ProfilePhotoCountAggregateOutputType = {
    id: number
    resumeId: number
    fileUrl: number
    type: number
    _all: number
  }


  export type ProfilePhotoAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ProfilePhotoSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ProfilePhotoMinAggregateInputType = {
    id?: true
    resumeId?: true
    fileUrl?: true
    type?: true
  }

  export type ProfilePhotoMaxAggregateInputType = {
    id?: true
    resumeId?: true
    fileUrl?: true
    type?: true
  }

  export type ProfilePhotoCountAggregateInputType = {
    id?: true
    resumeId?: true
    fileUrl?: true
    type?: true
    _all?: true
  }

  export type ProfilePhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePhoto to aggregate.
     */
    where?: ProfilePhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePhotos to fetch.
     */
    orderBy?: ProfilePhotoOrderByWithRelationInput | ProfilePhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilePhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfilePhotos
    **/
    _count?: true | ProfilePhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilePhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilePhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilePhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilePhotoMaxAggregateInputType
  }

  export type GetProfilePhotoAggregateType<T extends ProfilePhotoAggregateArgs> = {
        [P in keyof T & keyof AggregateProfilePhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfilePhoto[P]>
      : GetScalarType<T[P], AggregateProfilePhoto[P]>
  }




  export type ProfilePhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePhotoWhereInput
    orderBy?: ProfilePhotoOrderByWithAggregationInput | ProfilePhotoOrderByWithAggregationInput[]
    by: ProfilePhotoScalarFieldEnum[] | ProfilePhotoScalarFieldEnum
    having?: ProfilePhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilePhotoCountAggregateInputType | true
    _avg?: ProfilePhotoAvgAggregateInputType
    _sum?: ProfilePhotoSumAggregateInputType
    _min?: ProfilePhotoMinAggregateInputType
    _max?: ProfilePhotoMaxAggregateInputType
  }

  export type ProfilePhotoGroupByOutputType = {
    id: number
    resumeId: number
    fileUrl: string
    type: string | null
    _count: ProfilePhotoCountAggregateOutputType | null
    _avg: ProfilePhotoAvgAggregateOutputType | null
    _sum: ProfilePhotoSumAggregateOutputType | null
    _min: ProfilePhotoMinAggregateOutputType | null
    _max: ProfilePhotoMaxAggregateOutputType | null
  }

  type GetProfilePhotoGroupByPayload<T extends ProfilePhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilePhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilePhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilePhotoGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilePhotoGroupByOutputType[P]>
        }
      >
    >


  export type ProfilePhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    fileUrl?: boolean
    type?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilePhoto"]>

  export type ProfilePhotoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    fileUrl?: boolean
    type?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilePhoto"]>

  export type ProfilePhotoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    fileUrl?: boolean
    type?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilePhoto"]>

  export type ProfilePhotoSelectScalar = {
    id?: boolean
    resumeId?: boolean
    fileUrl?: boolean
    type?: boolean
  }

  export type ProfilePhotoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "fileUrl" | "type", ExtArgs["result"]["profilePhoto"]>
  export type ProfilePhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ProfilePhotoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ProfilePhotoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $ProfilePhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfilePhoto"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      fileUrl: string
      type: string | null
    }, ExtArgs["result"]["profilePhoto"]>
    composites: {}
  }

  type ProfilePhotoGetPayload<S extends boolean | null | undefined | ProfilePhotoDefaultArgs> = $Result.GetResult<Prisma.$ProfilePhotoPayload, S>

  type ProfilePhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfilePhotoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfilePhotoCountAggregateInputType | true
    }

  export interface ProfilePhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfilePhoto'], meta: { name: 'ProfilePhoto' } }
    /**
     * Find zero or one ProfilePhoto that matches the filter.
     * @param {ProfilePhotoFindUniqueArgs} args - Arguments to find a ProfilePhoto
     * @example
     * // Get one ProfilePhoto
     * const profilePhoto = await prisma.profilePhoto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfilePhotoFindUniqueArgs>(args: SelectSubset<T, ProfilePhotoFindUniqueArgs<ExtArgs>>): Prisma__ProfilePhotoClient<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfilePhoto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfilePhotoFindUniqueOrThrowArgs} args - Arguments to find a ProfilePhoto
     * @example
     * // Get one ProfilePhoto
     * const profilePhoto = await prisma.profilePhoto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfilePhotoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfilePhotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfilePhotoClient<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilePhoto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePhotoFindFirstArgs} args - Arguments to find a ProfilePhoto
     * @example
     * // Get one ProfilePhoto
     * const profilePhoto = await prisma.profilePhoto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfilePhotoFindFirstArgs>(args?: SelectSubset<T, ProfilePhotoFindFirstArgs<ExtArgs>>): Prisma__ProfilePhotoClient<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilePhoto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePhotoFindFirstOrThrowArgs} args - Arguments to find a ProfilePhoto
     * @example
     * // Get one ProfilePhoto
     * const profilePhoto = await prisma.profilePhoto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfilePhotoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfilePhotoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfilePhotoClient<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfilePhotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePhotoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfilePhotos
     * const profilePhotos = await prisma.profilePhoto.findMany()
     * 
     * // Get first 10 ProfilePhotos
     * const profilePhotos = await prisma.profilePhoto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilePhotoWithIdOnly = await prisma.profilePhoto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfilePhotoFindManyArgs>(args?: SelectSubset<T, ProfilePhotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfilePhoto.
     * @param {ProfilePhotoCreateArgs} args - Arguments to create a ProfilePhoto.
     * @example
     * // Create one ProfilePhoto
     * const ProfilePhoto = await prisma.profilePhoto.create({
     *   data: {
     *     // ... data to create a ProfilePhoto
     *   }
     * })
     * 
     */
    create<T extends ProfilePhotoCreateArgs>(args: SelectSubset<T, ProfilePhotoCreateArgs<ExtArgs>>): Prisma__ProfilePhotoClient<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfilePhotos.
     * @param {ProfilePhotoCreateManyArgs} args - Arguments to create many ProfilePhotos.
     * @example
     * // Create many ProfilePhotos
     * const profilePhoto = await prisma.profilePhoto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfilePhotoCreateManyArgs>(args?: SelectSubset<T, ProfilePhotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfilePhotos and returns the data saved in the database.
     * @param {ProfilePhotoCreateManyAndReturnArgs} args - Arguments to create many ProfilePhotos.
     * @example
     * // Create many ProfilePhotos
     * const profilePhoto = await prisma.profilePhoto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfilePhotos and only return the `id`
     * const profilePhotoWithIdOnly = await prisma.profilePhoto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfilePhotoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfilePhotoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfilePhoto.
     * @param {ProfilePhotoDeleteArgs} args - Arguments to delete one ProfilePhoto.
     * @example
     * // Delete one ProfilePhoto
     * const ProfilePhoto = await prisma.profilePhoto.delete({
     *   where: {
     *     // ... filter to delete one ProfilePhoto
     *   }
     * })
     * 
     */
    delete<T extends ProfilePhotoDeleteArgs>(args: SelectSubset<T, ProfilePhotoDeleteArgs<ExtArgs>>): Prisma__ProfilePhotoClient<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfilePhoto.
     * @param {ProfilePhotoUpdateArgs} args - Arguments to update one ProfilePhoto.
     * @example
     * // Update one ProfilePhoto
     * const profilePhoto = await prisma.profilePhoto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfilePhotoUpdateArgs>(args: SelectSubset<T, ProfilePhotoUpdateArgs<ExtArgs>>): Prisma__ProfilePhotoClient<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfilePhotos.
     * @param {ProfilePhotoDeleteManyArgs} args - Arguments to filter ProfilePhotos to delete.
     * @example
     * // Delete a few ProfilePhotos
     * const { count } = await prisma.profilePhoto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfilePhotoDeleteManyArgs>(args?: SelectSubset<T, ProfilePhotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfilePhotos
     * const profilePhoto = await prisma.profilePhoto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfilePhotoUpdateManyArgs>(args: SelectSubset<T, ProfilePhotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePhotos and returns the data updated in the database.
     * @param {ProfilePhotoUpdateManyAndReturnArgs} args - Arguments to update many ProfilePhotos.
     * @example
     * // Update many ProfilePhotos
     * const profilePhoto = await prisma.profilePhoto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfilePhotos and only return the `id`
     * const profilePhotoWithIdOnly = await prisma.profilePhoto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfilePhotoUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfilePhotoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfilePhoto.
     * @param {ProfilePhotoUpsertArgs} args - Arguments to update or create a ProfilePhoto.
     * @example
     * // Update or create a ProfilePhoto
     * const profilePhoto = await prisma.profilePhoto.upsert({
     *   create: {
     *     // ... data to create a ProfilePhoto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfilePhoto we want to update
     *   }
     * })
     */
    upsert<T extends ProfilePhotoUpsertArgs>(args: SelectSubset<T, ProfilePhotoUpsertArgs<ExtArgs>>): Prisma__ProfilePhotoClient<$Result.GetResult<Prisma.$ProfilePhotoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfilePhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePhotoCountArgs} args - Arguments to filter ProfilePhotos to count.
     * @example
     * // Count the number of ProfilePhotos
     * const count = await prisma.profilePhoto.count({
     *   where: {
     *     // ... the filter for the ProfilePhotos we want to count
     *   }
     * })
    **/
    count<T extends ProfilePhotoCountArgs>(
      args?: Subset<T, ProfilePhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilePhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfilePhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilePhotoAggregateArgs>(args: Subset<T, ProfilePhotoAggregateArgs>): Prisma.PrismaPromise<GetProfilePhotoAggregateType<T>>

    /**
     * Group by ProfilePhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilePhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilePhotoGroupByArgs['orderBy'] }
        : { orderBy?: ProfilePhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilePhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilePhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfilePhoto model
   */
  readonly fields: ProfilePhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfilePhoto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilePhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfilePhoto model
   */
  interface ProfilePhotoFieldRefs {
    readonly id: FieldRef<"ProfilePhoto", 'Int'>
    readonly resumeId: FieldRef<"ProfilePhoto", 'Int'>
    readonly fileUrl: FieldRef<"ProfilePhoto", 'String'>
    readonly type: FieldRef<"ProfilePhoto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProfilePhoto findUnique
   */
  export type ProfilePhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePhoto to fetch.
     */
    where: ProfilePhotoWhereUniqueInput
  }

  /**
   * ProfilePhoto findUniqueOrThrow
   */
  export type ProfilePhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePhoto to fetch.
     */
    where: ProfilePhotoWhereUniqueInput
  }

  /**
   * ProfilePhoto findFirst
   */
  export type ProfilePhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePhoto to fetch.
     */
    where?: ProfilePhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePhotos to fetch.
     */
    orderBy?: ProfilePhotoOrderByWithRelationInput | ProfilePhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePhotos.
     */
    cursor?: ProfilePhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePhotos.
     */
    distinct?: ProfilePhotoScalarFieldEnum | ProfilePhotoScalarFieldEnum[]
  }

  /**
   * ProfilePhoto findFirstOrThrow
   */
  export type ProfilePhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePhoto to fetch.
     */
    where?: ProfilePhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePhotos to fetch.
     */
    orderBy?: ProfilePhotoOrderByWithRelationInput | ProfilePhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePhotos.
     */
    cursor?: ProfilePhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePhotos.
     */
    distinct?: ProfilePhotoScalarFieldEnum | ProfilePhotoScalarFieldEnum[]
  }

  /**
   * ProfilePhoto findMany
   */
  export type ProfilePhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePhotos to fetch.
     */
    where?: ProfilePhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePhotos to fetch.
     */
    orderBy?: ProfilePhotoOrderByWithRelationInput | ProfilePhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfilePhotos.
     */
    cursor?: ProfilePhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePhotos.
     */
    skip?: number
    distinct?: ProfilePhotoScalarFieldEnum | ProfilePhotoScalarFieldEnum[]
  }

  /**
   * ProfilePhoto create
   */
  export type ProfilePhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfilePhoto.
     */
    data: XOR<ProfilePhotoCreateInput, ProfilePhotoUncheckedCreateInput>
  }

  /**
   * ProfilePhoto createMany
   */
  export type ProfilePhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfilePhotos.
     */
    data: ProfilePhotoCreateManyInput | ProfilePhotoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfilePhoto createManyAndReturn
   */
  export type ProfilePhotoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * The data used to create many ProfilePhotos.
     */
    data: ProfilePhotoCreateManyInput | ProfilePhotoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfilePhoto update
   */
  export type ProfilePhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfilePhoto.
     */
    data: XOR<ProfilePhotoUpdateInput, ProfilePhotoUncheckedUpdateInput>
    /**
     * Choose, which ProfilePhoto to update.
     */
    where: ProfilePhotoWhereUniqueInput
  }

  /**
   * ProfilePhoto updateMany
   */
  export type ProfilePhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfilePhotos.
     */
    data: XOR<ProfilePhotoUpdateManyMutationInput, ProfilePhotoUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePhotos to update
     */
    where?: ProfilePhotoWhereInput
    /**
     * Limit how many ProfilePhotos to update.
     */
    limit?: number
  }

  /**
   * ProfilePhoto updateManyAndReturn
   */
  export type ProfilePhotoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * The data used to update ProfilePhotos.
     */
    data: XOR<ProfilePhotoUpdateManyMutationInput, ProfilePhotoUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePhotos to update
     */
    where?: ProfilePhotoWhereInput
    /**
     * Limit how many ProfilePhotos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfilePhoto upsert
   */
  export type ProfilePhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfilePhoto to update in case it exists.
     */
    where: ProfilePhotoWhereUniqueInput
    /**
     * In case the ProfilePhoto found by the `where` argument doesn't exist, create a new ProfilePhoto with this data.
     */
    create: XOR<ProfilePhotoCreateInput, ProfilePhotoUncheckedCreateInput>
    /**
     * In case the ProfilePhoto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilePhotoUpdateInput, ProfilePhotoUncheckedUpdateInput>
  }

  /**
   * ProfilePhoto delete
   */
  export type ProfilePhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
    /**
     * Filter which ProfilePhoto to delete.
     */
    where: ProfilePhotoWhereUniqueInput
  }

  /**
   * ProfilePhoto deleteMany
   */
  export type ProfilePhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePhotos to delete
     */
    where?: ProfilePhotoWhereInput
    /**
     * Limit how many ProfilePhotos to delete.
     */
    limit?: number
  }

  /**
   * ProfilePhoto without action
   */
  export type ProfilePhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePhoto
     */
    select?: ProfilePhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePhoto
     */
    omit?: ProfilePhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePhotoInclude<ExtArgs> | null
  }


  /**
   * Model ResumeVersion
   */

  export type AggregateResumeVersion = {
    _count: ResumeVersionCountAggregateOutputType | null
    _avg: ResumeVersionAvgAggregateOutputType | null
    _sum: ResumeVersionSumAggregateOutputType | null
    _min: ResumeVersionMinAggregateOutputType | null
    _max: ResumeVersionMaxAggregateOutputType | null
  }

  export type ResumeVersionAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ResumeVersionSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ResumeVersionMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    createdAt: Date | null
    version: string | null
    note: string | null
    isCurrent: boolean | null
  }

  export type ResumeVersionMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    createdAt: Date | null
    version: string | null
    note: string | null
    isCurrent: boolean | null
  }

  export type ResumeVersionCountAggregateOutputType = {
    id: number
    resumeId: number
    snapshot: number
    createdAt: number
    version: number
    note: number
    isCurrent: number
    _all: number
  }


  export type ResumeVersionAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ResumeVersionSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ResumeVersionMinAggregateInputType = {
    id?: true
    resumeId?: true
    createdAt?: true
    version?: true
    note?: true
    isCurrent?: true
  }

  export type ResumeVersionMaxAggregateInputType = {
    id?: true
    resumeId?: true
    createdAt?: true
    version?: true
    note?: true
    isCurrent?: true
  }

  export type ResumeVersionCountAggregateInputType = {
    id?: true
    resumeId?: true
    snapshot?: true
    createdAt?: true
    version?: true
    note?: true
    isCurrent?: true
    _all?: true
  }

  export type ResumeVersionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeVersion to aggregate.
     */
    where?: ResumeVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeVersions to fetch.
     */
    orderBy?: ResumeVersionOrderByWithRelationInput | ResumeVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeVersions
    **/
    _count?: true | ResumeVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeVersionMaxAggregateInputType
  }

  export type GetResumeVersionAggregateType<T extends ResumeVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeVersion[P]>
      : GetScalarType<T[P], AggregateResumeVersion[P]>
  }




  export type ResumeVersionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeVersionWhereInput
    orderBy?: ResumeVersionOrderByWithAggregationInput | ResumeVersionOrderByWithAggregationInput[]
    by: ResumeVersionScalarFieldEnum[] | ResumeVersionScalarFieldEnum
    having?: ResumeVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeVersionCountAggregateInputType | true
    _avg?: ResumeVersionAvgAggregateInputType
    _sum?: ResumeVersionSumAggregateInputType
    _min?: ResumeVersionMinAggregateInputType
    _max?: ResumeVersionMaxAggregateInputType
  }

  export type ResumeVersionGroupByOutputType = {
    id: number
    resumeId: number
    snapshot: JsonValue
    createdAt: Date
    version: string | null
    note: string | null
    isCurrent: boolean
    _count: ResumeVersionCountAggregateOutputType | null
    _avg: ResumeVersionAvgAggregateOutputType | null
    _sum: ResumeVersionSumAggregateOutputType | null
    _min: ResumeVersionMinAggregateOutputType | null
    _max: ResumeVersionMaxAggregateOutputType | null
  }

  type GetResumeVersionGroupByPayload<T extends ResumeVersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeVersionGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeVersionGroupByOutputType[P]>
        }
      >
    >


  export type ResumeVersionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    snapshot?: boolean
    createdAt?: boolean
    version?: boolean
    note?: boolean
    isCurrent?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeVersion"]>

  export type ResumeVersionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    snapshot?: boolean
    createdAt?: boolean
    version?: boolean
    note?: boolean
    isCurrent?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeVersion"]>

  export type ResumeVersionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    snapshot?: boolean
    createdAt?: boolean
    version?: boolean
    note?: boolean
    isCurrent?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeVersion"]>

  export type ResumeVersionSelectScalar = {
    id?: boolean
    resumeId?: boolean
    snapshot?: boolean
    createdAt?: boolean
    version?: boolean
    note?: boolean
    isCurrent?: boolean
  }

  export type ResumeVersionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "snapshot" | "createdAt" | "version" | "note" | "isCurrent", ExtArgs["result"]["resumeVersion"]>
  export type ResumeVersionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumeVersionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumeVersionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $ResumeVersionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeVersion"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      snapshot: Prisma.JsonValue
      createdAt: Date
      version: string | null
      note: string | null
      isCurrent: boolean
    }, ExtArgs["result"]["resumeVersion"]>
    composites: {}
  }

  type ResumeVersionGetPayload<S extends boolean | null | undefined | ResumeVersionDefaultArgs> = $Result.GetResult<Prisma.$ResumeVersionPayload, S>

  type ResumeVersionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeVersionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeVersionCountAggregateInputType | true
    }

  export interface ResumeVersionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeVersion'], meta: { name: 'ResumeVersion' } }
    /**
     * Find zero or one ResumeVersion that matches the filter.
     * @param {ResumeVersionFindUniqueArgs} args - Arguments to find a ResumeVersion
     * @example
     * // Get one ResumeVersion
     * const resumeVersion = await prisma.resumeVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeVersionFindUniqueArgs>(args: SelectSubset<T, ResumeVersionFindUniqueArgs<ExtArgs>>): Prisma__ResumeVersionClient<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeVersion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeVersionFindUniqueOrThrowArgs} args - Arguments to find a ResumeVersion
     * @example
     * // Get one ResumeVersion
     * const resumeVersion = await prisma.resumeVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeVersionFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeVersionClient<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVersionFindFirstArgs} args - Arguments to find a ResumeVersion
     * @example
     * // Get one ResumeVersion
     * const resumeVersion = await prisma.resumeVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeVersionFindFirstArgs>(args?: SelectSubset<T, ResumeVersionFindFirstArgs<ExtArgs>>): Prisma__ResumeVersionClient<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeVersion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVersionFindFirstOrThrowArgs} args - Arguments to find a ResumeVersion
     * @example
     * // Get one ResumeVersion
     * const resumeVersion = await prisma.resumeVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeVersionFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeVersionClient<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVersionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeVersions
     * const resumeVersions = await prisma.resumeVersion.findMany()
     * 
     * // Get first 10 ResumeVersions
     * const resumeVersions = await prisma.resumeVersion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeVersionWithIdOnly = await prisma.resumeVersion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeVersionFindManyArgs>(args?: SelectSubset<T, ResumeVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeVersion.
     * @param {ResumeVersionCreateArgs} args - Arguments to create a ResumeVersion.
     * @example
     * // Create one ResumeVersion
     * const ResumeVersion = await prisma.resumeVersion.create({
     *   data: {
     *     // ... data to create a ResumeVersion
     *   }
     * })
     * 
     */
    create<T extends ResumeVersionCreateArgs>(args: SelectSubset<T, ResumeVersionCreateArgs<ExtArgs>>): Prisma__ResumeVersionClient<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeVersions.
     * @param {ResumeVersionCreateManyArgs} args - Arguments to create many ResumeVersions.
     * @example
     * // Create many ResumeVersions
     * const resumeVersion = await prisma.resumeVersion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeVersionCreateManyArgs>(args?: SelectSubset<T, ResumeVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeVersions and returns the data saved in the database.
     * @param {ResumeVersionCreateManyAndReturnArgs} args - Arguments to create many ResumeVersions.
     * @example
     * // Create many ResumeVersions
     * const resumeVersion = await prisma.resumeVersion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeVersions and only return the `id`
     * const resumeVersionWithIdOnly = await prisma.resumeVersion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeVersionCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeVersion.
     * @param {ResumeVersionDeleteArgs} args - Arguments to delete one ResumeVersion.
     * @example
     * // Delete one ResumeVersion
     * const ResumeVersion = await prisma.resumeVersion.delete({
     *   where: {
     *     // ... filter to delete one ResumeVersion
     *   }
     * })
     * 
     */
    delete<T extends ResumeVersionDeleteArgs>(args: SelectSubset<T, ResumeVersionDeleteArgs<ExtArgs>>): Prisma__ResumeVersionClient<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeVersion.
     * @param {ResumeVersionUpdateArgs} args - Arguments to update one ResumeVersion.
     * @example
     * // Update one ResumeVersion
     * const resumeVersion = await prisma.resumeVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeVersionUpdateArgs>(args: SelectSubset<T, ResumeVersionUpdateArgs<ExtArgs>>): Prisma__ResumeVersionClient<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeVersions.
     * @param {ResumeVersionDeleteManyArgs} args - Arguments to filter ResumeVersions to delete.
     * @example
     * // Delete a few ResumeVersions
     * const { count } = await prisma.resumeVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeVersionDeleteManyArgs>(args?: SelectSubset<T, ResumeVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeVersions
     * const resumeVersion = await prisma.resumeVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeVersionUpdateManyArgs>(args: SelectSubset<T, ResumeVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeVersions and returns the data updated in the database.
     * @param {ResumeVersionUpdateManyAndReturnArgs} args - Arguments to update many ResumeVersions.
     * @example
     * // Update many ResumeVersions
     * const resumeVersion = await prisma.resumeVersion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeVersions and only return the `id`
     * const resumeVersionWithIdOnly = await prisma.resumeVersion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeVersionUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeVersionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeVersion.
     * @param {ResumeVersionUpsertArgs} args - Arguments to update or create a ResumeVersion.
     * @example
     * // Update or create a ResumeVersion
     * const resumeVersion = await prisma.resumeVersion.upsert({
     *   create: {
     *     // ... data to create a ResumeVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeVersion we want to update
     *   }
     * })
     */
    upsert<T extends ResumeVersionUpsertArgs>(args: SelectSubset<T, ResumeVersionUpsertArgs<ExtArgs>>): Prisma__ResumeVersionClient<$Result.GetResult<Prisma.$ResumeVersionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVersionCountArgs} args - Arguments to filter ResumeVersions to count.
     * @example
     * // Count the number of ResumeVersions
     * const count = await prisma.resumeVersion.count({
     *   where: {
     *     // ... the filter for the ResumeVersions we want to count
     *   }
     * })
    **/
    count<T extends ResumeVersionCountArgs>(
      args?: Subset<T, ResumeVersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeVersionAggregateArgs>(args: Subset<T, ResumeVersionAggregateArgs>): Prisma.PrismaPromise<GetResumeVersionAggregateType<T>>

    /**
     * Group by ResumeVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeVersionGroupByArgs['orderBy'] }
        : { orderBy?: ResumeVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeVersion model
   */
  readonly fields: ResumeVersionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeVersionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeVersion model
   */
  interface ResumeVersionFieldRefs {
    readonly id: FieldRef<"ResumeVersion", 'Int'>
    readonly resumeId: FieldRef<"ResumeVersion", 'Int'>
    readonly snapshot: FieldRef<"ResumeVersion", 'Json'>
    readonly createdAt: FieldRef<"ResumeVersion", 'DateTime'>
    readonly version: FieldRef<"ResumeVersion", 'String'>
    readonly note: FieldRef<"ResumeVersion", 'String'>
    readonly isCurrent: FieldRef<"ResumeVersion", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ResumeVersion findUnique
   */
  export type ResumeVersionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVersion to fetch.
     */
    where: ResumeVersionWhereUniqueInput
  }

  /**
   * ResumeVersion findUniqueOrThrow
   */
  export type ResumeVersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVersion to fetch.
     */
    where: ResumeVersionWhereUniqueInput
  }

  /**
   * ResumeVersion findFirst
   */
  export type ResumeVersionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVersion to fetch.
     */
    where?: ResumeVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeVersions to fetch.
     */
    orderBy?: ResumeVersionOrderByWithRelationInput | ResumeVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeVersions.
     */
    cursor?: ResumeVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeVersions.
     */
    distinct?: ResumeVersionScalarFieldEnum | ResumeVersionScalarFieldEnum[]
  }

  /**
   * ResumeVersion findFirstOrThrow
   */
  export type ResumeVersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVersion to fetch.
     */
    where?: ResumeVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeVersions to fetch.
     */
    orderBy?: ResumeVersionOrderByWithRelationInput | ResumeVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeVersions.
     */
    cursor?: ResumeVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeVersions.
     */
    distinct?: ResumeVersionScalarFieldEnum | ResumeVersionScalarFieldEnum[]
  }

  /**
   * ResumeVersion findMany
   */
  export type ResumeVersionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVersions to fetch.
     */
    where?: ResumeVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeVersions to fetch.
     */
    orderBy?: ResumeVersionOrderByWithRelationInput | ResumeVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeVersions.
     */
    cursor?: ResumeVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeVersions.
     */
    skip?: number
    distinct?: ResumeVersionScalarFieldEnum | ResumeVersionScalarFieldEnum[]
  }

  /**
   * ResumeVersion create
   */
  export type ResumeVersionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeVersion.
     */
    data: XOR<ResumeVersionCreateInput, ResumeVersionUncheckedCreateInput>
  }

  /**
   * ResumeVersion createMany
   */
  export type ResumeVersionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeVersions.
     */
    data: ResumeVersionCreateManyInput | ResumeVersionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeVersion createManyAndReturn
   */
  export type ResumeVersionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeVersions.
     */
    data: ResumeVersionCreateManyInput | ResumeVersionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeVersion update
   */
  export type ResumeVersionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeVersion.
     */
    data: XOR<ResumeVersionUpdateInput, ResumeVersionUncheckedUpdateInput>
    /**
     * Choose, which ResumeVersion to update.
     */
    where: ResumeVersionWhereUniqueInput
  }

  /**
   * ResumeVersion updateMany
   */
  export type ResumeVersionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeVersions.
     */
    data: XOR<ResumeVersionUpdateManyMutationInput, ResumeVersionUncheckedUpdateManyInput>
    /**
     * Filter which ResumeVersions to update
     */
    where?: ResumeVersionWhereInput
    /**
     * Limit how many ResumeVersions to update.
     */
    limit?: number
  }

  /**
   * ResumeVersion updateManyAndReturn
   */
  export type ResumeVersionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * The data used to update ResumeVersions.
     */
    data: XOR<ResumeVersionUpdateManyMutationInput, ResumeVersionUncheckedUpdateManyInput>
    /**
     * Filter which ResumeVersions to update
     */
    where?: ResumeVersionWhereInput
    /**
     * Limit how many ResumeVersions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeVersion upsert
   */
  export type ResumeVersionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeVersion to update in case it exists.
     */
    where: ResumeVersionWhereUniqueInput
    /**
     * In case the ResumeVersion found by the `where` argument doesn't exist, create a new ResumeVersion with this data.
     */
    create: XOR<ResumeVersionCreateInput, ResumeVersionUncheckedCreateInput>
    /**
     * In case the ResumeVersion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeVersionUpdateInput, ResumeVersionUncheckedUpdateInput>
  }

  /**
   * ResumeVersion delete
   */
  export type ResumeVersionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
    /**
     * Filter which ResumeVersion to delete.
     */
    where: ResumeVersionWhereUniqueInput
  }

  /**
   * ResumeVersion deleteMany
   */
  export type ResumeVersionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeVersions to delete
     */
    where?: ResumeVersionWhereInput
    /**
     * Limit how many ResumeVersions to delete.
     */
    limit?: number
  }

  /**
   * ResumeVersion without action
   */
  export type ResumeVersionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVersion
     */
    select?: ResumeVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVersion
     */
    omit?: ResumeVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVersionInclude<ExtArgs> | null
  }


  /**
   * Model ResumeVisibility
   */

  export type AggregateResumeVisibility = {
    _count: ResumeVisibilityCountAggregateOutputType | null
    _avg: ResumeVisibilityAvgAggregateOutputType | null
    _sum: ResumeVisibilitySumAggregateOutputType | null
    _min: ResumeVisibilityMinAggregateOutputType | null
    _max: ResumeVisibilityMaxAggregateOutputType | null
  }

  export type ResumeVisibilityAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ResumeVisibilitySumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ResumeVisibilityMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    isPublic: boolean | null
    allowedAudience: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type ResumeVisibilityMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    isPublic: boolean | null
    allowedAudience: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type ResumeVisibilityCountAggregateOutputType = {
    id: number
    resumeId: number
    isPublic: number
    allowedAudience: number
    startDate: number
    endDate: number
    _all: number
  }


  export type ResumeVisibilityAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ResumeVisibilitySumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ResumeVisibilityMinAggregateInputType = {
    id?: true
    resumeId?: true
    isPublic?: true
    allowedAudience?: true
    startDate?: true
    endDate?: true
  }

  export type ResumeVisibilityMaxAggregateInputType = {
    id?: true
    resumeId?: true
    isPublic?: true
    allowedAudience?: true
    startDate?: true
    endDate?: true
  }

  export type ResumeVisibilityCountAggregateInputType = {
    id?: true
    resumeId?: true
    isPublic?: true
    allowedAudience?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type ResumeVisibilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeVisibility to aggregate.
     */
    where?: ResumeVisibilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeVisibilities to fetch.
     */
    orderBy?: ResumeVisibilityOrderByWithRelationInput | ResumeVisibilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeVisibilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeVisibilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeVisibilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeVisibilities
    **/
    _count?: true | ResumeVisibilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeVisibilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeVisibilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeVisibilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeVisibilityMaxAggregateInputType
  }

  export type GetResumeVisibilityAggregateType<T extends ResumeVisibilityAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeVisibility]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeVisibility[P]>
      : GetScalarType<T[P], AggregateResumeVisibility[P]>
  }




  export type ResumeVisibilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeVisibilityWhereInput
    orderBy?: ResumeVisibilityOrderByWithAggregationInput | ResumeVisibilityOrderByWithAggregationInput[]
    by: ResumeVisibilityScalarFieldEnum[] | ResumeVisibilityScalarFieldEnum
    having?: ResumeVisibilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeVisibilityCountAggregateInputType | true
    _avg?: ResumeVisibilityAvgAggregateInputType
    _sum?: ResumeVisibilitySumAggregateInputType
    _min?: ResumeVisibilityMinAggregateInputType
    _max?: ResumeVisibilityMaxAggregateInputType
  }

  export type ResumeVisibilityGroupByOutputType = {
    id: number
    resumeId: number
    isPublic: boolean
    allowedAudience: string | null
    startDate: Date | null
    endDate: Date | null
    _count: ResumeVisibilityCountAggregateOutputType | null
    _avg: ResumeVisibilityAvgAggregateOutputType | null
    _sum: ResumeVisibilitySumAggregateOutputType | null
    _min: ResumeVisibilityMinAggregateOutputType | null
    _max: ResumeVisibilityMaxAggregateOutputType | null
  }

  type GetResumeVisibilityGroupByPayload<T extends ResumeVisibilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeVisibilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeVisibilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeVisibilityGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeVisibilityGroupByOutputType[P]>
        }
      >
    >


  export type ResumeVisibilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    isPublic?: boolean
    allowedAudience?: boolean
    startDate?: boolean
    endDate?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeVisibility"]>

  export type ResumeVisibilitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    isPublic?: boolean
    allowedAudience?: boolean
    startDate?: boolean
    endDate?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeVisibility"]>

  export type ResumeVisibilitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    isPublic?: boolean
    allowedAudience?: boolean
    startDate?: boolean
    endDate?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeVisibility"]>

  export type ResumeVisibilitySelectScalar = {
    id?: boolean
    resumeId?: boolean
    isPublic?: boolean
    allowedAudience?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type ResumeVisibilityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "isPublic" | "allowedAudience" | "startDate" | "endDate", ExtArgs["result"]["resumeVisibility"]>
  export type ResumeVisibilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumeVisibilityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumeVisibilityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $ResumeVisibilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeVisibility"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      isPublic: boolean
      allowedAudience: string | null
      startDate: Date | null
      endDate: Date | null
    }, ExtArgs["result"]["resumeVisibility"]>
    composites: {}
  }

  type ResumeVisibilityGetPayload<S extends boolean | null | undefined | ResumeVisibilityDefaultArgs> = $Result.GetResult<Prisma.$ResumeVisibilityPayload, S>

  type ResumeVisibilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeVisibilityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeVisibilityCountAggregateInputType | true
    }

  export interface ResumeVisibilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeVisibility'], meta: { name: 'ResumeVisibility' } }
    /**
     * Find zero or one ResumeVisibility that matches the filter.
     * @param {ResumeVisibilityFindUniqueArgs} args - Arguments to find a ResumeVisibility
     * @example
     * // Get one ResumeVisibility
     * const resumeVisibility = await prisma.resumeVisibility.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeVisibilityFindUniqueArgs>(args: SelectSubset<T, ResumeVisibilityFindUniqueArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeVisibility that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeVisibilityFindUniqueOrThrowArgs} args - Arguments to find a ResumeVisibility
     * @example
     * // Get one ResumeVisibility
     * const resumeVisibility = await prisma.resumeVisibility.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeVisibilityFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeVisibilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeVisibility that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVisibilityFindFirstArgs} args - Arguments to find a ResumeVisibility
     * @example
     * // Get one ResumeVisibility
     * const resumeVisibility = await prisma.resumeVisibility.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeVisibilityFindFirstArgs>(args?: SelectSubset<T, ResumeVisibilityFindFirstArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeVisibility that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVisibilityFindFirstOrThrowArgs} args - Arguments to find a ResumeVisibility
     * @example
     * // Get one ResumeVisibility
     * const resumeVisibility = await prisma.resumeVisibility.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeVisibilityFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeVisibilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeVisibilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVisibilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeVisibilities
     * const resumeVisibilities = await prisma.resumeVisibility.findMany()
     * 
     * // Get first 10 ResumeVisibilities
     * const resumeVisibilities = await prisma.resumeVisibility.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeVisibilityWithIdOnly = await prisma.resumeVisibility.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeVisibilityFindManyArgs>(args?: SelectSubset<T, ResumeVisibilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeVisibility.
     * @param {ResumeVisibilityCreateArgs} args - Arguments to create a ResumeVisibility.
     * @example
     * // Create one ResumeVisibility
     * const ResumeVisibility = await prisma.resumeVisibility.create({
     *   data: {
     *     // ... data to create a ResumeVisibility
     *   }
     * })
     * 
     */
    create<T extends ResumeVisibilityCreateArgs>(args: SelectSubset<T, ResumeVisibilityCreateArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeVisibilities.
     * @param {ResumeVisibilityCreateManyArgs} args - Arguments to create many ResumeVisibilities.
     * @example
     * // Create many ResumeVisibilities
     * const resumeVisibility = await prisma.resumeVisibility.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeVisibilityCreateManyArgs>(args?: SelectSubset<T, ResumeVisibilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeVisibilities and returns the data saved in the database.
     * @param {ResumeVisibilityCreateManyAndReturnArgs} args - Arguments to create many ResumeVisibilities.
     * @example
     * // Create many ResumeVisibilities
     * const resumeVisibility = await prisma.resumeVisibility.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeVisibilities and only return the `id`
     * const resumeVisibilityWithIdOnly = await prisma.resumeVisibility.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeVisibilityCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeVisibilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeVisibility.
     * @param {ResumeVisibilityDeleteArgs} args - Arguments to delete one ResumeVisibility.
     * @example
     * // Delete one ResumeVisibility
     * const ResumeVisibility = await prisma.resumeVisibility.delete({
     *   where: {
     *     // ... filter to delete one ResumeVisibility
     *   }
     * })
     * 
     */
    delete<T extends ResumeVisibilityDeleteArgs>(args: SelectSubset<T, ResumeVisibilityDeleteArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeVisibility.
     * @param {ResumeVisibilityUpdateArgs} args - Arguments to update one ResumeVisibility.
     * @example
     * // Update one ResumeVisibility
     * const resumeVisibility = await prisma.resumeVisibility.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeVisibilityUpdateArgs>(args: SelectSubset<T, ResumeVisibilityUpdateArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeVisibilities.
     * @param {ResumeVisibilityDeleteManyArgs} args - Arguments to filter ResumeVisibilities to delete.
     * @example
     * // Delete a few ResumeVisibilities
     * const { count } = await prisma.resumeVisibility.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeVisibilityDeleteManyArgs>(args?: SelectSubset<T, ResumeVisibilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeVisibilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVisibilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeVisibilities
     * const resumeVisibility = await prisma.resumeVisibility.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeVisibilityUpdateManyArgs>(args: SelectSubset<T, ResumeVisibilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeVisibilities and returns the data updated in the database.
     * @param {ResumeVisibilityUpdateManyAndReturnArgs} args - Arguments to update many ResumeVisibilities.
     * @example
     * // Update many ResumeVisibilities
     * const resumeVisibility = await prisma.resumeVisibility.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeVisibilities and only return the `id`
     * const resumeVisibilityWithIdOnly = await prisma.resumeVisibility.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeVisibilityUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeVisibilityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeVisibility.
     * @param {ResumeVisibilityUpsertArgs} args - Arguments to update or create a ResumeVisibility.
     * @example
     * // Update or create a ResumeVisibility
     * const resumeVisibility = await prisma.resumeVisibility.upsert({
     *   create: {
     *     // ... data to create a ResumeVisibility
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeVisibility we want to update
     *   }
     * })
     */
    upsert<T extends ResumeVisibilityUpsertArgs>(args: SelectSubset<T, ResumeVisibilityUpsertArgs<ExtArgs>>): Prisma__ResumeVisibilityClient<$Result.GetResult<Prisma.$ResumeVisibilityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeVisibilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVisibilityCountArgs} args - Arguments to filter ResumeVisibilities to count.
     * @example
     * // Count the number of ResumeVisibilities
     * const count = await prisma.resumeVisibility.count({
     *   where: {
     *     // ... the filter for the ResumeVisibilities we want to count
     *   }
     * })
    **/
    count<T extends ResumeVisibilityCountArgs>(
      args?: Subset<T, ResumeVisibilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeVisibilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeVisibility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVisibilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeVisibilityAggregateArgs>(args: Subset<T, ResumeVisibilityAggregateArgs>): Prisma.PrismaPromise<GetResumeVisibilityAggregateType<T>>

    /**
     * Group by ResumeVisibility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeVisibilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeVisibilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeVisibilityGroupByArgs['orderBy'] }
        : { orderBy?: ResumeVisibilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeVisibilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeVisibilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeVisibility model
   */
  readonly fields: ResumeVisibilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeVisibility.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeVisibilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeVisibility model
   */
  interface ResumeVisibilityFieldRefs {
    readonly id: FieldRef<"ResumeVisibility", 'Int'>
    readonly resumeId: FieldRef<"ResumeVisibility", 'Int'>
    readonly isPublic: FieldRef<"ResumeVisibility", 'Boolean'>
    readonly allowedAudience: FieldRef<"ResumeVisibility", 'String'>
    readonly startDate: FieldRef<"ResumeVisibility", 'DateTime'>
    readonly endDate: FieldRef<"ResumeVisibility", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeVisibility findUnique
   */
  export type ResumeVisibilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVisibility to fetch.
     */
    where: ResumeVisibilityWhereUniqueInput
  }

  /**
   * ResumeVisibility findUniqueOrThrow
   */
  export type ResumeVisibilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVisibility to fetch.
     */
    where: ResumeVisibilityWhereUniqueInput
  }

  /**
   * ResumeVisibility findFirst
   */
  export type ResumeVisibilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVisibility to fetch.
     */
    where?: ResumeVisibilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeVisibilities to fetch.
     */
    orderBy?: ResumeVisibilityOrderByWithRelationInput | ResumeVisibilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeVisibilities.
     */
    cursor?: ResumeVisibilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeVisibilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeVisibilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeVisibilities.
     */
    distinct?: ResumeVisibilityScalarFieldEnum | ResumeVisibilityScalarFieldEnum[]
  }

  /**
   * ResumeVisibility findFirstOrThrow
   */
  export type ResumeVisibilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVisibility to fetch.
     */
    where?: ResumeVisibilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeVisibilities to fetch.
     */
    orderBy?: ResumeVisibilityOrderByWithRelationInput | ResumeVisibilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeVisibilities.
     */
    cursor?: ResumeVisibilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeVisibilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeVisibilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeVisibilities.
     */
    distinct?: ResumeVisibilityScalarFieldEnum | ResumeVisibilityScalarFieldEnum[]
  }

  /**
   * ResumeVisibility findMany
   */
  export type ResumeVisibilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * Filter, which ResumeVisibilities to fetch.
     */
    where?: ResumeVisibilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeVisibilities to fetch.
     */
    orderBy?: ResumeVisibilityOrderByWithRelationInput | ResumeVisibilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeVisibilities.
     */
    cursor?: ResumeVisibilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeVisibilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeVisibilities.
     */
    skip?: number
    distinct?: ResumeVisibilityScalarFieldEnum | ResumeVisibilityScalarFieldEnum[]
  }

  /**
   * ResumeVisibility create
   */
  export type ResumeVisibilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeVisibility.
     */
    data: XOR<ResumeVisibilityCreateInput, ResumeVisibilityUncheckedCreateInput>
  }

  /**
   * ResumeVisibility createMany
   */
  export type ResumeVisibilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeVisibilities.
     */
    data: ResumeVisibilityCreateManyInput | ResumeVisibilityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeVisibility createManyAndReturn
   */
  export type ResumeVisibilityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeVisibilities.
     */
    data: ResumeVisibilityCreateManyInput | ResumeVisibilityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeVisibility update
   */
  export type ResumeVisibilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeVisibility.
     */
    data: XOR<ResumeVisibilityUpdateInput, ResumeVisibilityUncheckedUpdateInput>
    /**
     * Choose, which ResumeVisibility to update.
     */
    where: ResumeVisibilityWhereUniqueInput
  }

  /**
   * ResumeVisibility updateMany
   */
  export type ResumeVisibilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeVisibilities.
     */
    data: XOR<ResumeVisibilityUpdateManyMutationInput, ResumeVisibilityUncheckedUpdateManyInput>
    /**
     * Filter which ResumeVisibilities to update
     */
    where?: ResumeVisibilityWhereInput
    /**
     * Limit how many ResumeVisibilities to update.
     */
    limit?: number
  }

  /**
   * ResumeVisibility updateManyAndReturn
   */
  export type ResumeVisibilityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * The data used to update ResumeVisibilities.
     */
    data: XOR<ResumeVisibilityUpdateManyMutationInput, ResumeVisibilityUncheckedUpdateManyInput>
    /**
     * Filter which ResumeVisibilities to update
     */
    where?: ResumeVisibilityWhereInput
    /**
     * Limit how many ResumeVisibilities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeVisibility upsert
   */
  export type ResumeVisibilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeVisibility to update in case it exists.
     */
    where: ResumeVisibilityWhereUniqueInput
    /**
     * In case the ResumeVisibility found by the `where` argument doesn't exist, create a new ResumeVisibility with this data.
     */
    create: XOR<ResumeVisibilityCreateInput, ResumeVisibilityUncheckedCreateInput>
    /**
     * In case the ResumeVisibility was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeVisibilityUpdateInput, ResumeVisibilityUncheckedUpdateInput>
  }

  /**
   * ResumeVisibility delete
   */
  export type ResumeVisibilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
    /**
     * Filter which ResumeVisibility to delete.
     */
    where: ResumeVisibilityWhereUniqueInput
  }

  /**
   * ResumeVisibility deleteMany
   */
  export type ResumeVisibilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeVisibilities to delete
     */
    where?: ResumeVisibilityWhereInput
    /**
     * Limit how many ResumeVisibilities to delete.
     */
    limit?: number
  }

  /**
   * ResumeVisibility without action
   */
  export type ResumeVisibilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeVisibility
     */
    select?: ResumeVisibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeVisibility
     */
    omit?: ResumeVisibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeVisibilityInclude<ExtArgs> | null
  }


  /**
   * Model ResumeReviewStatus
   */

  export type AggregateResumeReviewStatus = {
    _count: ResumeReviewStatusCountAggregateOutputType | null
    _avg: ResumeReviewStatusAvgAggregateOutputType | null
    _sum: ResumeReviewStatusSumAggregateOutputType | null
    _min: ResumeReviewStatusMinAggregateOutputType | null
    _max: ResumeReviewStatusMaxAggregateOutputType | null
  }

  export type ResumeReviewStatusAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
    viewerId: number | null
  }

  export type ResumeReviewStatusSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
    viewerId: number | null
  }

  export type ResumeReviewStatusMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    viewerId: number | null
    viewerType: string | null
    viewedAt: Date | null
  }

  export type ResumeReviewStatusMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    viewerId: number | null
    viewerType: string | null
    viewedAt: Date | null
  }

  export type ResumeReviewStatusCountAggregateOutputType = {
    id: number
    resumeId: number
    viewerId: number
    viewerType: number
    viewedAt: number
    _all: number
  }


  export type ResumeReviewStatusAvgAggregateInputType = {
    id?: true
    resumeId?: true
    viewerId?: true
  }

  export type ResumeReviewStatusSumAggregateInputType = {
    id?: true
    resumeId?: true
    viewerId?: true
  }

  export type ResumeReviewStatusMinAggregateInputType = {
    id?: true
    resumeId?: true
    viewerId?: true
    viewerType?: true
    viewedAt?: true
  }

  export type ResumeReviewStatusMaxAggregateInputType = {
    id?: true
    resumeId?: true
    viewerId?: true
    viewerType?: true
    viewedAt?: true
  }

  export type ResumeReviewStatusCountAggregateInputType = {
    id?: true
    resumeId?: true
    viewerId?: true
    viewerType?: true
    viewedAt?: true
    _all?: true
  }

  export type ResumeReviewStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeReviewStatus to aggregate.
     */
    where?: ResumeReviewStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewStatuses to fetch.
     */
    orderBy?: ResumeReviewStatusOrderByWithRelationInput | ResumeReviewStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeReviewStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeReviewStatuses
    **/
    _count?: true | ResumeReviewStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeReviewStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeReviewStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeReviewStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeReviewStatusMaxAggregateInputType
  }

  export type GetResumeReviewStatusAggregateType<T extends ResumeReviewStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeReviewStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeReviewStatus[P]>
      : GetScalarType<T[P], AggregateResumeReviewStatus[P]>
  }




  export type ResumeReviewStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeReviewStatusWhereInput
    orderBy?: ResumeReviewStatusOrderByWithAggregationInput | ResumeReviewStatusOrderByWithAggregationInput[]
    by: ResumeReviewStatusScalarFieldEnum[] | ResumeReviewStatusScalarFieldEnum
    having?: ResumeReviewStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeReviewStatusCountAggregateInputType | true
    _avg?: ResumeReviewStatusAvgAggregateInputType
    _sum?: ResumeReviewStatusSumAggregateInputType
    _min?: ResumeReviewStatusMinAggregateInputType
    _max?: ResumeReviewStatusMaxAggregateInputType
  }

  export type ResumeReviewStatusGroupByOutputType = {
    id: number
    resumeId: number
    viewerId: number
    viewerType: string
    viewedAt: Date
    _count: ResumeReviewStatusCountAggregateOutputType | null
    _avg: ResumeReviewStatusAvgAggregateOutputType | null
    _sum: ResumeReviewStatusSumAggregateOutputType | null
    _min: ResumeReviewStatusMinAggregateOutputType | null
    _max: ResumeReviewStatusMaxAggregateOutputType | null
  }

  type GetResumeReviewStatusGroupByPayload<T extends ResumeReviewStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeReviewStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeReviewStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeReviewStatusGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeReviewStatusGroupByOutputType[P]>
        }
      >
    >


  export type ResumeReviewStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    viewerId?: boolean
    viewerType?: boolean
    viewedAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewStatus"]>

  export type ResumeReviewStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    viewerId?: boolean
    viewerType?: boolean
    viewedAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewStatus"]>

  export type ResumeReviewStatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    viewerId?: boolean
    viewerType?: boolean
    viewedAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewStatus"]>

  export type ResumeReviewStatusSelectScalar = {
    id?: boolean
    resumeId?: boolean
    viewerId?: boolean
    viewerType?: boolean
    viewedAt?: boolean
  }

  export type ResumeReviewStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "viewerId" | "viewerType" | "viewedAt", ExtArgs["result"]["resumeReviewStatus"]>
  export type ResumeReviewStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumeReviewStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumeReviewStatusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $ResumeReviewStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeReviewStatus"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      viewerId: number
      viewerType: string
      viewedAt: Date
    }, ExtArgs["result"]["resumeReviewStatus"]>
    composites: {}
  }

  type ResumeReviewStatusGetPayload<S extends boolean | null | undefined | ResumeReviewStatusDefaultArgs> = $Result.GetResult<Prisma.$ResumeReviewStatusPayload, S>

  type ResumeReviewStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeReviewStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeReviewStatusCountAggregateInputType | true
    }

  export interface ResumeReviewStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeReviewStatus'], meta: { name: 'ResumeReviewStatus' } }
    /**
     * Find zero or one ResumeReviewStatus that matches the filter.
     * @param {ResumeReviewStatusFindUniqueArgs} args - Arguments to find a ResumeReviewStatus
     * @example
     * // Get one ResumeReviewStatus
     * const resumeReviewStatus = await prisma.resumeReviewStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeReviewStatusFindUniqueArgs>(args: SelectSubset<T, ResumeReviewStatusFindUniqueArgs<ExtArgs>>): Prisma__ResumeReviewStatusClient<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeReviewStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeReviewStatusFindUniqueOrThrowArgs} args - Arguments to find a ResumeReviewStatus
     * @example
     * // Get one ResumeReviewStatus
     * const resumeReviewStatus = await prisma.resumeReviewStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeReviewStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeReviewStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeReviewStatusClient<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeReviewStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewStatusFindFirstArgs} args - Arguments to find a ResumeReviewStatus
     * @example
     * // Get one ResumeReviewStatus
     * const resumeReviewStatus = await prisma.resumeReviewStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeReviewStatusFindFirstArgs>(args?: SelectSubset<T, ResumeReviewStatusFindFirstArgs<ExtArgs>>): Prisma__ResumeReviewStatusClient<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeReviewStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewStatusFindFirstOrThrowArgs} args - Arguments to find a ResumeReviewStatus
     * @example
     * // Get one ResumeReviewStatus
     * const resumeReviewStatus = await prisma.resumeReviewStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeReviewStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeReviewStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeReviewStatusClient<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeReviewStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeReviewStatuses
     * const resumeReviewStatuses = await prisma.resumeReviewStatus.findMany()
     * 
     * // Get first 10 ResumeReviewStatuses
     * const resumeReviewStatuses = await prisma.resumeReviewStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeReviewStatusWithIdOnly = await prisma.resumeReviewStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeReviewStatusFindManyArgs>(args?: SelectSubset<T, ResumeReviewStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeReviewStatus.
     * @param {ResumeReviewStatusCreateArgs} args - Arguments to create a ResumeReviewStatus.
     * @example
     * // Create one ResumeReviewStatus
     * const ResumeReviewStatus = await prisma.resumeReviewStatus.create({
     *   data: {
     *     // ... data to create a ResumeReviewStatus
     *   }
     * })
     * 
     */
    create<T extends ResumeReviewStatusCreateArgs>(args: SelectSubset<T, ResumeReviewStatusCreateArgs<ExtArgs>>): Prisma__ResumeReviewStatusClient<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeReviewStatuses.
     * @param {ResumeReviewStatusCreateManyArgs} args - Arguments to create many ResumeReviewStatuses.
     * @example
     * // Create many ResumeReviewStatuses
     * const resumeReviewStatus = await prisma.resumeReviewStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeReviewStatusCreateManyArgs>(args?: SelectSubset<T, ResumeReviewStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeReviewStatuses and returns the data saved in the database.
     * @param {ResumeReviewStatusCreateManyAndReturnArgs} args - Arguments to create many ResumeReviewStatuses.
     * @example
     * // Create many ResumeReviewStatuses
     * const resumeReviewStatus = await prisma.resumeReviewStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeReviewStatuses and only return the `id`
     * const resumeReviewStatusWithIdOnly = await prisma.resumeReviewStatus.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeReviewStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeReviewStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeReviewStatus.
     * @param {ResumeReviewStatusDeleteArgs} args - Arguments to delete one ResumeReviewStatus.
     * @example
     * // Delete one ResumeReviewStatus
     * const ResumeReviewStatus = await prisma.resumeReviewStatus.delete({
     *   where: {
     *     // ... filter to delete one ResumeReviewStatus
     *   }
     * })
     * 
     */
    delete<T extends ResumeReviewStatusDeleteArgs>(args: SelectSubset<T, ResumeReviewStatusDeleteArgs<ExtArgs>>): Prisma__ResumeReviewStatusClient<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeReviewStatus.
     * @param {ResumeReviewStatusUpdateArgs} args - Arguments to update one ResumeReviewStatus.
     * @example
     * // Update one ResumeReviewStatus
     * const resumeReviewStatus = await prisma.resumeReviewStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeReviewStatusUpdateArgs>(args: SelectSubset<T, ResumeReviewStatusUpdateArgs<ExtArgs>>): Prisma__ResumeReviewStatusClient<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeReviewStatuses.
     * @param {ResumeReviewStatusDeleteManyArgs} args - Arguments to filter ResumeReviewStatuses to delete.
     * @example
     * // Delete a few ResumeReviewStatuses
     * const { count } = await prisma.resumeReviewStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeReviewStatusDeleteManyArgs>(args?: SelectSubset<T, ResumeReviewStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeReviewStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeReviewStatuses
     * const resumeReviewStatus = await prisma.resumeReviewStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeReviewStatusUpdateManyArgs>(args: SelectSubset<T, ResumeReviewStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeReviewStatuses and returns the data updated in the database.
     * @param {ResumeReviewStatusUpdateManyAndReturnArgs} args - Arguments to update many ResumeReviewStatuses.
     * @example
     * // Update many ResumeReviewStatuses
     * const resumeReviewStatus = await prisma.resumeReviewStatus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeReviewStatuses and only return the `id`
     * const resumeReviewStatusWithIdOnly = await prisma.resumeReviewStatus.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeReviewStatusUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeReviewStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeReviewStatus.
     * @param {ResumeReviewStatusUpsertArgs} args - Arguments to update or create a ResumeReviewStatus.
     * @example
     * // Update or create a ResumeReviewStatus
     * const resumeReviewStatus = await prisma.resumeReviewStatus.upsert({
     *   create: {
     *     // ... data to create a ResumeReviewStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeReviewStatus we want to update
     *   }
     * })
     */
    upsert<T extends ResumeReviewStatusUpsertArgs>(args: SelectSubset<T, ResumeReviewStatusUpsertArgs<ExtArgs>>): Prisma__ResumeReviewStatusClient<$Result.GetResult<Prisma.$ResumeReviewStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeReviewStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewStatusCountArgs} args - Arguments to filter ResumeReviewStatuses to count.
     * @example
     * // Count the number of ResumeReviewStatuses
     * const count = await prisma.resumeReviewStatus.count({
     *   where: {
     *     // ... the filter for the ResumeReviewStatuses we want to count
     *   }
     * })
    **/
    count<T extends ResumeReviewStatusCountArgs>(
      args?: Subset<T, ResumeReviewStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeReviewStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeReviewStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeReviewStatusAggregateArgs>(args: Subset<T, ResumeReviewStatusAggregateArgs>): Prisma.PrismaPromise<GetResumeReviewStatusAggregateType<T>>

    /**
     * Group by ResumeReviewStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeReviewStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeReviewStatusGroupByArgs['orderBy'] }
        : { orderBy?: ResumeReviewStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeReviewStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeReviewStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeReviewStatus model
   */
  readonly fields: ResumeReviewStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeReviewStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeReviewStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeReviewStatus model
   */
  interface ResumeReviewStatusFieldRefs {
    readonly id: FieldRef<"ResumeReviewStatus", 'Int'>
    readonly resumeId: FieldRef<"ResumeReviewStatus", 'Int'>
    readonly viewerId: FieldRef<"ResumeReviewStatus", 'Int'>
    readonly viewerType: FieldRef<"ResumeReviewStatus", 'String'>
    readonly viewedAt: FieldRef<"ResumeReviewStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeReviewStatus findUnique
   */
  export type ResumeReviewStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewStatus to fetch.
     */
    where: ResumeReviewStatusWhereUniqueInput
  }

  /**
   * ResumeReviewStatus findUniqueOrThrow
   */
  export type ResumeReviewStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewStatus to fetch.
     */
    where: ResumeReviewStatusWhereUniqueInput
  }

  /**
   * ResumeReviewStatus findFirst
   */
  export type ResumeReviewStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewStatus to fetch.
     */
    where?: ResumeReviewStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewStatuses to fetch.
     */
    orderBy?: ResumeReviewStatusOrderByWithRelationInput | ResumeReviewStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeReviewStatuses.
     */
    cursor?: ResumeReviewStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeReviewStatuses.
     */
    distinct?: ResumeReviewStatusScalarFieldEnum | ResumeReviewStatusScalarFieldEnum[]
  }

  /**
   * ResumeReviewStatus findFirstOrThrow
   */
  export type ResumeReviewStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewStatus to fetch.
     */
    where?: ResumeReviewStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewStatuses to fetch.
     */
    orderBy?: ResumeReviewStatusOrderByWithRelationInput | ResumeReviewStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeReviewStatuses.
     */
    cursor?: ResumeReviewStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeReviewStatuses.
     */
    distinct?: ResumeReviewStatusScalarFieldEnum | ResumeReviewStatusScalarFieldEnum[]
  }

  /**
   * ResumeReviewStatus findMany
   */
  export type ResumeReviewStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewStatuses to fetch.
     */
    where?: ResumeReviewStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewStatuses to fetch.
     */
    orderBy?: ResumeReviewStatusOrderByWithRelationInput | ResumeReviewStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeReviewStatuses.
     */
    cursor?: ResumeReviewStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewStatuses.
     */
    skip?: number
    distinct?: ResumeReviewStatusScalarFieldEnum | ResumeReviewStatusScalarFieldEnum[]
  }

  /**
   * ResumeReviewStatus create
   */
  export type ResumeReviewStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeReviewStatus.
     */
    data: XOR<ResumeReviewStatusCreateInput, ResumeReviewStatusUncheckedCreateInput>
  }

  /**
   * ResumeReviewStatus createMany
   */
  export type ResumeReviewStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeReviewStatuses.
     */
    data: ResumeReviewStatusCreateManyInput | ResumeReviewStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeReviewStatus createManyAndReturn
   */
  export type ResumeReviewStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeReviewStatuses.
     */
    data: ResumeReviewStatusCreateManyInput | ResumeReviewStatusCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeReviewStatus update
   */
  export type ResumeReviewStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeReviewStatus.
     */
    data: XOR<ResumeReviewStatusUpdateInput, ResumeReviewStatusUncheckedUpdateInput>
    /**
     * Choose, which ResumeReviewStatus to update.
     */
    where: ResumeReviewStatusWhereUniqueInput
  }

  /**
   * ResumeReviewStatus updateMany
   */
  export type ResumeReviewStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeReviewStatuses.
     */
    data: XOR<ResumeReviewStatusUpdateManyMutationInput, ResumeReviewStatusUncheckedUpdateManyInput>
    /**
     * Filter which ResumeReviewStatuses to update
     */
    where?: ResumeReviewStatusWhereInput
    /**
     * Limit how many ResumeReviewStatuses to update.
     */
    limit?: number
  }

  /**
   * ResumeReviewStatus updateManyAndReturn
   */
  export type ResumeReviewStatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * The data used to update ResumeReviewStatuses.
     */
    data: XOR<ResumeReviewStatusUpdateManyMutationInput, ResumeReviewStatusUncheckedUpdateManyInput>
    /**
     * Filter which ResumeReviewStatuses to update
     */
    where?: ResumeReviewStatusWhereInput
    /**
     * Limit how many ResumeReviewStatuses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeReviewStatus upsert
   */
  export type ResumeReviewStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeReviewStatus to update in case it exists.
     */
    where: ResumeReviewStatusWhereUniqueInput
    /**
     * In case the ResumeReviewStatus found by the `where` argument doesn't exist, create a new ResumeReviewStatus with this data.
     */
    create: XOR<ResumeReviewStatusCreateInput, ResumeReviewStatusUncheckedCreateInput>
    /**
     * In case the ResumeReviewStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeReviewStatusUpdateInput, ResumeReviewStatusUncheckedUpdateInput>
  }

  /**
   * ResumeReviewStatus delete
   */
  export type ResumeReviewStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
    /**
     * Filter which ResumeReviewStatus to delete.
     */
    where: ResumeReviewStatusWhereUniqueInput
  }

  /**
   * ResumeReviewStatus deleteMany
   */
  export type ResumeReviewStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeReviewStatuses to delete
     */
    where?: ResumeReviewStatusWhereInput
    /**
     * Limit how many ResumeReviewStatuses to delete.
     */
    limit?: number
  }

  /**
   * ResumeReviewStatus without action
   */
  export type ResumeReviewStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewStatus
     */
    select?: ResumeReviewStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewStatus
     */
    omit?: ResumeReviewStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewStatusInclude<ExtArgs> | null
  }


  /**
   * Model ResumePDF
   */

  export type AggregateResumePDF = {
    _count: ResumePDFCountAggregateOutputType | null
    _avg: ResumePDFAvgAggregateOutputType | null
    _sum: ResumePDFSumAggregateOutputType | null
    _min: ResumePDFMinAggregateOutputType | null
    _max: ResumePDFMaxAggregateOutputType | null
  }

  export type ResumePDFAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ResumePDFSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type ResumePDFMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    fileUrl: string | null
    template: string | null
    createdAt: Date | null
  }

  export type ResumePDFMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    fileUrl: string | null
    template: string | null
    createdAt: Date | null
  }

  export type ResumePDFCountAggregateOutputType = {
    id: number
    resumeId: number
    fileUrl: number
    template: number
    createdAt: number
    _all: number
  }


  export type ResumePDFAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ResumePDFSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type ResumePDFMinAggregateInputType = {
    id?: true
    resumeId?: true
    fileUrl?: true
    template?: true
    createdAt?: true
  }

  export type ResumePDFMaxAggregateInputType = {
    id?: true
    resumeId?: true
    fileUrl?: true
    template?: true
    createdAt?: true
  }

  export type ResumePDFCountAggregateInputType = {
    id?: true
    resumeId?: true
    fileUrl?: true
    template?: true
    createdAt?: true
    _all?: true
  }

  export type ResumePDFAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumePDF to aggregate.
     */
    where?: ResumePDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumePDFS to fetch.
     */
    orderBy?: ResumePDFOrderByWithRelationInput | ResumePDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumePDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumePDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumePDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumePDFS
    **/
    _count?: true | ResumePDFCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumePDFAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumePDFSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumePDFMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumePDFMaxAggregateInputType
  }

  export type GetResumePDFAggregateType<T extends ResumePDFAggregateArgs> = {
        [P in keyof T & keyof AggregateResumePDF]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumePDF[P]>
      : GetScalarType<T[P], AggregateResumePDF[P]>
  }




  export type ResumePDFGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumePDFWhereInput
    orderBy?: ResumePDFOrderByWithAggregationInput | ResumePDFOrderByWithAggregationInput[]
    by: ResumePDFScalarFieldEnum[] | ResumePDFScalarFieldEnum
    having?: ResumePDFScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumePDFCountAggregateInputType | true
    _avg?: ResumePDFAvgAggregateInputType
    _sum?: ResumePDFSumAggregateInputType
    _min?: ResumePDFMinAggregateInputType
    _max?: ResumePDFMaxAggregateInputType
  }

  export type ResumePDFGroupByOutputType = {
    id: number
    resumeId: number
    fileUrl: string
    template: string | null
    createdAt: Date
    _count: ResumePDFCountAggregateOutputType | null
    _avg: ResumePDFAvgAggregateOutputType | null
    _sum: ResumePDFSumAggregateOutputType | null
    _min: ResumePDFMinAggregateOutputType | null
    _max: ResumePDFMaxAggregateOutputType | null
  }

  type GetResumePDFGroupByPayload<T extends ResumePDFGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumePDFGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumePDFGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumePDFGroupByOutputType[P]>
            : GetScalarType<T[P], ResumePDFGroupByOutputType[P]>
        }
      >
    >


  export type ResumePDFSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    fileUrl?: boolean
    template?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumePDF"]>

  export type ResumePDFSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    fileUrl?: boolean
    template?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumePDF"]>

  export type ResumePDFSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    fileUrl?: boolean
    template?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumePDF"]>

  export type ResumePDFSelectScalar = {
    id?: boolean
    resumeId?: boolean
    fileUrl?: boolean
    template?: boolean
    createdAt?: boolean
  }

  export type ResumePDFOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "fileUrl" | "template" | "createdAt", ExtArgs["result"]["resumePDF"]>
  export type ResumePDFInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumePDFIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }
  export type ResumePDFIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
  }

  export type $ResumePDFPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumePDF"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      fileUrl: string
      template: string | null
      createdAt: Date
    }, ExtArgs["result"]["resumePDF"]>
    composites: {}
  }

  type ResumePDFGetPayload<S extends boolean | null | undefined | ResumePDFDefaultArgs> = $Result.GetResult<Prisma.$ResumePDFPayload, S>

  type ResumePDFCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumePDFFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumePDFCountAggregateInputType | true
    }

  export interface ResumePDFDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumePDF'], meta: { name: 'ResumePDF' } }
    /**
     * Find zero or one ResumePDF that matches the filter.
     * @param {ResumePDFFindUniqueArgs} args - Arguments to find a ResumePDF
     * @example
     * // Get one ResumePDF
     * const resumePDF = await prisma.resumePDF.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumePDFFindUniqueArgs>(args: SelectSubset<T, ResumePDFFindUniqueArgs<ExtArgs>>): Prisma__ResumePDFClient<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumePDF that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumePDFFindUniqueOrThrowArgs} args - Arguments to find a ResumePDF
     * @example
     * // Get one ResumePDF
     * const resumePDF = await prisma.resumePDF.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumePDFFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumePDFFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumePDFClient<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumePDF that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumePDFFindFirstArgs} args - Arguments to find a ResumePDF
     * @example
     * // Get one ResumePDF
     * const resumePDF = await prisma.resumePDF.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumePDFFindFirstArgs>(args?: SelectSubset<T, ResumePDFFindFirstArgs<ExtArgs>>): Prisma__ResumePDFClient<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumePDF that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumePDFFindFirstOrThrowArgs} args - Arguments to find a ResumePDF
     * @example
     * // Get one ResumePDF
     * const resumePDF = await prisma.resumePDF.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumePDFFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumePDFFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumePDFClient<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumePDFS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumePDFFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumePDFS
     * const resumePDFS = await prisma.resumePDF.findMany()
     * 
     * // Get first 10 ResumePDFS
     * const resumePDFS = await prisma.resumePDF.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumePDFWithIdOnly = await prisma.resumePDF.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumePDFFindManyArgs>(args?: SelectSubset<T, ResumePDFFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumePDF.
     * @param {ResumePDFCreateArgs} args - Arguments to create a ResumePDF.
     * @example
     * // Create one ResumePDF
     * const ResumePDF = await prisma.resumePDF.create({
     *   data: {
     *     // ... data to create a ResumePDF
     *   }
     * })
     * 
     */
    create<T extends ResumePDFCreateArgs>(args: SelectSubset<T, ResumePDFCreateArgs<ExtArgs>>): Prisma__ResumePDFClient<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumePDFS.
     * @param {ResumePDFCreateManyArgs} args - Arguments to create many ResumePDFS.
     * @example
     * // Create many ResumePDFS
     * const resumePDF = await prisma.resumePDF.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumePDFCreateManyArgs>(args?: SelectSubset<T, ResumePDFCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumePDFS and returns the data saved in the database.
     * @param {ResumePDFCreateManyAndReturnArgs} args - Arguments to create many ResumePDFS.
     * @example
     * // Create many ResumePDFS
     * const resumePDF = await prisma.resumePDF.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumePDFS and only return the `id`
     * const resumePDFWithIdOnly = await prisma.resumePDF.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumePDFCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumePDFCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumePDF.
     * @param {ResumePDFDeleteArgs} args - Arguments to delete one ResumePDF.
     * @example
     * // Delete one ResumePDF
     * const ResumePDF = await prisma.resumePDF.delete({
     *   where: {
     *     // ... filter to delete one ResumePDF
     *   }
     * })
     * 
     */
    delete<T extends ResumePDFDeleteArgs>(args: SelectSubset<T, ResumePDFDeleteArgs<ExtArgs>>): Prisma__ResumePDFClient<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumePDF.
     * @param {ResumePDFUpdateArgs} args - Arguments to update one ResumePDF.
     * @example
     * // Update one ResumePDF
     * const resumePDF = await prisma.resumePDF.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumePDFUpdateArgs>(args: SelectSubset<T, ResumePDFUpdateArgs<ExtArgs>>): Prisma__ResumePDFClient<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumePDFS.
     * @param {ResumePDFDeleteManyArgs} args - Arguments to filter ResumePDFS to delete.
     * @example
     * // Delete a few ResumePDFS
     * const { count } = await prisma.resumePDF.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumePDFDeleteManyArgs>(args?: SelectSubset<T, ResumePDFDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumePDFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumePDFUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumePDFS
     * const resumePDF = await prisma.resumePDF.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumePDFUpdateManyArgs>(args: SelectSubset<T, ResumePDFUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumePDFS and returns the data updated in the database.
     * @param {ResumePDFUpdateManyAndReturnArgs} args - Arguments to update many ResumePDFS.
     * @example
     * // Update many ResumePDFS
     * const resumePDF = await prisma.resumePDF.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumePDFS and only return the `id`
     * const resumePDFWithIdOnly = await prisma.resumePDF.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumePDFUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumePDFUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumePDF.
     * @param {ResumePDFUpsertArgs} args - Arguments to update or create a ResumePDF.
     * @example
     * // Update or create a ResumePDF
     * const resumePDF = await prisma.resumePDF.upsert({
     *   create: {
     *     // ... data to create a ResumePDF
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumePDF we want to update
     *   }
     * })
     */
    upsert<T extends ResumePDFUpsertArgs>(args: SelectSubset<T, ResumePDFUpsertArgs<ExtArgs>>): Prisma__ResumePDFClient<$Result.GetResult<Prisma.$ResumePDFPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumePDFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumePDFCountArgs} args - Arguments to filter ResumePDFS to count.
     * @example
     * // Count the number of ResumePDFS
     * const count = await prisma.resumePDF.count({
     *   where: {
     *     // ... the filter for the ResumePDFS we want to count
     *   }
     * })
    **/
    count<T extends ResumePDFCountArgs>(
      args?: Subset<T, ResumePDFCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumePDFCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumePDF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumePDFAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumePDFAggregateArgs>(args: Subset<T, ResumePDFAggregateArgs>): Prisma.PrismaPromise<GetResumePDFAggregateType<T>>

    /**
     * Group by ResumePDF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumePDFGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumePDFGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumePDFGroupByArgs['orderBy'] }
        : { orderBy?: ResumePDFGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumePDFGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumePDFGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumePDF model
   */
  readonly fields: ResumePDFFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumePDF.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumePDFClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumePDF model
   */
  interface ResumePDFFieldRefs {
    readonly id: FieldRef<"ResumePDF", 'Int'>
    readonly resumeId: FieldRef<"ResumePDF", 'Int'>
    readonly fileUrl: FieldRef<"ResumePDF", 'String'>
    readonly template: FieldRef<"ResumePDF", 'String'>
    readonly createdAt: FieldRef<"ResumePDF", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumePDF findUnique
   */
  export type ResumePDFFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * Filter, which ResumePDF to fetch.
     */
    where: ResumePDFWhereUniqueInput
  }

  /**
   * ResumePDF findUniqueOrThrow
   */
  export type ResumePDFFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * Filter, which ResumePDF to fetch.
     */
    where: ResumePDFWhereUniqueInput
  }

  /**
   * ResumePDF findFirst
   */
  export type ResumePDFFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * Filter, which ResumePDF to fetch.
     */
    where?: ResumePDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumePDFS to fetch.
     */
    orderBy?: ResumePDFOrderByWithRelationInput | ResumePDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumePDFS.
     */
    cursor?: ResumePDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumePDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumePDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumePDFS.
     */
    distinct?: ResumePDFScalarFieldEnum | ResumePDFScalarFieldEnum[]
  }

  /**
   * ResumePDF findFirstOrThrow
   */
  export type ResumePDFFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * Filter, which ResumePDF to fetch.
     */
    where?: ResumePDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumePDFS to fetch.
     */
    orderBy?: ResumePDFOrderByWithRelationInput | ResumePDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumePDFS.
     */
    cursor?: ResumePDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumePDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumePDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumePDFS.
     */
    distinct?: ResumePDFScalarFieldEnum | ResumePDFScalarFieldEnum[]
  }

  /**
   * ResumePDF findMany
   */
  export type ResumePDFFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * Filter, which ResumePDFS to fetch.
     */
    where?: ResumePDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumePDFS to fetch.
     */
    orderBy?: ResumePDFOrderByWithRelationInput | ResumePDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumePDFS.
     */
    cursor?: ResumePDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumePDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumePDFS.
     */
    skip?: number
    distinct?: ResumePDFScalarFieldEnum | ResumePDFScalarFieldEnum[]
  }

  /**
   * ResumePDF create
   */
  export type ResumePDFCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumePDF.
     */
    data: XOR<ResumePDFCreateInput, ResumePDFUncheckedCreateInput>
  }

  /**
   * ResumePDF createMany
   */
  export type ResumePDFCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumePDFS.
     */
    data: ResumePDFCreateManyInput | ResumePDFCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumePDF createManyAndReturn
   */
  export type ResumePDFCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * The data used to create many ResumePDFS.
     */
    data: ResumePDFCreateManyInput | ResumePDFCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumePDF update
   */
  export type ResumePDFUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumePDF.
     */
    data: XOR<ResumePDFUpdateInput, ResumePDFUncheckedUpdateInput>
    /**
     * Choose, which ResumePDF to update.
     */
    where: ResumePDFWhereUniqueInput
  }

  /**
   * ResumePDF updateMany
   */
  export type ResumePDFUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumePDFS.
     */
    data: XOR<ResumePDFUpdateManyMutationInput, ResumePDFUncheckedUpdateManyInput>
    /**
     * Filter which ResumePDFS to update
     */
    where?: ResumePDFWhereInput
    /**
     * Limit how many ResumePDFS to update.
     */
    limit?: number
  }

  /**
   * ResumePDF updateManyAndReturn
   */
  export type ResumePDFUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * The data used to update ResumePDFS.
     */
    data: XOR<ResumePDFUpdateManyMutationInput, ResumePDFUncheckedUpdateManyInput>
    /**
     * Filter which ResumePDFS to update
     */
    where?: ResumePDFWhereInput
    /**
     * Limit how many ResumePDFS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumePDF upsert
   */
  export type ResumePDFUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumePDF to update in case it exists.
     */
    where: ResumePDFWhereUniqueInput
    /**
     * In case the ResumePDF found by the `where` argument doesn't exist, create a new ResumePDF with this data.
     */
    create: XOR<ResumePDFCreateInput, ResumePDFUncheckedCreateInput>
    /**
     * In case the ResumePDF was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumePDFUpdateInput, ResumePDFUncheckedUpdateInput>
  }

  /**
   * ResumePDF delete
   */
  export type ResumePDFDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
    /**
     * Filter which ResumePDF to delete.
     */
    where: ResumePDFWhereUniqueInput
  }

  /**
   * ResumePDF deleteMany
   */
  export type ResumePDFDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumePDFS to delete
     */
    where?: ResumePDFWhereInput
    /**
     * Limit how many ResumePDFS to delete.
     */
    limit?: number
  }

  /**
   * ResumePDF without action
   */
  export type ResumePDFDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumePDF
     */
    select?: ResumePDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumePDF
     */
    omit?: ResumePDFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumePDFInclude<ExtArgs> | null
  }


  /**
   * Model UserReviewLog
   */

  export type AggregateUserReviewLog = {
    _count: UserReviewLogCountAggregateOutputType | null
    _avg: UserReviewLogAvgAggregateOutputType | null
    _sum: UserReviewLogSumAggregateOutputType | null
    _min: UserReviewLogMinAggregateOutputType | null
    _max: UserReviewLogMaxAggregateOutputType | null
  }

  export type UserReviewLogAvgAggregateOutputType = {
    id: number | null
    targetUserId: number | null
    reviewerId: number | null
    score: number | null
  }

  export type UserReviewLogSumAggregateOutputType = {
    id: number | null
    targetUserId: number | null
    reviewerId: number | null
    score: number | null
  }

  export type UserReviewLogMinAggregateOutputType = {
    id: number | null
    targetUserId: number | null
    reviewerId: number | null
    score: number | null
    reviewType: string | null
    isBlacklisted: boolean | null
    note: string | null
    createdAt: Date | null
  }

  export type UserReviewLogMaxAggregateOutputType = {
    id: number | null
    targetUserId: number | null
    reviewerId: number | null
    score: number | null
    reviewType: string | null
    isBlacklisted: boolean | null
    note: string | null
    createdAt: Date | null
  }

  export type UserReviewLogCountAggregateOutputType = {
    id: number
    targetUserId: number
    reviewerId: number
    score: number
    reviewType: number
    isBlacklisted: number
    note: number
    createdAt: number
    _all: number
  }


  export type UserReviewLogAvgAggregateInputType = {
    id?: true
    targetUserId?: true
    reviewerId?: true
    score?: true
  }

  export type UserReviewLogSumAggregateInputType = {
    id?: true
    targetUserId?: true
    reviewerId?: true
    score?: true
  }

  export type UserReviewLogMinAggregateInputType = {
    id?: true
    targetUserId?: true
    reviewerId?: true
    score?: true
    reviewType?: true
    isBlacklisted?: true
    note?: true
    createdAt?: true
  }

  export type UserReviewLogMaxAggregateInputType = {
    id?: true
    targetUserId?: true
    reviewerId?: true
    score?: true
    reviewType?: true
    isBlacklisted?: true
    note?: true
    createdAt?: true
  }

  export type UserReviewLogCountAggregateInputType = {
    id?: true
    targetUserId?: true
    reviewerId?: true
    score?: true
    reviewType?: true
    isBlacklisted?: true
    note?: true
    createdAt?: true
    _all?: true
  }

  export type UserReviewLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserReviewLog to aggregate.
     */
    where?: UserReviewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserReviewLogs to fetch.
     */
    orderBy?: UserReviewLogOrderByWithRelationInput | UserReviewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserReviewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserReviewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserReviewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserReviewLogs
    **/
    _count?: true | UserReviewLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserReviewLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserReviewLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserReviewLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserReviewLogMaxAggregateInputType
  }

  export type GetUserReviewLogAggregateType<T extends UserReviewLogAggregateArgs> = {
        [P in keyof T & keyof AggregateUserReviewLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserReviewLog[P]>
      : GetScalarType<T[P], AggregateUserReviewLog[P]>
  }




  export type UserReviewLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserReviewLogWhereInput
    orderBy?: UserReviewLogOrderByWithAggregationInput | UserReviewLogOrderByWithAggregationInput[]
    by: UserReviewLogScalarFieldEnum[] | UserReviewLogScalarFieldEnum
    having?: UserReviewLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserReviewLogCountAggregateInputType | true
    _avg?: UserReviewLogAvgAggregateInputType
    _sum?: UserReviewLogSumAggregateInputType
    _min?: UserReviewLogMinAggregateInputType
    _max?: UserReviewLogMaxAggregateInputType
  }

  export type UserReviewLogGroupByOutputType = {
    id: number
    targetUserId: number
    reviewerId: number
    score: number | null
    reviewType: string | null
    isBlacklisted: boolean
    note: string | null
    createdAt: Date
    _count: UserReviewLogCountAggregateOutputType | null
    _avg: UserReviewLogAvgAggregateOutputType | null
    _sum: UserReviewLogSumAggregateOutputType | null
    _min: UserReviewLogMinAggregateOutputType | null
    _max: UserReviewLogMaxAggregateOutputType | null
  }

  type GetUserReviewLogGroupByPayload<T extends UserReviewLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserReviewLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserReviewLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserReviewLogGroupByOutputType[P]>
            : GetScalarType<T[P], UserReviewLogGroupByOutputType[P]>
        }
      >
    >


  export type UserReviewLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserId?: boolean
    reviewerId?: boolean
    score?: boolean
    reviewType?: boolean
    isBlacklisted?: boolean
    note?: boolean
    createdAt?: boolean
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | UserReviewLog$tagsArgs<ExtArgs>
    _count?: boolean | UserReviewLogCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReviewLog"]>

  export type UserReviewLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserId?: boolean
    reviewerId?: boolean
    score?: boolean
    reviewType?: boolean
    isBlacklisted?: boolean
    note?: boolean
    createdAt?: boolean
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReviewLog"]>

  export type UserReviewLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserId?: boolean
    reviewerId?: boolean
    score?: boolean
    reviewType?: boolean
    isBlacklisted?: boolean
    note?: boolean
    createdAt?: boolean
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReviewLog"]>

  export type UserReviewLogSelectScalar = {
    id?: boolean
    targetUserId?: boolean
    reviewerId?: boolean
    score?: boolean
    reviewType?: boolean
    isBlacklisted?: boolean
    note?: boolean
    createdAt?: boolean
  }

  export type UserReviewLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "targetUserId" | "reviewerId" | "score" | "reviewType" | "isBlacklisted" | "note" | "createdAt", ExtArgs["result"]["userReviewLog"]>
  export type UserReviewLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | UserReviewLog$tagsArgs<ExtArgs>
    _count?: boolean | UserReviewLogCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserReviewLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserReviewLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserReviewLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserReviewLog"
    objects: {
      targetUser: Prisma.$UserPayload<ExtArgs>
      reviewer: Prisma.$UserPayload<ExtArgs>
      tags: Prisma.$UserReviewTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      targetUserId: number
      reviewerId: number
      score: number | null
      reviewType: string | null
      isBlacklisted: boolean
      note: string | null
      createdAt: Date
    }, ExtArgs["result"]["userReviewLog"]>
    composites: {}
  }

  type UserReviewLogGetPayload<S extends boolean | null | undefined | UserReviewLogDefaultArgs> = $Result.GetResult<Prisma.$UserReviewLogPayload, S>

  type UserReviewLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserReviewLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserReviewLogCountAggregateInputType | true
    }

  export interface UserReviewLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserReviewLog'], meta: { name: 'UserReviewLog' } }
    /**
     * Find zero or one UserReviewLog that matches the filter.
     * @param {UserReviewLogFindUniqueArgs} args - Arguments to find a UserReviewLog
     * @example
     * // Get one UserReviewLog
     * const userReviewLog = await prisma.userReviewLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserReviewLogFindUniqueArgs>(args: SelectSubset<T, UserReviewLogFindUniqueArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserReviewLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserReviewLogFindUniqueOrThrowArgs} args - Arguments to find a UserReviewLog
     * @example
     * // Get one UserReviewLog
     * const userReviewLog = await prisma.userReviewLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserReviewLogFindUniqueOrThrowArgs>(args: SelectSubset<T, UserReviewLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserReviewLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewLogFindFirstArgs} args - Arguments to find a UserReviewLog
     * @example
     * // Get one UserReviewLog
     * const userReviewLog = await prisma.userReviewLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserReviewLogFindFirstArgs>(args?: SelectSubset<T, UserReviewLogFindFirstArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserReviewLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewLogFindFirstOrThrowArgs} args - Arguments to find a UserReviewLog
     * @example
     * // Get one UserReviewLog
     * const userReviewLog = await prisma.userReviewLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserReviewLogFindFirstOrThrowArgs>(args?: SelectSubset<T, UserReviewLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserReviewLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserReviewLogs
     * const userReviewLogs = await prisma.userReviewLog.findMany()
     * 
     * // Get first 10 UserReviewLogs
     * const userReviewLogs = await prisma.userReviewLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userReviewLogWithIdOnly = await prisma.userReviewLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserReviewLogFindManyArgs>(args?: SelectSubset<T, UserReviewLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserReviewLog.
     * @param {UserReviewLogCreateArgs} args - Arguments to create a UserReviewLog.
     * @example
     * // Create one UserReviewLog
     * const UserReviewLog = await prisma.userReviewLog.create({
     *   data: {
     *     // ... data to create a UserReviewLog
     *   }
     * })
     * 
     */
    create<T extends UserReviewLogCreateArgs>(args: SelectSubset<T, UserReviewLogCreateArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserReviewLogs.
     * @param {UserReviewLogCreateManyArgs} args - Arguments to create many UserReviewLogs.
     * @example
     * // Create many UserReviewLogs
     * const userReviewLog = await prisma.userReviewLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserReviewLogCreateManyArgs>(args?: SelectSubset<T, UserReviewLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserReviewLogs and returns the data saved in the database.
     * @param {UserReviewLogCreateManyAndReturnArgs} args - Arguments to create many UserReviewLogs.
     * @example
     * // Create many UserReviewLogs
     * const userReviewLog = await prisma.userReviewLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserReviewLogs and only return the `id`
     * const userReviewLogWithIdOnly = await prisma.userReviewLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserReviewLogCreateManyAndReturnArgs>(args?: SelectSubset<T, UserReviewLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserReviewLog.
     * @param {UserReviewLogDeleteArgs} args - Arguments to delete one UserReviewLog.
     * @example
     * // Delete one UserReviewLog
     * const UserReviewLog = await prisma.userReviewLog.delete({
     *   where: {
     *     // ... filter to delete one UserReviewLog
     *   }
     * })
     * 
     */
    delete<T extends UserReviewLogDeleteArgs>(args: SelectSubset<T, UserReviewLogDeleteArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserReviewLog.
     * @param {UserReviewLogUpdateArgs} args - Arguments to update one UserReviewLog.
     * @example
     * // Update one UserReviewLog
     * const userReviewLog = await prisma.userReviewLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserReviewLogUpdateArgs>(args: SelectSubset<T, UserReviewLogUpdateArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserReviewLogs.
     * @param {UserReviewLogDeleteManyArgs} args - Arguments to filter UserReviewLogs to delete.
     * @example
     * // Delete a few UserReviewLogs
     * const { count } = await prisma.userReviewLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserReviewLogDeleteManyArgs>(args?: SelectSubset<T, UserReviewLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserReviewLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserReviewLogs
     * const userReviewLog = await prisma.userReviewLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserReviewLogUpdateManyArgs>(args: SelectSubset<T, UserReviewLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserReviewLogs and returns the data updated in the database.
     * @param {UserReviewLogUpdateManyAndReturnArgs} args - Arguments to update many UserReviewLogs.
     * @example
     * // Update many UserReviewLogs
     * const userReviewLog = await prisma.userReviewLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserReviewLogs and only return the `id`
     * const userReviewLogWithIdOnly = await prisma.userReviewLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserReviewLogUpdateManyAndReturnArgs>(args: SelectSubset<T, UserReviewLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserReviewLog.
     * @param {UserReviewLogUpsertArgs} args - Arguments to update or create a UserReviewLog.
     * @example
     * // Update or create a UserReviewLog
     * const userReviewLog = await prisma.userReviewLog.upsert({
     *   create: {
     *     // ... data to create a UserReviewLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserReviewLog we want to update
     *   }
     * })
     */
    upsert<T extends UserReviewLogUpsertArgs>(args: SelectSubset<T, UserReviewLogUpsertArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserReviewLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewLogCountArgs} args - Arguments to filter UserReviewLogs to count.
     * @example
     * // Count the number of UserReviewLogs
     * const count = await prisma.userReviewLog.count({
     *   where: {
     *     // ... the filter for the UserReviewLogs we want to count
     *   }
     * })
    **/
    count<T extends UserReviewLogCountArgs>(
      args?: Subset<T, UserReviewLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserReviewLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserReviewLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserReviewLogAggregateArgs>(args: Subset<T, UserReviewLogAggregateArgs>): Prisma.PrismaPromise<GetUserReviewLogAggregateType<T>>

    /**
     * Group by UserReviewLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserReviewLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserReviewLogGroupByArgs['orderBy'] }
        : { orderBy?: UserReviewLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserReviewLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserReviewLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserReviewLog model
   */
  readonly fields: UserReviewLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserReviewLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserReviewLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    targetUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviewer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tags<T extends UserReviewLog$tagsArgs<ExtArgs> = {}>(args?: Subset<T, UserReviewLog$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserReviewLog model
   */
  interface UserReviewLogFieldRefs {
    readonly id: FieldRef<"UserReviewLog", 'Int'>
    readonly targetUserId: FieldRef<"UserReviewLog", 'Int'>
    readonly reviewerId: FieldRef<"UserReviewLog", 'Int'>
    readonly score: FieldRef<"UserReviewLog", 'Int'>
    readonly reviewType: FieldRef<"UserReviewLog", 'String'>
    readonly isBlacklisted: FieldRef<"UserReviewLog", 'Boolean'>
    readonly note: FieldRef<"UserReviewLog", 'String'>
    readonly createdAt: FieldRef<"UserReviewLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserReviewLog findUnique
   */
  export type UserReviewLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewLog to fetch.
     */
    where: UserReviewLogWhereUniqueInput
  }

  /**
   * UserReviewLog findUniqueOrThrow
   */
  export type UserReviewLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewLog to fetch.
     */
    where: UserReviewLogWhereUniqueInput
  }

  /**
   * UserReviewLog findFirst
   */
  export type UserReviewLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewLog to fetch.
     */
    where?: UserReviewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserReviewLogs to fetch.
     */
    orderBy?: UserReviewLogOrderByWithRelationInput | UserReviewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserReviewLogs.
     */
    cursor?: UserReviewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserReviewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserReviewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserReviewLogs.
     */
    distinct?: UserReviewLogScalarFieldEnum | UserReviewLogScalarFieldEnum[]
  }

  /**
   * UserReviewLog findFirstOrThrow
   */
  export type UserReviewLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewLog to fetch.
     */
    where?: UserReviewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserReviewLogs to fetch.
     */
    orderBy?: UserReviewLogOrderByWithRelationInput | UserReviewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserReviewLogs.
     */
    cursor?: UserReviewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserReviewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserReviewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserReviewLogs.
     */
    distinct?: UserReviewLogScalarFieldEnum | UserReviewLogScalarFieldEnum[]
  }

  /**
   * UserReviewLog findMany
   */
  export type UserReviewLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewLogs to fetch.
     */
    where?: UserReviewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserReviewLogs to fetch.
     */
    orderBy?: UserReviewLogOrderByWithRelationInput | UserReviewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserReviewLogs.
     */
    cursor?: UserReviewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserReviewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserReviewLogs.
     */
    skip?: number
    distinct?: UserReviewLogScalarFieldEnum | UserReviewLogScalarFieldEnum[]
  }

  /**
   * UserReviewLog create
   */
  export type UserReviewLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * The data needed to create a UserReviewLog.
     */
    data: XOR<UserReviewLogCreateInput, UserReviewLogUncheckedCreateInput>
  }

  /**
   * UserReviewLog createMany
   */
  export type UserReviewLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserReviewLogs.
     */
    data: UserReviewLogCreateManyInput | UserReviewLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserReviewLog createManyAndReturn
   */
  export type UserReviewLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * The data used to create many UserReviewLogs.
     */
    data: UserReviewLogCreateManyInput | UserReviewLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReviewLog update
   */
  export type UserReviewLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * The data needed to update a UserReviewLog.
     */
    data: XOR<UserReviewLogUpdateInput, UserReviewLogUncheckedUpdateInput>
    /**
     * Choose, which UserReviewLog to update.
     */
    where: UserReviewLogWhereUniqueInput
  }

  /**
   * UserReviewLog updateMany
   */
  export type UserReviewLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserReviewLogs.
     */
    data: XOR<UserReviewLogUpdateManyMutationInput, UserReviewLogUncheckedUpdateManyInput>
    /**
     * Filter which UserReviewLogs to update
     */
    where?: UserReviewLogWhereInput
    /**
     * Limit how many UserReviewLogs to update.
     */
    limit?: number
  }

  /**
   * UserReviewLog updateManyAndReturn
   */
  export type UserReviewLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * The data used to update UserReviewLogs.
     */
    data: XOR<UserReviewLogUpdateManyMutationInput, UserReviewLogUncheckedUpdateManyInput>
    /**
     * Filter which UserReviewLogs to update
     */
    where?: UserReviewLogWhereInput
    /**
     * Limit how many UserReviewLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReviewLog upsert
   */
  export type UserReviewLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * The filter to search for the UserReviewLog to update in case it exists.
     */
    where: UserReviewLogWhereUniqueInput
    /**
     * In case the UserReviewLog found by the `where` argument doesn't exist, create a new UserReviewLog with this data.
     */
    create: XOR<UserReviewLogCreateInput, UserReviewLogUncheckedCreateInput>
    /**
     * In case the UserReviewLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserReviewLogUpdateInput, UserReviewLogUncheckedUpdateInput>
  }

  /**
   * UserReviewLog delete
   */
  export type UserReviewLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    /**
     * Filter which UserReviewLog to delete.
     */
    where: UserReviewLogWhereUniqueInput
  }

  /**
   * UserReviewLog deleteMany
   */
  export type UserReviewLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserReviewLogs to delete
     */
    where?: UserReviewLogWhereInput
    /**
     * Limit how many UserReviewLogs to delete.
     */
    limit?: number
  }

  /**
   * UserReviewLog.tags
   */
  export type UserReviewLog$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    where?: UserReviewTagWhereInput
    orderBy?: UserReviewTagOrderByWithRelationInput | UserReviewTagOrderByWithRelationInput[]
    cursor?: UserReviewTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserReviewTagScalarFieldEnum | UserReviewTagScalarFieldEnum[]
  }

  /**
   * UserReviewLog without action
   */
  export type UserReviewLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
  }


  /**
   * Model ResumeReviewLog
   */

  export type AggregateResumeReviewLog = {
    _count: ResumeReviewLogCountAggregateOutputType | null
    _avg: ResumeReviewLogAvgAggregateOutputType | null
    _sum: ResumeReviewLogSumAggregateOutputType | null
    _min: ResumeReviewLogMinAggregateOutputType | null
    _max: ResumeReviewLogMaxAggregateOutputType | null
  }

  export type ResumeReviewLogAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
    reviewerId: number | null
    score: number | null
  }

  export type ResumeReviewLogSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
    reviewerId: number | null
    score: number | null
  }

  export type ResumeReviewLogMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    reviewerId: number | null
    score: number | null
    status: $Enums.ReviewStatus | null
    note: string | null
    createdAt: Date | null
  }

  export type ResumeReviewLogMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    reviewerId: number | null
    score: number | null
    status: $Enums.ReviewStatus | null
    note: string | null
    createdAt: Date | null
  }

  export type ResumeReviewLogCountAggregateOutputType = {
    id: number
    resumeId: number
    reviewerId: number
    score: number
    status: number
    note: number
    createdAt: number
    _all: number
  }


  export type ResumeReviewLogAvgAggregateInputType = {
    id?: true
    resumeId?: true
    reviewerId?: true
    score?: true
  }

  export type ResumeReviewLogSumAggregateInputType = {
    id?: true
    resumeId?: true
    reviewerId?: true
    score?: true
  }

  export type ResumeReviewLogMinAggregateInputType = {
    id?: true
    resumeId?: true
    reviewerId?: true
    score?: true
    status?: true
    note?: true
    createdAt?: true
  }

  export type ResumeReviewLogMaxAggregateInputType = {
    id?: true
    resumeId?: true
    reviewerId?: true
    score?: true
    status?: true
    note?: true
    createdAt?: true
  }

  export type ResumeReviewLogCountAggregateInputType = {
    id?: true
    resumeId?: true
    reviewerId?: true
    score?: true
    status?: true
    note?: true
    createdAt?: true
    _all?: true
  }

  export type ResumeReviewLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeReviewLog to aggregate.
     */
    where?: ResumeReviewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewLogs to fetch.
     */
    orderBy?: ResumeReviewLogOrderByWithRelationInput | ResumeReviewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeReviewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeReviewLogs
    **/
    _count?: true | ResumeReviewLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeReviewLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeReviewLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeReviewLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeReviewLogMaxAggregateInputType
  }

  export type GetResumeReviewLogAggregateType<T extends ResumeReviewLogAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeReviewLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeReviewLog[P]>
      : GetScalarType<T[P], AggregateResumeReviewLog[P]>
  }




  export type ResumeReviewLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeReviewLogWhereInput
    orderBy?: ResumeReviewLogOrderByWithAggregationInput | ResumeReviewLogOrderByWithAggregationInput[]
    by: ResumeReviewLogScalarFieldEnum[] | ResumeReviewLogScalarFieldEnum
    having?: ResumeReviewLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeReviewLogCountAggregateInputType | true
    _avg?: ResumeReviewLogAvgAggregateInputType
    _sum?: ResumeReviewLogSumAggregateInputType
    _min?: ResumeReviewLogMinAggregateInputType
    _max?: ResumeReviewLogMaxAggregateInputType
  }

  export type ResumeReviewLogGroupByOutputType = {
    id: number
    resumeId: number
    reviewerId: number
    score: number | null
    status: $Enums.ReviewStatus
    note: string | null
    createdAt: Date
    _count: ResumeReviewLogCountAggregateOutputType | null
    _avg: ResumeReviewLogAvgAggregateOutputType | null
    _sum: ResumeReviewLogSumAggregateOutputType | null
    _min: ResumeReviewLogMinAggregateOutputType | null
    _max: ResumeReviewLogMaxAggregateOutputType | null
  }

  type GetResumeReviewLogGroupByPayload<T extends ResumeReviewLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeReviewLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeReviewLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeReviewLogGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeReviewLogGroupByOutputType[P]>
        }
      >
    >


  export type ResumeReviewLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    reviewerId?: boolean
    score?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | ResumeReviewLog$tagsArgs<ExtArgs>
    _count?: boolean | ResumeReviewLogCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewLog"]>

  export type ResumeReviewLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    reviewerId?: boolean
    score?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewLog"]>

  export type ResumeReviewLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    reviewerId?: boolean
    score?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewLog"]>

  export type ResumeReviewLogSelectScalar = {
    id?: boolean
    resumeId?: boolean
    reviewerId?: boolean
    score?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
  }

  export type ResumeReviewLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "reviewerId" | "score" | "status" | "note" | "createdAt", ExtArgs["result"]["resumeReviewLog"]>
  export type ResumeReviewLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | ResumeReviewLog$tagsArgs<ExtArgs>
    _count?: boolean | ResumeReviewLogCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ResumeReviewLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResumeReviewLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UserResumeDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ResumeReviewLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeReviewLog"
    objects: {
      resume: Prisma.$UserResumePayload<ExtArgs>
      reviewer: Prisma.$UserPayload<ExtArgs>
      tags: Prisma.$ResumeReviewTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      reviewerId: number
      score: number | null
      status: $Enums.ReviewStatus
      note: string | null
      createdAt: Date
    }, ExtArgs["result"]["resumeReviewLog"]>
    composites: {}
  }

  type ResumeReviewLogGetPayload<S extends boolean | null | undefined | ResumeReviewLogDefaultArgs> = $Result.GetResult<Prisma.$ResumeReviewLogPayload, S>

  type ResumeReviewLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeReviewLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeReviewLogCountAggregateInputType | true
    }

  export interface ResumeReviewLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeReviewLog'], meta: { name: 'ResumeReviewLog' } }
    /**
     * Find zero or one ResumeReviewLog that matches the filter.
     * @param {ResumeReviewLogFindUniqueArgs} args - Arguments to find a ResumeReviewLog
     * @example
     * // Get one ResumeReviewLog
     * const resumeReviewLog = await prisma.resumeReviewLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeReviewLogFindUniqueArgs>(args: SelectSubset<T, ResumeReviewLogFindUniqueArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeReviewLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeReviewLogFindUniqueOrThrowArgs} args - Arguments to find a ResumeReviewLog
     * @example
     * // Get one ResumeReviewLog
     * const resumeReviewLog = await prisma.resumeReviewLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeReviewLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeReviewLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeReviewLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewLogFindFirstArgs} args - Arguments to find a ResumeReviewLog
     * @example
     * // Get one ResumeReviewLog
     * const resumeReviewLog = await prisma.resumeReviewLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeReviewLogFindFirstArgs>(args?: SelectSubset<T, ResumeReviewLogFindFirstArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeReviewLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewLogFindFirstOrThrowArgs} args - Arguments to find a ResumeReviewLog
     * @example
     * // Get one ResumeReviewLog
     * const resumeReviewLog = await prisma.resumeReviewLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeReviewLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeReviewLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeReviewLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeReviewLogs
     * const resumeReviewLogs = await prisma.resumeReviewLog.findMany()
     * 
     * // Get first 10 ResumeReviewLogs
     * const resumeReviewLogs = await prisma.resumeReviewLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeReviewLogWithIdOnly = await prisma.resumeReviewLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeReviewLogFindManyArgs>(args?: SelectSubset<T, ResumeReviewLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeReviewLog.
     * @param {ResumeReviewLogCreateArgs} args - Arguments to create a ResumeReviewLog.
     * @example
     * // Create one ResumeReviewLog
     * const ResumeReviewLog = await prisma.resumeReviewLog.create({
     *   data: {
     *     // ... data to create a ResumeReviewLog
     *   }
     * })
     * 
     */
    create<T extends ResumeReviewLogCreateArgs>(args: SelectSubset<T, ResumeReviewLogCreateArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeReviewLogs.
     * @param {ResumeReviewLogCreateManyArgs} args - Arguments to create many ResumeReviewLogs.
     * @example
     * // Create many ResumeReviewLogs
     * const resumeReviewLog = await prisma.resumeReviewLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeReviewLogCreateManyArgs>(args?: SelectSubset<T, ResumeReviewLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeReviewLogs and returns the data saved in the database.
     * @param {ResumeReviewLogCreateManyAndReturnArgs} args - Arguments to create many ResumeReviewLogs.
     * @example
     * // Create many ResumeReviewLogs
     * const resumeReviewLog = await prisma.resumeReviewLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeReviewLogs and only return the `id`
     * const resumeReviewLogWithIdOnly = await prisma.resumeReviewLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeReviewLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeReviewLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeReviewLog.
     * @param {ResumeReviewLogDeleteArgs} args - Arguments to delete one ResumeReviewLog.
     * @example
     * // Delete one ResumeReviewLog
     * const ResumeReviewLog = await prisma.resumeReviewLog.delete({
     *   where: {
     *     // ... filter to delete one ResumeReviewLog
     *   }
     * })
     * 
     */
    delete<T extends ResumeReviewLogDeleteArgs>(args: SelectSubset<T, ResumeReviewLogDeleteArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeReviewLog.
     * @param {ResumeReviewLogUpdateArgs} args - Arguments to update one ResumeReviewLog.
     * @example
     * // Update one ResumeReviewLog
     * const resumeReviewLog = await prisma.resumeReviewLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeReviewLogUpdateArgs>(args: SelectSubset<T, ResumeReviewLogUpdateArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeReviewLogs.
     * @param {ResumeReviewLogDeleteManyArgs} args - Arguments to filter ResumeReviewLogs to delete.
     * @example
     * // Delete a few ResumeReviewLogs
     * const { count } = await prisma.resumeReviewLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeReviewLogDeleteManyArgs>(args?: SelectSubset<T, ResumeReviewLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeReviewLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeReviewLogs
     * const resumeReviewLog = await prisma.resumeReviewLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeReviewLogUpdateManyArgs>(args: SelectSubset<T, ResumeReviewLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeReviewLogs and returns the data updated in the database.
     * @param {ResumeReviewLogUpdateManyAndReturnArgs} args - Arguments to update many ResumeReviewLogs.
     * @example
     * // Update many ResumeReviewLogs
     * const resumeReviewLog = await prisma.resumeReviewLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeReviewLogs and only return the `id`
     * const resumeReviewLogWithIdOnly = await prisma.resumeReviewLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeReviewLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeReviewLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeReviewLog.
     * @param {ResumeReviewLogUpsertArgs} args - Arguments to update or create a ResumeReviewLog.
     * @example
     * // Update or create a ResumeReviewLog
     * const resumeReviewLog = await prisma.resumeReviewLog.upsert({
     *   create: {
     *     // ... data to create a ResumeReviewLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeReviewLog we want to update
     *   }
     * })
     */
    upsert<T extends ResumeReviewLogUpsertArgs>(args: SelectSubset<T, ResumeReviewLogUpsertArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeReviewLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewLogCountArgs} args - Arguments to filter ResumeReviewLogs to count.
     * @example
     * // Count the number of ResumeReviewLogs
     * const count = await prisma.resumeReviewLog.count({
     *   where: {
     *     // ... the filter for the ResumeReviewLogs we want to count
     *   }
     * })
    **/
    count<T extends ResumeReviewLogCountArgs>(
      args?: Subset<T, ResumeReviewLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeReviewLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeReviewLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeReviewLogAggregateArgs>(args: Subset<T, ResumeReviewLogAggregateArgs>): Prisma.PrismaPromise<GetResumeReviewLogAggregateType<T>>

    /**
     * Group by ResumeReviewLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeReviewLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeReviewLogGroupByArgs['orderBy'] }
        : { orderBy?: ResumeReviewLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeReviewLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeReviewLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeReviewLog model
   */
  readonly fields: ResumeReviewLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeReviewLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeReviewLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UserResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserResumeDefaultArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviewer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tags<T extends ResumeReviewLog$tagsArgs<ExtArgs> = {}>(args?: Subset<T, ResumeReviewLog$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeReviewLog model
   */
  interface ResumeReviewLogFieldRefs {
    readonly id: FieldRef<"ResumeReviewLog", 'Int'>
    readonly resumeId: FieldRef<"ResumeReviewLog", 'Int'>
    readonly reviewerId: FieldRef<"ResumeReviewLog", 'Int'>
    readonly score: FieldRef<"ResumeReviewLog", 'Int'>
    readonly status: FieldRef<"ResumeReviewLog", 'ReviewStatus'>
    readonly note: FieldRef<"ResumeReviewLog", 'String'>
    readonly createdAt: FieldRef<"ResumeReviewLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeReviewLog findUnique
   */
  export type ResumeReviewLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewLog to fetch.
     */
    where: ResumeReviewLogWhereUniqueInput
  }

  /**
   * ResumeReviewLog findUniqueOrThrow
   */
  export type ResumeReviewLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewLog to fetch.
     */
    where: ResumeReviewLogWhereUniqueInput
  }

  /**
   * ResumeReviewLog findFirst
   */
  export type ResumeReviewLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewLog to fetch.
     */
    where?: ResumeReviewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewLogs to fetch.
     */
    orderBy?: ResumeReviewLogOrderByWithRelationInput | ResumeReviewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeReviewLogs.
     */
    cursor?: ResumeReviewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeReviewLogs.
     */
    distinct?: ResumeReviewLogScalarFieldEnum | ResumeReviewLogScalarFieldEnum[]
  }

  /**
   * ResumeReviewLog findFirstOrThrow
   */
  export type ResumeReviewLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewLog to fetch.
     */
    where?: ResumeReviewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewLogs to fetch.
     */
    orderBy?: ResumeReviewLogOrderByWithRelationInput | ResumeReviewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeReviewLogs.
     */
    cursor?: ResumeReviewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeReviewLogs.
     */
    distinct?: ResumeReviewLogScalarFieldEnum | ResumeReviewLogScalarFieldEnum[]
  }

  /**
   * ResumeReviewLog findMany
   */
  export type ResumeReviewLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewLogs to fetch.
     */
    where?: ResumeReviewLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewLogs to fetch.
     */
    orderBy?: ResumeReviewLogOrderByWithRelationInput | ResumeReviewLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeReviewLogs.
     */
    cursor?: ResumeReviewLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewLogs.
     */
    skip?: number
    distinct?: ResumeReviewLogScalarFieldEnum | ResumeReviewLogScalarFieldEnum[]
  }

  /**
   * ResumeReviewLog create
   */
  export type ResumeReviewLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeReviewLog.
     */
    data: XOR<ResumeReviewLogCreateInput, ResumeReviewLogUncheckedCreateInput>
  }

  /**
   * ResumeReviewLog createMany
   */
  export type ResumeReviewLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeReviewLogs.
     */
    data: ResumeReviewLogCreateManyInput | ResumeReviewLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeReviewLog createManyAndReturn
   */
  export type ResumeReviewLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeReviewLogs.
     */
    data: ResumeReviewLogCreateManyInput | ResumeReviewLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeReviewLog update
   */
  export type ResumeReviewLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeReviewLog.
     */
    data: XOR<ResumeReviewLogUpdateInput, ResumeReviewLogUncheckedUpdateInput>
    /**
     * Choose, which ResumeReviewLog to update.
     */
    where: ResumeReviewLogWhereUniqueInput
  }

  /**
   * ResumeReviewLog updateMany
   */
  export type ResumeReviewLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeReviewLogs.
     */
    data: XOR<ResumeReviewLogUpdateManyMutationInput, ResumeReviewLogUncheckedUpdateManyInput>
    /**
     * Filter which ResumeReviewLogs to update
     */
    where?: ResumeReviewLogWhereInput
    /**
     * Limit how many ResumeReviewLogs to update.
     */
    limit?: number
  }

  /**
   * ResumeReviewLog updateManyAndReturn
   */
  export type ResumeReviewLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * The data used to update ResumeReviewLogs.
     */
    data: XOR<ResumeReviewLogUpdateManyMutationInput, ResumeReviewLogUncheckedUpdateManyInput>
    /**
     * Filter which ResumeReviewLogs to update
     */
    where?: ResumeReviewLogWhereInput
    /**
     * Limit how many ResumeReviewLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeReviewLog upsert
   */
  export type ResumeReviewLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeReviewLog to update in case it exists.
     */
    where: ResumeReviewLogWhereUniqueInput
    /**
     * In case the ResumeReviewLog found by the `where` argument doesn't exist, create a new ResumeReviewLog with this data.
     */
    create: XOR<ResumeReviewLogCreateInput, ResumeReviewLogUncheckedCreateInput>
    /**
     * In case the ResumeReviewLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeReviewLogUpdateInput, ResumeReviewLogUncheckedUpdateInput>
  }

  /**
   * ResumeReviewLog delete
   */
  export type ResumeReviewLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    /**
     * Filter which ResumeReviewLog to delete.
     */
    where: ResumeReviewLogWhereUniqueInput
  }

  /**
   * ResumeReviewLog deleteMany
   */
  export type ResumeReviewLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeReviewLogs to delete
     */
    where?: ResumeReviewLogWhereInput
    /**
     * Limit how many ResumeReviewLogs to delete.
     */
    limit?: number
  }

  /**
   * ResumeReviewLog.tags
   */
  export type ResumeReviewLog$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    where?: ResumeReviewTagWhereInput
    orderBy?: ResumeReviewTagOrderByWithRelationInput | ResumeReviewTagOrderByWithRelationInput[]
    cursor?: ResumeReviewTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeReviewTagScalarFieldEnum | ResumeReviewTagScalarFieldEnum[]
  }

  /**
   * ResumeReviewLog without action
   */
  export type ResumeReviewLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
  }


  /**
   * Model UserReviewTag
   */

  export type AggregateUserReviewTag = {
    _count: UserReviewTagCountAggregateOutputType | null
    _avg: UserReviewTagAvgAggregateOutputType | null
    _sum: UserReviewTagSumAggregateOutputType | null
    _min: UserReviewTagMinAggregateOutputType | null
    _max: UserReviewTagMaxAggregateOutputType | null
  }

  export type UserReviewTagAvgAggregateOutputType = {
    id: number | null
    tagId: number | null
    reviewId: number | null
  }

  export type UserReviewTagSumAggregateOutputType = {
    id: number | null
    tagId: number | null
    reviewId: number | null
  }

  export type UserReviewTagMinAggregateOutputType = {
    id: number | null
    tagId: number | null
    reviewId: number | null
  }

  export type UserReviewTagMaxAggregateOutputType = {
    id: number | null
    tagId: number | null
    reviewId: number | null
  }

  export type UserReviewTagCountAggregateOutputType = {
    id: number
    tagId: number
    reviewId: number
    _all: number
  }


  export type UserReviewTagAvgAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
  }

  export type UserReviewTagSumAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
  }

  export type UserReviewTagMinAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
  }

  export type UserReviewTagMaxAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
  }

  export type UserReviewTagCountAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
    _all?: true
  }

  export type UserReviewTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserReviewTag to aggregate.
     */
    where?: UserReviewTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserReviewTags to fetch.
     */
    orderBy?: UserReviewTagOrderByWithRelationInput | UserReviewTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserReviewTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserReviewTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserReviewTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserReviewTags
    **/
    _count?: true | UserReviewTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserReviewTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserReviewTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserReviewTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserReviewTagMaxAggregateInputType
  }

  export type GetUserReviewTagAggregateType<T extends UserReviewTagAggregateArgs> = {
        [P in keyof T & keyof AggregateUserReviewTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserReviewTag[P]>
      : GetScalarType<T[P], AggregateUserReviewTag[P]>
  }




  export type UserReviewTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserReviewTagWhereInput
    orderBy?: UserReviewTagOrderByWithAggregationInput | UserReviewTagOrderByWithAggregationInput[]
    by: UserReviewTagScalarFieldEnum[] | UserReviewTagScalarFieldEnum
    having?: UserReviewTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserReviewTagCountAggregateInputType | true
    _avg?: UserReviewTagAvgAggregateInputType
    _sum?: UserReviewTagSumAggregateInputType
    _min?: UserReviewTagMinAggregateInputType
    _max?: UserReviewTagMaxAggregateInputType
  }

  export type UserReviewTagGroupByOutputType = {
    id: number
    tagId: number
    reviewId: number
    _count: UserReviewTagCountAggregateOutputType | null
    _avg: UserReviewTagAvgAggregateOutputType | null
    _sum: UserReviewTagSumAggregateOutputType | null
    _min: UserReviewTagMinAggregateOutputType | null
    _max: UserReviewTagMaxAggregateOutputType | null
  }

  type GetUserReviewTagGroupByPayload<T extends UserReviewTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserReviewTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserReviewTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserReviewTagGroupByOutputType[P]>
            : GetScalarType<T[P], UserReviewTagGroupByOutputType[P]>
        }
      >
    >


  export type UserReviewTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    reviewId?: boolean
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | UserReviewLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReviewTag"]>

  export type UserReviewTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    reviewId?: boolean
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | UserReviewLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReviewTag"]>

  export type UserReviewTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    reviewId?: boolean
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | UserReviewLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReviewTag"]>

  export type UserReviewTagSelectScalar = {
    id?: boolean
    tagId?: boolean
    reviewId?: boolean
  }

  export type UserReviewTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tagId" | "reviewId", ExtArgs["result"]["userReviewTag"]>
  export type UserReviewTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | UserReviewLogDefaultArgs<ExtArgs>
  }
  export type UserReviewTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | UserReviewLogDefaultArgs<ExtArgs>
  }
  export type UserReviewTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | UserReviewLogDefaultArgs<ExtArgs>
  }

  export type $UserReviewTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserReviewTag"
    objects: {
      tag: Prisma.$ReviewTagOptionPayload<ExtArgs>
      review: Prisma.$UserReviewLogPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tagId: number
      reviewId: number
    }, ExtArgs["result"]["userReviewTag"]>
    composites: {}
  }

  type UserReviewTagGetPayload<S extends boolean | null | undefined | UserReviewTagDefaultArgs> = $Result.GetResult<Prisma.$UserReviewTagPayload, S>

  type UserReviewTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserReviewTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserReviewTagCountAggregateInputType | true
    }

  export interface UserReviewTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserReviewTag'], meta: { name: 'UserReviewTag' } }
    /**
     * Find zero or one UserReviewTag that matches the filter.
     * @param {UserReviewTagFindUniqueArgs} args - Arguments to find a UserReviewTag
     * @example
     * // Get one UserReviewTag
     * const userReviewTag = await prisma.userReviewTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserReviewTagFindUniqueArgs>(args: SelectSubset<T, UserReviewTagFindUniqueArgs<ExtArgs>>): Prisma__UserReviewTagClient<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserReviewTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserReviewTagFindUniqueOrThrowArgs} args - Arguments to find a UserReviewTag
     * @example
     * // Get one UserReviewTag
     * const userReviewTag = await prisma.userReviewTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserReviewTagFindUniqueOrThrowArgs>(args: SelectSubset<T, UserReviewTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserReviewTagClient<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserReviewTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewTagFindFirstArgs} args - Arguments to find a UserReviewTag
     * @example
     * // Get one UserReviewTag
     * const userReviewTag = await prisma.userReviewTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserReviewTagFindFirstArgs>(args?: SelectSubset<T, UserReviewTagFindFirstArgs<ExtArgs>>): Prisma__UserReviewTagClient<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserReviewTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewTagFindFirstOrThrowArgs} args - Arguments to find a UserReviewTag
     * @example
     * // Get one UserReviewTag
     * const userReviewTag = await prisma.userReviewTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserReviewTagFindFirstOrThrowArgs>(args?: SelectSubset<T, UserReviewTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserReviewTagClient<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserReviewTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserReviewTags
     * const userReviewTags = await prisma.userReviewTag.findMany()
     * 
     * // Get first 10 UserReviewTags
     * const userReviewTags = await prisma.userReviewTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userReviewTagWithIdOnly = await prisma.userReviewTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserReviewTagFindManyArgs>(args?: SelectSubset<T, UserReviewTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserReviewTag.
     * @param {UserReviewTagCreateArgs} args - Arguments to create a UserReviewTag.
     * @example
     * // Create one UserReviewTag
     * const UserReviewTag = await prisma.userReviewTag.create({
     *   data: {
     *     // ... data to create a UserReviewTag
     *   }
     * })
     * 
     */
    create<T extends UserReviewTagCreateArgs>(args: SelectSubset<T, UserReviewTagCreateArgs<ExtArgs>>): Prisma__UserReviewTagClient<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserReviewTags.
     * @param {UserReviewTagCreateManyArgs} args - Arguments to create many UserReviewTags.
     * @example
     * // Create many UserReviewTags
     * const userReviewTag = await prisma.userReviewTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserReviewTagCreateManyArgs>(args?: SelectSubset<T, UserReviewTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserReviewTags and returns the data saved in the database.
     * @param {UserReviewTagCreateManyAndReturnArgs} args - Arguments to create many UserReviewTags.
     * @example
     * // Create many UserReviewTags
     * const userReviewTag = await prisma.userReviewTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserReviewTags and only return the `id`
     * const userReviewTagWithIdOnly = await prisma.userReviewTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserReviewTagCreateManyAndReturnArgs>(args?: SelectSubset<T, UserReviewTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserReviewTag.
     * @param {UserReviewTagDeleteArgs} args - Arguments to delete one UserReviewTag.
     * @example
     * // Delete one UserReviewTag
     * const UserReviewTag = await prisma.userReviewTag.delete({
     *   where: {
     *     // ... filter to delete one UserReviewTag
     *   }
     * })
     * 
     */
    delete<T extends UserReviewTagDeleteArgs>(args: SelectSubset<T, UserReviewTagDeleteArgs<ExtArgs>>): Prisma__UserReviewTagClient<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserReviewTag.
     * @param {UserReviewTagUpdateArgs} args - Arguments to update one UserReviewTag.
     * @example
     * // Update one UserReviewTag
     * const userReviewTag = await prisma.userReviewTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserReviewTagUpdateArgs>(args: SelectSubset<T, UserReviewTagUpdateArgs<ExtArgs>>): Prisma__UserReviewTagClient<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserReviewTags.
     * @param {UserReviewTagDeleteManyArgs} args - Arguments to filter UserReviewTags to delete.
     * @example
     * // Delete a few UserReviewTags
     * const { count } = await prisma.userReviewTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserReviewTagDeleteManyArgs>(args?: SelectSubset<T, UserReviewTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserReviewTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserReviewTags
     * const userReviewTag = await prisma.userReviewTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserReviewTagUpdateManyArgs>(args: SelectSubset<T, UserReviewTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserReviewTags and returns the data updated in the database.
     * @param {UserReviewTagUpdateManyAndReturnArgs} args - Arguments to update many UserReviewTags.
     * @example
     * // Update many UserReviewTags
     * const userReviewTag = await prisma.userReviewTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserReviewTags and only return the `id`
     * const userReviewTagWithIdOnly = await prisma.userReviewTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserReviewTagUpdateManyAndReturnArgs>(args: SelectSubset<T, UserReviewTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserReviewTag.
     * @param {UserReviewTagUpsertArgs} args - Arguments to update or create a UserReviewTag.
     * @example
     * // Update or create a UserReviewTag
     * const userReviewTag = await prisma.userReviewTag.upsert({
     *   create: {
     *     // ... data to create a UserReviewTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserReviewTag we want to update
     *   }
     * })
     */
    upsert<T extends UserReviewTagUpsertArgs>(args: SelectSubset<T, UserReviewTagUpsertArgs<ExtArgs>>): Prisma__UserReviewTagClient<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserReviewTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewTagCountArgs} args - Arguments to filter UserReviewTags to count.
     * @example
     * // Count the number of UserReviewTags
     * const count = await prisma.userReviewTag.count({
     *   where: {
     *     // ... the filter for the UserReviewTags we want to count
     *   }
     * })
    **/
    count<T extends UserReviewTagCountArgs>(
      args?: Subset<T, UserReviewTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserReviewTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserReviewTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserReviewTagAggregateArgs>(args: Subset<T, UserReviewTagAggregateArgs>): Prisma.PrismaPromise<GetUserReviewTagAggregateType<T>>

    /**
     * Group by UserReviewTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReviewTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserReviewTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserReviewTagGroupByArgs['orderBy'] }
        : { orderBy?: UserReviewTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserReviewTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserReviewTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserReviewTag model
   */
  readonly fields: UserReviewTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserReviewTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserReviewTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends ReviewTagOptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewTagOptionDefaultArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    review<T extends UserReviewLogDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserReviewLogDefaultArgs<ExtArgs>>): Prisma__UserReviewLogClient<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserReviewTag model
   */
  interface UserReviewTagFieldRefs {
    readonly id: FieldRef<"UserReviewTag", 'Int'>
    readonly tagId: FieldRef<"UserReviewTag", 'Int'>
    readonly reviewId: FieldRef<"UserReviewTag", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserReviewTag findUnique
   */
  export type UserReviewTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewTag to fetch.
     */
    where: UserReviewTagWhereUniqueInput
  }

  /**
   * UserReviewTag findUniqueOrThrow
   */
  export type UserReviewTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewTag to fetch.
     */
    where: UserReviewTagWhereUniqueInput
  }

  /**
   * UserReviewTag findFirst
   */
  export type UserReviewTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewTag to fetch.
     */
    where?: UserReviewTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserReviewTags to fetch.
     */
    orderBy?: UserReviewTagOrderByWithRelationInput | UserReviewTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserReviewTags.
     */
    cursor?: UserReviewTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserReviewTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserReviewTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserReviewTags.
     */
    distinct?: UserReviewTagScalarFieldEnum | UserReviewTagScalarFieldEnum[]
  }

  /**
   * UserReviewTag findFirstOrThrow
   */
  export type UserReviewTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewTag to fetch.
     */
    where?: UserReviewTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserReviewTags to fetch.
     */
    orderBy?: UserReviewTagOrderByWithRelationInput | UserReviewTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserReviewTags.
     */
    cursor?: UserReviewTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserReviewTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserReviewTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserReviewTags.
     */
    distinct?: UserReviewTagScalarFieldEnum | UserReviewTagScalarFieldEnum[]
  }

  /**
   * UserReviewTag findMany
   */
  export type UserReviewTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which UserReviewTags to fetch.
     */
    where?: UserReviewTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserReviewTags to fetch.
     */
    orderBy?: UserReviewTagOrderByWithRelationInput | UserReviewTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserReviewTags.
     */
    cursor?: UserReviewTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserReviewTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserReviewTags.
     */
    skip?: number
    distinct?: UserReviewTagScalarFieldEnum | UserReviewTagScalarFieldEnum[]
  }

  /**
   * UserReviewTag create
   */
  export type UserReviewTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * The data needed to create a UserReviewTag.
     */
    data: XOR<UserReviewTagCreateInput, UserReviewTagUncheckedCreateInput>
  }

  /**
   * UserReviewTag createMany
   */
  export type UserReviewTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserReviewTags.
     */
    data: UserReviewTagCreateManyInput | UserReviewTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserReviewTag createManyAndReturn
   */
  export type UserReviewTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * The data used to create many UserReviewTags.
     */
    data: UserReviewTagCreateManyInput | UserReviewTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReviewTag update
   */
  export type UserReviewTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * The data needed to update a UserReviewTag.
     */
    data: XOR<UserReviewTagUpdateInput, UserReviewTagUncheckedUpdateInput>
    /**
     * Choose, which UserReviewTag to update.
     */
    where: UserReviewTagWhereUniqueInput
  }

  /**
   * UserReviewTag updateMany
   */
  export type UserReviewTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserReviewTags.
     */
    data: XOR<UserReviewTagUpdateManyMutationInput, UserReviewTagUncheckedUpdateManyInput>
    /**
     * Filter which UserReviewTags to update
     */
    where?: UserReviewTagWhereInput
    /**
     * Limit how many UserReviewTags to update.
     */
    limit?: number
  }

  /**
   * UserReviewTag updateManyAndReturn
   */
  export type UserReviewTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * The data used to update UserReviewTags.
     */
    data: XOR<UserReviewTagUpdateManyMutationInput, UserReviewTagUncheckedUpdateManyInput>
    /**
     * Filter which UserReviewTags to update
     */
    where?: UserReviewTagWhereInput
    /**
     * Limit how many UserReviewTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReviewTag upsert
   */
  export type UserReviewTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * The filter to search for the UserReviewTag to update in case it exists.
     */
    where: UserReviewTagWhereUniqueInput
    /**
     * In case the UserReviewTag found by the `where` argument doesn't exist, create a new UserReviewTag with this data.
     */
    create: XOR<UserReviewTagCreateInput, UserReviewTagUncheckedCreateInput>
    /**
     * In case the UserReviewTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserReviewTagUpdateInput, UserReviewTagUncheckedUpdateInput>
  }

  /**
   * UserReviewTag delete
   */
  export type UserReviewTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    /**
     * Filter which UserReviewTag to delete.
     */
    where: UserReviewTagWhereUniqueInput
  }

  /**
   * UserReviewTag deleteMany
   */
  export type UserReviewTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserReviewTags to delete
     */
    where?: UserReviewTagWhereInput
    /**
     * Limit how many UserReviewTags to delete.
     */
    limit?: number
  }

  /**
   * UserReviewTag without action
   */
  export type UserReviewTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
  }


  /**
   * Model ResumeReviewTag
   */

  export type AggregateResumeReviewTag = {
    _count: ResumeReviewTagCountAggregateOutputType | null
    _avg: ResumeReviewTagAvgAggregateOutputType | null
    _sum: ResumeReviewTagSumAggregateOutputType | null
    _min: ResumeReviewTagMinAggregateOutputType | null
    _max: ResumeReviewTagMaxAggregateOutputType | null
  }

  export type ResumeReviewTagAvgAggregateOutputType = {
    id: number | null
    tagId: number | null
    reviewId: number | null
  }

  export type ResumeReviewTagSumAggregateOutputType = {
    id: number | null
    tagId: number | null
    reviewId: number | null
  }

  export type ResumeReviewTagMinAggregateOutputType = {
    id: number | null
    tagId: number | null
    reviewId: number | null
  }

  export type ResumeReviewTagMaxAggregateOutputType = {
    id: number | null
    tagId: number | null
    reviewId: number | null
  }

  export type ResumeReviewTagCountAggregateOutputType = {
    id: number
    tagId: number
    reviewId: number
    _all: number
  }


  export type ResumeReviewTagAvgAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
  }

  export type ResumeReviewTagSumAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
  }

  export type ResumeReviewTagMinAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
  }

  export type ResumeReviewTagMaxAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
  }

  export type ResumeReviewTagCountAggregateInputType = {
    id?: true
    tagId?: true
    reviewId?: true
    _all?: true
  }

  export type ResumeReviewTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeReviewTag to aggregate.
     */
    where?: ResumeReviewTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewTags to fetch.
     */
    orderBy?: ResumeReviewTagOrderByWithRelationInput | ResumeReviewTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeReviewTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeReviewTags
    **/
    _count?: true | ResumeReviewTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeReviewTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeReviewTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeReviewTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeReviewTagMaxAggregateInputType
  }

  export type GetResumeReviewTagAggregateType<T extends ResumeReviewTagAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeReviewTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeReviewTag[P]>
      : GetScalarType<T[P], AggregateResumeReviewTag[P]>
  }




  export type ResumeReviewTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeReviewTagWhereInput
    orderBy?: ResumeReviewTagOrderByWithAggregationInput | ResumeReviewTagOrderByWithAggregationInput[]
    by: ResumeReviewTagScalarFieldEnum[] | ResumeReviewTagScalarFieldEnum
    having?: ResumeReviewTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeReviewTagCountAggregateInputType | true
    _avg?: ResumeReviewTagAvgAggregateInputType
    _sum?: ResumeReviewTagSumAggregateInputType
    _min?: ResumeReviewTagMinAggregateInputType
    _max?: ResumeReviewTagMaxAggregateInputType
  }

  export type ResumeReviewTagGroupByOutputType = {
    id: number
    tagId: number
    reviewId: number
    _count: ResumeReviewTagCountAggregateOutputType | null
    _avg: ResumeReviewTagAvgAggregateOutputType | null
    _sum: ResumeReviewTagSumAggregateOutputType | null
    _min: ResumeReviewTagMinAggregateOutputType | null
    _max: ResumeReviewTagMaxAggregateOutputType | null
  }

  type GetResumeReviewTagGroupByPayload<T extends ResumeReviewTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeReviewTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeReviewTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeReviewTagGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeReviewTagGroupByOutputType[P]>
        }
      >
    >


  export type ResumeReviewTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    reviewId?: boolean
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | ResumeReviewLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewTag"]>

  export type ResumeReviewTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    reviewId?: boolean
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | ResumeReviewLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewTag"]>

  export type ResumeReviewTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    reviewId?: boolean
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | ResumeReviewLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeReviewTag"]>

  export type ResumeReviewTagSelectScalar = {
    id?: boolean
    tagId?: boolean
    reviewId?: boolean
  }

  export type ResumeReviewTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tagId" | "reviewId", ExtArgs["result"]["resumeReviewTag"]>
  export type ResumeReviewTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | ResumeReviewLogDefaultArgs<ExtArgs>
  }
  export type ResumeReviewTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | ResumeReviewLogDefaultArgs<ExtArgs>
  }
  export type ResumeReviewTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | ReviewTagOptionDefaultArgs<ExtArgs>
    review?: boolean | ResumeReviewLogDefaultArgs<ExtArgs>
  }

  export type $ResumeReviewTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeReviewTag"
    objects: {
      tag: Prisma.$ReviewTagOptionPayload<ExtArgs>
      review: Prisma.$ResumeReviewLogPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tagId: number
      reviewId: number
    }, ExtArgs["result"]["resumeReviewTag"]>
    composites: {}
  }

  type ResumeReviewTagGetPayload<S extends boolean | null | undefined | ResumeReviewTagDefaultArgs> = $Result.GetResult<Prisma.$ResumeReviewTagPayload, S>

  type ResumeReviewTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeReviewTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeReviewTagCountAggregateInputType | true
    }

  export interface ResumeReviewTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeReviewTag'], meta: { name: 'ResumeReviewTag' } }
    /**
     * Find zero or one ResumeReviewTag that matches the filter.
     * @param {ResumeReviewTagFindUniqueArgs} args - Arguments to find a ResumeReviewTag
     * @example
     * // Get one ResumeReviewTag
     * const resumeReviewTag = await prisma.resumeReviewTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeReviewTagFindUniqueArgs>(args: SelectSubset<T, ResumeReviewTagFindUniqueArgs<ExtArgs>>): Prisma__ResumeReviewTagClient<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeReviewTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeReviewTagFindUniqueOrThrowArgs} args - Arguments to find a ResumeReviewTag
     * @example
     * // Get one ResumeReviewTag
     * const resumeReviewTag = await prisma.resumeReviewTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeReviewTagFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeReviewTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeReviewTagClient<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeReviewTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewTagFindFirstArgs} args - Arguments to find a ResumeReviewTag
     * @example
     * // Get one ResumeReviewTag
     * const resumeReviewTag = await prisma.resumeReviewTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeReviewTagFindFirstArgs>(args?: SelectSubset<T, ResumeReviewTagFindFirstArgs<ExtArgs>>): Prisma__ResumeReviewTagClient<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeReviewTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewTagFindFirstOrThrowArgs} args - Arguments to find a ResumeReviewTag
     * @example
     * // Get one ResumeReviewTag
     * const resumeReviewTag = await prisma.resumeReviewTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeReviewTagFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeReviewTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeReviewTagClient<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeReviewTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeReviewTags
     * const resumeReviewTags = await prisma.resumeReviewTag.findMany()
     * 
     * // Get first 10 ResumeReviewTags
     * const resumeReviewTags = await prisma.resumeReviewTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeReviewTagWithIdOnly = await prisma.resumeReviewTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeReviewTagFindManyArgs>(args?: SelectSubset<T, ResumeReviewTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeReviewTag.
     * @param {ResumeReviewTagCreateArgs} args - Arguments to create a ResumeReviewTag.
     * @example
     * // Create one ResumeReviewTag
     * const ResumeReviewTag = await prisma.resumeReviewTag.create({
     *   data: {
     *     // ... data to create a ResumeReviewTag
     *   }
     * })
     * 
     */
    create<T extends ResumeReviewTagCreateArgs>(args: SelectSubset<T, ResumeReviewTagCreateArgs<ExtArgs>>): Prisma__ResumeReviewTagClient<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeReviewTags.
     * @param {ResumeReviewTagCreateManyArgs} args - Arguments to create many ResumeReviewTags.
     * @example
     * // Create many ResumeReviewTags
     * const resumeReviewTag = await prisma.resumeReviewTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeReviewTagCreateManyArgs>(args?: SelectSubset<T, ResumeReviewTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeReviewTags and returns the data saved in the database.
     * @param {ResumeReviewTagCreateManyAndReturnArgs} args - Arguments to create many ResumeReviewTags.
     * @example
     * // Create many ResumeReviewTags
     * const resumeReviewTag = await prisma.resumeReviewTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeReviewTags and only return the `id`
     * const resumeReviewTagWithIdOnly = await prisma.resumeReviewTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeReviewTagCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeReviewTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeReviewTag.
     * @param {ResumeReviewTagDeleteArgs} args - Arguments to delete one ResumeReviewTag.
     * @example
     * // Delete one ResumeReviewTag
     * const ResumeReviewTag = await prisma.resumeReviewTag.delete({
     *   where: {
     *     // ... filter to delete one ResumeReviewTag
     *   }
     * })
     * 
     */
    delete<T extends ResumeReviewTagDeleteArgs>(args: SelectSubset<T, ResumeReviewTagDeleteArgs<ExtArgs>>): Prisma__ResumeReviewTagClient<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeReviewTag.
     * @param {ResumeReviewTagUpdateArgs} args - Arguments to update one ResumeReviewTag.
     * @example
     * // Update one ResumeReviewTag
     * const resumeReviewTag = await prisma.resumeReviewTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeReviewTagUpdateArgs>(args: SelectSubset<T, ResumeReviewTagUpdateArgs<ExtArgs>>): Prisma__ResumeReviewTagClient<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeReviewTags.
     * @param {ResumeReviewTagDeleteManyArgs} args - Arguments to filter ResumeReviewTags to delete.
     * @example
     * // Delete a few ResumeReviewTags
     * const { count } = await prisma.resumeReviewTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeReviewTagDeleteManyArgs>(args?: SelectSubset<T, ResumeReviewTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeReviewTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeReviewTags
     * const resumeReviewTag = await prisma.resumeReviewTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeReviewTagUpdateManyArgs>(args: SelectSubset<T, ResumeReviewTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeReviewTags and returns the data updated in the database.
     * @param {ResumeReviewTagUpdateManyAndReturnArgs} args - Arguments to update many ResumeReviewTags.
     * @example
     * // Update many ResumeReviewTags
     * const resumeReviewTag = await prisma.resumeReviewTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeReviewTags and only return the `id`
     * const resumeReviewTagWithIdOnly = await prisma.resumeReviewTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeReviewTagUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeReviewTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeReviewTag.
     * @param {ResumeReviewTagUpsertArgs} args - Arguments to update or create a ResumeReviewTag.
     * @example
     * // Update or create a ResumeReviewTag
     * const resumeReviewTag = await prisma.resumeReviewTag.upsert({
     *   create: {
     *     // ... data to create a ResumeReviewTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeReviewTag we want to update
     *   }
     * })
     */
    upsert<T extends ResumeReviewTagUpsertArgs>(args: SelectSubset<T, ResumeReviewTagUpsertArgs<ExtArgs>>): Prisma__ResumeReviewTagClient<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeReviewTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewTagCountArgs} args - Arguments to filter ResumeReviewTags to count.
     * @example
     * // Count the number of ResumeReviewTags
     * const count = await prisma.resumeReviewTag.count({
     *   where: {
     *     // ... the filter for the ResumeReviewTags we want to count
     *   }
     * })
    **/
    count<T extends ResumeReviewTagCountArgs>(
      args?: Subset<T, ResumeReviewTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeReviewTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeReviewTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeReviewTagAggregateArgs>(args: Subset<T, ResumeReviewTagAggregateArgs>): Prisma.PrismaPromise<GetResumeReviewTagAggregateType<T>>

    /**
     * Group by ResumeReviewTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeReviewTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeReviewTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeReviewTagGroupByArgs['orderBy'] }
        : { orderBy?: ResumeReviewTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeReviewTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeReviewTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeReviewTag model
   */
  readonly fields: ResumeReviewTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeReviewTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeReviewTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends ReviewTagOptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewTagOptionDefaultArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    review<T extends ResumeReviewLogDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResumeReviewLogDefaultArgs<ExtArgs>>): Prisma__ResumeReviewLogClient<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeReviewTag model
   */
  interface ResumeReviewTagFieldRefs {
    readonly id: FieldRef<"ResumeReviewTag", 'Int'>
    readonly tagId: FieldRef<"ResumeReviewTag", 'Int'>
    readonly reviewId: FieldRef<"ResumeReviewTag", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ResumeReviewTag findUnique
   */
  export type ResumeReviewTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewTag to fetch.
     */
    where: ResumeReviewTagWhereUniqueInput
  }

  /**
   * ResumeReviewTag findUniqueOrThrow
   */
  export type ResumeReviewTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewTag to fetch.
     */
    where: ResumeReviewTagWhereUniqueInput
  }

  /**
   * ResumeReviewTag findFirst
   */
  export type ResumeReviewTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewTag to fetch.
     */
    where?: ResumeReviewTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewTags to fetch.
     */
    orderBy?: ResumeReviewTagOrderByWithRelationInput | ResumeReviewTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeReviewTags.
     */
    cursor?: ResumeReviewTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeReviewTags.
     */
    distinct?: ResumeReviewTagScalarFieldEnum | ResumeReviewTagScalarFieldEnum[]
  }

  /**
   * ResumeReviewTag findFirstOrThrow
   */
  export type ResumeReviewTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewTag to fetch.
     */
    where?: ResumeReviewTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewTags to fetch.
     */
    orderBy?: ResumeReviewTagOrderByWithRelationInput | ResumeReviewTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeReviewTags.
     */
    cursor?: ResumeReviewTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeReviewTags.
     */
    distinct?: ResumeReviewTagScalarFieldEnum | ResumeReviewTagScalarFieldEnum[]
  }

  /**
   * ResumeReviewTag findMany
   */
  export type ResumeReviewTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * Filter, which ResumeReviewTags to fetch.
     */
    where?: ResumeReviewTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeReviewTags to fetch.
     */
    orderBy?: ResumeReviewTagOrderByWithRelationInput | ResumeReviewTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeReviewTags.
     */
    cursor?: ResumeReviewTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeReviewTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeReviewTags.
     */
    skip?: number
    distinct?: ResumeReviewTagScalarFieldEnum | ResumeReviewTagScalarFieldEnum[]
  }

  /**
   * ResumeReviewTag create
   */
  export type ResumeReviewTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeReviewTag.
     */
    data: XOR<ResumeReviewTagCreateInput, ResumeReviewTagUncheckedCreateInput>
  }

  /**
   * ResumeReviewTag createMany
   */
  export type ResumeReviewTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeReviewTags.
     */
    data: ResumeReviewTagCreateManyInput | ResumeReviewTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeReviewTag createManyAndReturn
   */
  export type ResumeReviewTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeReviewTags.
     */
    data: ResumeReviewTagCreateManyInput | ResumeReviewTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeReviewTag update
   */
  export type ResumeReviewTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeReviewTag.
     */
    data: XOR<ResumeReviewTagUpdateInput, ResumeReviewTagUncheckedUpdateInput>
    /**
     * Choose, which ResumeReviewTag to update.
     */
    where: ResumeReviewTagWhereUniqueInput
  }

  /**
   * ResumeReviewTag updateMany
   */
  export type ResumeReviewTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeReviewTags.
     */
    data: XOR<ResumeReviewTagUpdateManyMutationInput, ResumeReviewTagUncheckedUpdateManyInput>
    /**
     * Filter which ResumeReviewTags to update
     */
    where?: ResumeReviewTagWhereInput
    /**
     * Limit how many ResumeReviewTags to update.
     */
    limit?: number
  }

  /**
   * ResumeReviewTag updateManyAndReturn
   */
  export type ResumeReviewTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * The data used to update ResumeReviewTags.
     */
    data: XOR<ResumeReviewTagUpdateManyMutationInput, ResumeReviewTagUncheckedUpdateManyInput>
    /**
     * Filter which ResumeReviewTags to update
     */
    where?: ResumeReviewTagWhereInput
    /**
     * Limit how many ResumeReviewTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeReviewTag upsert
   */
  export type ResumeReviewTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeReviewTag to update in case it exists.
     */
    where: ResumeReviewTagWhereUniqueInput
    /**
     * In case the ResumeReviewTag found by the `where` argument doesn't exist, create a new ResumeReviewTag with this data.
     */
    create: XOR<ResumeReviewTagCreateInput, ResumeReviewTagUncheckedCreateInput>
    /**
     * In case the ResumeReviewTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeReviewTagUpdateInput, ResumeReviewTagUncheckedUpdateInput>
  }

  /**
   * ResumeReviewTag delete
   */
  export type ResumeReviewTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    /**
     * Filter which ResumeReviewTag to delete.
     */
    where: ResumeReviewTagWhereUniqueInput
  }

  /**
   * ResumeReviewTag deleteMany
   */
  export type ResumeReviewTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeReviewTags to delete
     */
    where?: ResumeReviewTagWhereInput
    /**
     * Limit how many ResumeReviewTags to delete.
     */
    limit?: number
  }

  /**
   * ResumeReviewTag without action
   */
  export type ResumeReviewTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
  }


  /**
   * Model ReviewTagOption
   */

  export type AggregateReviewTagOption = {
    _count: ReviewTagOptionCountAggregateOutputType | null
    _avg: ReviewTagOptionAvgAggregateOutputType | null
    _sum: ReviewTagOptionSumAggregateOutputType | null
    _min: ReviewTagOptionMinAggregateOutputType | null
    _max: ReviewTagOptionMaxAggregateOutputType | null
  }

  export type ReviewTagOptionAvgAggregateOutputType = {
    id: number | null
  }

  export type ReviewTagOptionSumAggregateOutputType = {
    id: number | null
  }

  export type ReviewTagOptionMinAggregateOutputType = {
    id: number | null
    label: string | null
    type: string | null
    isPublic: boolean | null
  }

  export type ReviewTagOptionMaxAggregateOutputType = {
    id: number | null
    label: string | null
    type: string | null
    isPublic: boolean | null
  }

  export type ReviewTagOptionCountAggregateOutputType = {
    id: number
    label: number
    type: number
    isPublic: number
    _all: number
  }


  export type ReviewTagOptionAvgAggregateInputType = {
    id?: true
  }

  export type ReviewTagOptionSumAggregateInputType = {
    id?: true
  }

  export type ReviewTagOptionMinAggregateInputType = {
    id?: true
    label?: true
    type?: true
    isPublic?: true
  }

  export type ReviewTagOptionMaxAggregateInputType = {
    id?: true
    label?: true
    type?: true
    isPublic?: true
  }

  export type ReviewTagOptionCountAggregateInputType = {
    id?: true
    label?: true
    type?: true
    isPublic?: true
    _all?: true
  }

  export type ReviewTagOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewTagOption to aggregate.
     */
    where?: ReviewTagOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewTagOptions to fetch.
     */
    orderBy?: ReviewTagOptionOrderByWithRelationInput | ReviewTagOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewTagOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewTagOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewTagOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewTagOptions
    **/
    _count?: true | ReviewTagOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewTagOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewTagOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewTagOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewTagOptionMaxAggregateInputType
  }

  export type GetReviewTagOptionAggregateType<T extends ReviewTagOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewTagOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewTagOption[P]>
      : GetScalarType<T[P], AggregateReviewTagOption[P]>
  }




  export type ReviewTagOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewTagOptionWhereInput
    orderBy?: ReviewTagOptionOrderByWithAggregationInput | ReviewTagOptionOrderByWithAggregationInput[]
    by: ReviewTagOptionScalarFieldEnum[] | ReviewTagOptionScalarFieldEnum
    having?: ReviewTagOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewTagOptionCountAggregateInputType | true
    _avg?: ReviewTagOptionAvgAggregateInputType
    _sum?: ReviewTagOptionSumAggregateInputType
    _min?: ReviewTagOptionMinAggregateInputType
    _max?: ReviewTagOptionMaxAggregateInputType
  }

  export type ReviewTagOptionGroupByOutputType = {
    id: number
    label: string
    type: string | null
    isPublic: boolean
    _count: ReviewTagOptionCountAggregateOutputType | null
    _avg: ReviewTagOptionAvgAggregateOutputType | null
    _sum: ReviewTagOptionSumAggregateOutputType | null
    _min: ReviewTagOptionMinAggregateOutputType | null
    _max: ReviewTagOptionMaxAggregateOutputType | null
  }

  type GetReviewTagOptionGroupByPayload<T extends ReviewTagOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewTagOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewTagOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewTagOptionGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewTagOptionGroupByOutputType[P]>
        }
      >
    >


  export type ReviewTagOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    type?: boolean
    isPublic?: boolean
    resumeTags?: boolean | ReviewTagOption$resumeTagsArgs<ExtArgs>
    userTags?: boolean | ReviewTagOption$userTagsArgs<ExtArgs>
    _count?: boolean | ReviewTagOptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewTagOption"]>

  export type ReviewTagOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    type?: boolean
    isPublic?: boolean
  }, ExtArgs["result"]["reviewTagOption"]>

  export type ReviewTagOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    type?: boolean
    isPublic?: boolean
  }, ExtArgs["result"]["reviewTagOption"]>

  export type ReviewTagOptionSelectScalar = {
    id?: boolean
    label?: boolean
    type?: boolean
    isPublic?: boolean
  }

  export type ReviewTagOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "label" | "type" | "isPublic", ExtArgs["result"]["reviewTagOption"]>
  export type ReviewTagOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resumeTags?: boolean | ReviewTagOption$resumeTagsArgs<ExtArgs>
    userTags?: boolean | ReviewTagOption$userTagsArgs<ExtArgs>
    _count?: boolean | ReviewTagOptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReviewTagOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ReviewTagOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ReviewTagOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReviewTagOption"
    objects: {
      resumeTags: Prisma.$ResumeReviewTagPayload<ExtArgs>[]
      userTags: Prisma.$UserReviewTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      label: string
      type: string | null
      isPublic: boolean
    }, ExtArgs["result"]["reviewTagOption"]>
    composites: {}
  }

  type ReviewTagOptionGetPayload<S extends boolean | null | undefined | ReviewTagOptionDefaultArgs> = $Result.GetResult<Prisma.$ReviewTagOptionPayload, S>

  type ReviewTagOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewTagOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewTagOptionCountAggregateInputType | true
    }

  export interface ReviewTagOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReviewTagOption'], meta: { name: 'ReviewTagOption' } }
    /**
     * Find zero or one ReviewTagOption that matches the filter.
     * @param {ReviewTagOptionFindUniqueArgs} args - Arguments to find a ReviewTagOption
     * @example
     * // Get one ReviewTagOption
     * const reviewTagOption = await prisma.reviewTagOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewTagOptionFindUniqueArgs>(args: SelectSubset<T, ReviewTagOptionFindUniqueArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReviewTagOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewTagOptionFindUniqueOrThrowArgs} args - Arguments to find a ReviewTagOption
     * @example
     * // Get one ReviewTagOption
     * const reviewTagOption = await prisma.reviewTagOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewTagOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewTagOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewTagOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewTagOptionFindFirstArgs} args - Arguments to find a ReviewTagOption
     * @example
     * // Get one ReviewTagOption
     * const reviewTagOption = await prisma.reviewTagOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewTagOptionFindFirstArgs>(args?: SelectSubset<T, ReviewTagOptionFindFirstArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewTagOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewTagOptionFindFirstOrThrowArgs} args - Arguments to find a ReviewTagOption
     * @example
     * // Get one ReviewTagOption
     * const reviewTagOption = await prisma.reviewTagOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewTagOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewTagOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReviewTagOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewTagOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewTagOptions
     * const reviewTagOptions = await prisma.reviewTagOption.findMany()
     * 
     * // Get first 10 ReviewTagOptions
     * const reviewTagOptions = await prisma.reviewTagOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewTagOptionWithIdOnly = await prisma.reviewTagOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewTagOptionFindManyArgs>(args?: SelectSubset<T, ReviewTagOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReviewTagOption.
     * @param {ReviewTagOptionCreateArgs} args - Arguments to create a ReviewTagOption.
     * @example
     * // Create one ReviewTagOption
     * const ReviewTagOption = await prisma.reviewTagOption.create({
     *   data: {
     *     // ... data to create a ReviewTagOption
     *   }
     * })
     * 
     */
    create<T extends ReviewTagOptionCreateArgs>(args: SelectSubset<T, ReviewTagOptionCreateArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReviewTagOptions.
     * @param {ReviewTagOptionCreateManyArgs} args - Arguments to create many ReviewTagOptions.
     * @example
     * // Create many ReviewTagOptions
     * const reviewTagOption = await prisma.reviewTagOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewTagOptionCreateManyArgs>(args?: SelectSubset<T, ReviewTagOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReviewTagOptions and returns the data saved in the database.
     * @param {ReviewTagOptionCreateManyAndReturnArgs} args - Arguments to create many ReviewTagOptions.
     * @example
     * // Create many ReviewTagOptions
     * const reviewTagOption = await prisma.reviewTagOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReviewTagOptions and only return the `id`
     * const reviewTagOptionWithIdOnly = await prisma.reviewTagOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewTagOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewTagOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReviewTagOption.
     * @param {ReviewTagOptionDeleteArgs} args - Arguments to delete one ReviewTagOption.
     * @example
     * // Delete one ReviewTagOption
     * const ReviewTagOption = await prisma.reviewTagOption.delete({
     *   where: {
     *     // ... filter to delete one ReviewTagOption
     *   }
     * })
     * 
     */
    delete<T extends ReviewTagOptionDeleteArgs>(args: SelectSubset<T, ReviewTagOptionDeleteArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReviewTagOption.
     * @param {ReviewTagOptionUpdateArgs} args - Arguments to update one ReviewTagOption.
     * @example
     * // Update one ReviewTagOption
     * const reviewTagOption = await prisma.reviewTagOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewTagOptionUpdateArgs>(args: SelectSubset<T, ReviewTagOptionUpdateArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReviewTagOptions.
     * @param {ReviewTagOptionDeleteManyArgs} args - Arguments to filter ReviewTagOptions to delete.
     * @example
     * // Delete a few ReviewTagOptions
     * const { count } = await prisma.reviewTagOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewTagOptionDeleteManyArgs>(args?: SelectSubset<T, ReviewTagOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewTagOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewTagOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewTagOptions
     * const reviewTagOption = await prisma.reviewTagOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewTagOptionUpdateManyArgs>(args: SelectSubset<T, ReviewTagOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewTagOptions and returns the data updated in the database.
     * @param {ReviewTagOptionUpdateManyAndReturnArgs} args - Arguments to update many ReviewTagOptions.
     * @example
     * // Update many ReviewTagOptions
     * const reviewTagOption = await prisma.reviewTagOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReviewTagOptions and only return the `id`
     * const reviewTagOptionWithIdOnly = await prisma.reviewTagOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewTagOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewTagOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReviewTagOption.
     * @param {ReviewTagOptionUpsertArgs} args - Arguments to update or create a ReviewTagOption.
     * @example
     * // Update or create a ReviewTagOption
     * const reviewTagOption = await prisma.reviewTagOption.upsert({
     *   create: {
     *     // ... data to create a ReviewTagOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewTagOption we want to update
     *   }
     * })
     */
    upsert<T extends ReviewTagOptionUpsertArgs>(args: SelectSubset<T, ReviewTagOptionUpsertArgs<ExtArgs>>): Prisma__ReviewTagOptionClient<$Result.GetResult<Prisma.$ReviewTagOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReviewTagOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewTagOptionCountArgs} args - Arguments to filter ReviewTagOptions to count.
     * @example
     * // Count the number of ReviewTagOptions
     * const count = await prisma.reviewTagOption.count({
     *   where: {
     *     // ... the filter for the ReviewTagOptions we want to count
     *   }
     * })
    **/
    count<T extends ReviewTagOptionCountArgs>(
      args?: Subset<T, ReviewTagOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewTagOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewTagOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewTagOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewTagOptionAggregateArgs>(args: Subset<T, ReviewTagOptionAggregateArgs>): Prisma.PrismaPromise<GetReviewTagOptionAggregateType<T>>

    /**
     * Group by ReviewTagOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewTagOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewTagOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewTagOptionGroupByArgs['orderBy'] }
        : { orderBy?: ReviewTagOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewTagOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewTagOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReviewTagOption model
   */
  readonly fields: ReviewTagOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewTagOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewTagOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resumeTags<T extends ReviewTagOption$resumeTagsArgs<ExtArgs> = {}>(args?: Subset<T, ReviewTagOption$resumeTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userTags<T extends ReviewTagOption$userTagsArgs<ExtArgs> = {}>(args?: Subset<T, ReviewTagOption$userTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReviewTagOption model
   */
  interface ReviewTagOptionFieldRefs {
    readonly id: FieldRef<"ReviewTagOption", 'Int'>
    readonly label: FieldRef<"ReviewTagOption", 'String'>
    readonly type: FieldRef<"ReviewTagOption", 'String'>
    readonly isPublic: FieldRef<"ReviewTagOption", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ReviewTagOption findUnique
   */
  export type ReviewTagOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * Filter, which ReviewTagOption to fetch.
     */
    where: ReviewTagOptionWhereUniqueInput
  }

  /**
   * ReviewTagOption findUniqueOrThrow
   */
  export type ReviewTagOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * Filter, which ReviewTagOption to fetch.
     */
    where: ReviewTagOptionWhereUniqueInput
  }

  /**
   * ReviewTagOption findFirst
   */
  export type ReviewTagOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * Filter, which ReviewTagOption to fetch.
     */
    where?: ReviewTagOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewTagOptions to fetch.
     */
    orderBy?: ReviewTagOptionOrderByWithRelationInput | ReviewTagOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewTagOptions.
     */
    cursor?: ReviewTagOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewTagOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewTagOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewTagOptions.
     */
    distinct?: ReviewTagOptionScalarFieldEnum | ReviewTagOptionScalarFieldEnum[]
  }

  /**
   * ReviewTagOption findFirstOrThrow
   */
  export type ReviewTagOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * Filter, which ReviewTagOption to fetch.
     */
    where?: ReviewTagOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewTagOptions to fetch.
     */
    orderBy?: ReviewTagOptionOrderByWithRelationInput | ReviewTagOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewTagOptions.
     */
    cursor?: ReviewTagOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewTagOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewTagOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewTagOptions.
     */
    distinct?: ReviewTagOptionScalarFieldEnum | ReviewTagOptionScalarFieldEnum[]
  }

  /**
   * ReviewTagOption findMany
   */
  export type ReviewTagOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * Filter, which ReviewTagOptions to fetch.
     */
    where?: ReviewTagOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewTagOptions to fetch.
     */
    orderBy?: ReviewTagOptionOrderByWithRelationInput | ReviewTagOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewTagOptions.
     */
    cursor?: ReviewTagOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewTagOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewTagOptions.
     */
    skip?: number
    distinct?: ReviewTagOptionScalarFieldEnum | ReviewTagOptionScalarFieldEnum[]
  }

  /**
   * ReviewTagOption create
   */
  export type ReviewTagOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a ReviewTagOption.
     */
    data: XOR<ReviewTagOptionCreateInput, ReviewTagOptionUncheckedCreateInput>
  }

  /**
   * ReviewTagOption createMany
   */
  export type ReviewTagOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReviewTagOptions.
     */
    data: ReviewTagOptionCreateManyInput | ReviewTagOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewTagOption createManyAndReturn
   */
  export type ReviewTagOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * The data used to create many ReviewTagOptions.
     */
    data: ReviewTagOptionCreateManyInput | ReviewTagOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewTagOption update
   */
  export type ReviewTagOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a ReviewTagOption.
     */
    data: XOR<ReviewTagOptionUpdateInput, ReviewTagOptionUncheckedUpdateInput>
    /**
     * Choose, which ReviewTagOption to update.
     */
    where: ReviewTagOptionWhereUniqueInput
  }

  /**
   * ReviewTagOption updateMany
   */
  export type ReviewTagOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReviewTagOptions.
     */
    data: XOR<ReviewTagOptionUpdateManyMutationInput, ReviewTagOptionUncheckedUpdateManyInput>
    /**
     * Filter which ReviewTagOptions to update
     */
    where?: ReviewTagOptionWhereInput
    /**
     * Limit how many ReviewTagOptions to update.
     */
    limit?: number
  }

  /**
   * ReviewTagOption updateManyAndReturn
   */
  export type ReviewTagOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * The data used to update ReviewTagOptions.
     */
    data: XOR<ReviewTagOptionUpdateManyMutationInput, ReviewTagOptionUncheckedUpdateManyInput>
    /**
     * Filter which ReviewTagOptions to update
     */
    where?: ReviewTagOptionWhereInput
    /**
     * Limit how many ReviewTagOptions to update.
     */
    limit?: number
  }

  /**
   * ReviewTagOption upsert
   */
  export type ReviewTagOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the ReviewTagOption to update in case it exists.
     */
    where: ReviewTagOptionWhereUniqueInput
    /**
     * In case the ReviewTagOption found by the `where` argument doesn't exist, create a new ReviewTagOption with this data.
     */
    create: XOR<ReviewTagOptionCreateInput, ReviewTagOptionUncheckedCreateInput>
    /**
     * In case the ReviewTagOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewTagOptionUpdateInput, ReviewTagOptionUncheckedUpdateInput>
  }

  /**
   * ReviewTagOption delete
   */
  export type ReviewTagOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
    /**
     * Filter which ReviewTagOption to delete.
     */
    where: ReviewTagOptionWhereUniqueInput
  }

  /**
   * ReviewTagOption deleteMany
   */
  export type ReviewTagOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewTagOptions to delete
     */
    where?: ReviewTagOptionWhereInput
    /**
     * Limit how many ReviewTagOptions to delete.
     */
    limit?: number
  }

  /**
   * ReviewTagOption.resumeTags
   */
  export type ReviewTagOption$resumeTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewTag
     */
    select?: ResumeReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewTag
     */
    omit?: ResumeReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewTagInclude<ExtArgs> | null
    where?: ResumeReviewTagWhereInput
    orderBy?: ResumeReviewTagOrderByWithRelationInput | ResumeReviewTagOrderByWithRelationInput[]
    cursor?: ResumeReviewTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeReviewTagScalarFieldEnum | ResumeReviewTagScalarFieldEnum[]
  }

  /**
   * ReviewTagOption.userTags
   */
  export type ReviewTagOption$userTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewTag
     */
    select?: UserReviewTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewTag
     */
    omit?: UserReviewTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewTagInclude<ExtArgs> | null
    where?: UserReviewTagWhereInput
    orderBy?: UserReviewTagOrderByWithRelationInput | UserReviewTagOrderByWithRelationInput[]
    cursor?: UserReviewTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserReviewTagScalarFieldEnum | UserReviewTagScalarFieldEnum[]
  }

  /**
   * ReviewTagOption without action
   */
  export type ReviewTagOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewTagOption
     */
    select?: ReviewTagOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewTagOption
     */
    omit?: ReviewTagOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewTagOptionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
    resumeId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    companyId: number | null
    resumeId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    googleId: string | null
    facebookId: string | null
    lineId: string | null
    lastLogin: Date | null
    lastLoginIp: string | null
    skipRegistration: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    deletedAt: Date | null
    isAnonymized: boolean | null
    deletionReason: string | null
    companyId: number | null
    role: $Enums.UserRole | null
    resumeId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    googleId: string | null
    facebookId: string | null
    lineId: string | null
    lastLogin: Date | null
    lastLoginIp: string | null
    skipRegistration: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    deletedAt: Date | null
    isAnonymized: boolean | null
    deletionReason: string | null
    companyId: number | null
    role: $Enums.UserRole | null
    resumeId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    googleId: number
    facebookId: number
    lineId: number
    lastLogin: number
    lastLoginIp: number
    skipRegistration: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    deletedAt: number
    isAnonymized: number
    deletionReason: number
    companyId: number
    role: number
    resumeId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    companyId?: true
    resumeId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    companyId?: true
    resumeId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    googleId?: true
    facebookId?: true
    lineId?: true
    lastLogin?: true
    lastLoginIp?: true
    skipRegistration?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    deletedAt?: true
    isAnonymized?: true
    deletionReason?: true
    companyId?: true
    role?: true
    resumeId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    googleId?: true
    facebookId?: true
    lineId?: true
    lastLogin?: true
    lastLoginIp?: true
    skipRegistration?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    deletedAt?: true
    isAnonymized?: true
    deletionReason?: true
    companyId?: true
    role?: true
    resumeId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    googleId?: true
    facebookId?: true
    lineId?: true
    lastLogin?: true
    lastLoginIp?: true
    skipRegistration?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    deletedAt?: true
    isAnonymized?: true
    deletionReason?: true
    companyId?: true
    role?: true
    resumeId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string | null
    googleId: string | null
    facebookId: string | null
    lineId: string | null
    lastLogin: Date | null
    lastLoginIp: string | null
    skipRegistration: boolean
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    deletedAt: Date | null
    isAnonymized: boolean
    deletionReason: string | null
    companyId: number | null
    role: $Enums.UserRole
    resumeId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    googleId?: boolean
    facebookId?: boolean
    lineId?: boolean
    lastLogin?: boolean
    lastLoginIp?: boolean
    skipRegistration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    isAnonymized?: boolean
    deletionReason?: boolean
    companyId?: boolean
    role?: boolean
    resumeId?: boolean
    company?: boolean | User$companyArgs<ExtArgs>
    resume?: boolean | User$resumeArgs<ExtArgs>
    resumes?: boolean | User$resumesArgs<ExtArgs>
    ipRecords?: boolean | User$ipRecordsArgs<ExtArgs>
    deviceRecords?: boolean | User$deviceRecordsArgs<ExtArgs>
    resumeViewLogs?: boolean | User$resumeViewLogsArgs<ExtArgs>
    resumesUserViewed?: boolean | User$resumesUserViewedArgs<ExtArgs>
    resumeReviewsGiven?: boolean | User$resumeReviewsGivenArgs<ExtArgs>
    userReviewsGiven?: boolean | User$userReviewsGivenArgs<ExtArgs>
    userReviewsReceived?: boolean | User$userReviewsReceivedArgs<ExtArgs>
    accountActionsTaken?: boolean | User$accountActionsTakenArgs<ExtArgs>
    accountActionsReceived?: boolean | User$accountActionsReceivedArgs<ExtArgs>
    resumesGrantedByMe?: boolean | User$resumesGrantedByMeArgs<ExtArgs>
    resumesGrantedToMe?: boolean | User$resumesGrantedToMeArgs<ExtArgs>
    attendanceLogs?: boolean | User$attendanceLogsArgs<ExtArgs>
    schedules?: boolean | User$schedulesArgs<ExtArgs>
    paySlips?: boolean | User$paySlipsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    createdThreads?: boolean | User$createdThreadsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    googleId?: boolean
    facebookId?: boolean
    lineId?: boolean
    lastLogin?: boolean
    lastLoginIp?: boolean
    skipRegistration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    isAnonymized?: boolean
    deletionReason?: boolean
    companyId?: boolean
    role?: boolean
    resumeId?: boolean
    company?: boolean | User$companyArgs<ExtArgs>
    resume?: boolean | User$resumeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    googleId?: boolean
    facebookId?: boolean
    lineId?: boolean
    lastLogin?: boolean
    lastLoginIp?: boolean
    skipRegistration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    isAnonymized?: boolean
    deletionReason?: boolean
    companyId?: boolean
    role?: boolean
    resumeId?: boolean
    company?: boolean | User$companyArgs<ExtArgs>
    resume?: boolean | User$resumeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    googleId?: boolean
    facebookId?: boolean
    lineId?: boolean
    lastLogin?: boolean
    lastLoginIp?: boolean
    skipRegistration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    isAnonymized?: boolean
    deletionReason?: boolean
    companyId?: boolean
    role?: boolean
    resumeId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "googleId" | "facebookId" | "lineId" | "lastLogin" | "lastLoginIp" | "skipRegistration" | "createdAt" | "updatedAt" | "isDeleted" | "deletedAt" | "isAnonymized" | "deletionReason" | "companyId" | "role" | "resumeId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | User$companyArgs<ExtArgs>
    resume?: boolean | User$resumeArgs<ExtArgs>
    resumes?: boolean | User$resumesArgs<ExtArgs>
    ipRecords?: boolean | User$ipRecordsArgs<ExtArgs>
    deviceRecords?: boolean | User$deviceRecordsArgs<ExtArgs>
    resumeViewLogs?: boolean | User$resumeViewLogsArgs<ExtArgs>
    resumesUserViewed?: boolean | User$resumesUserViewedArgs<ExtArgs>
    resumeReviewsGiven?: boolean | User$resumeReviewsGivenArgs<ExtArgs>
    userReviewsGiven?: boolean | User$userReviewsGivenArgs<ExtArgs>
    userReviewsReceived?: boolean | User$userReviewsReceivedArgs<ExtArgs>
    accountActionsTaken?: boolean | User$accountActionsTakenArgs<ExtArgs>
    accountActionsReceived?: boolean | User$accountActionsReceivedArgs<ExtArgs>
    resumesGrantedByMe?: boolean | User$resumesGrantedByMeArgs<ExtArgs>
    resumesGrantedToMe?: boolean | User$resumesGrantedToMeArgs<ExtArgs>
    attendanceLogs?: boolean | User$attendanceLogsArgs<ExtArgs>
    schedules?: boolean | User$schedulesArgs<ExtArgs>
    paySlips?: boolean | User$paySlipsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    createdThreads?: boolean | User$createdThreadsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | User$companyArgs<ExtArgs>
    resume?: boolean | User$resumeArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | User$companyArgs<ExtArgs>
    resume?: boolean | User$resumeArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs> | null
      resume: Prisma.$UserResumePayload<ExtArgs> | null
      resumes: Prisma.$UserResumePayload<ExtArgs>[]
      ipRecords: Prisma.$IpRecordPayload<ExtArgs>[]
      deviceRecords: Prisma.$DeviceRecordPayload<ExtArgs>[]
      resumeViewLogs: Prisma.$ResumeViewLogPayload<ExtArgs>[]
      resumesUserViewed: Prisma.$ResumeViewLogPayload<ExtArgs>[]
      resumeReviewsGiven: Prisma.$ResumeReviewLogPayload<ExtArgs>[]
      userReviewsGiven: Prisma.$UserReviewLogPayload<ExtArgs>[]
      userReviewsReceived: Prisma.$UserReviewLogPayload<ExtArgs>[]
      accountActionsTaken: Prisma.$AccountHistoryLogPayload<ExtArgs>[]
      accountActionsReceived: Prisma.$AccountHistoryLogPayload<ExtArgs>[]
      resumesGrantedByMe: Prisma.$ResumeAccessGrantPayload<ExtArgs>[]
      resumesGrantedToMe: Prisma.$ResumeAccessGrantPayload<ExtArgs>[]
      attendanceLogs: Prisma.$AttendanceLogPayload<ExtArgs>[]
      schedules: Prisma.$ShiftSchedulePayload<ExtArgs>[]
      paySlips: Prisma.$PaySlipPayload<ExtArgs>[]
      sentMessages: Prisma.$MessageLogPayload<ExtArgs>[]
      createdThreads: Prisma.$MessageThreadPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string | null
      googleId: string | null
      facebookId: string | null
      lineId: string | null
      lastLogin: Date | null
      lastLoginIp: string | null
      skipRegistration: boolean
      createdAt: Date
      updatedAt: Date
      isDeleted: boolean
      deletedAt: Date | null
      isAnonymized: boolean
      deletionReason: string | null
      companyId: number | null
      role: $Enums.UserRole
      resumeId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends User$companyArgs<ExtArgs> = {}>(args?: Subset<T, User$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    resume<T extends User$resumeArgs<ExtArgs> = {}>(args?: Subset<T, User$resumeArgs<ExtArgs>>): Prisma__UserResumeClient<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    resumes<T extends User$resumesArgs<ExtArgs> = {}>(args?: Subset<T, User$resumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserResumePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ipRecords<T extends User$ipRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$ipRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    deviceRecords<T extends User$deviceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$deviceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumeViewLogs<T extends User$resumeViewLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$resumeViewLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumesUserViewed<T extends User$resumesUserViewedArgs<ExtArgs> = {}>(args?: Subset<T, User$resumesUserViewedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeViewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumeReviewsGiven<T extends User$resumeReviewsGivenArgs<ExtArgs> = {}>(args?: Subset<T, User$resumeReviewsGivenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeReviewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userReviewsGiven<T extends User$userReviewsGivenArgs<ExtArgs> = {}>(args?: Subset<T, User$userReviewsGivenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userReviewsReceived<T extends User$userReviewsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$userReviewsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserReviewLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accountActionsTaken<T extends User$accountActionsTakenArgs<ExtArgs> = {}>(args?: Subset<T, User$accountActionsTakenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accountActionsReceived<T extends User$accountActionsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$accountActionsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumesGrantedByMe<T extends User$resumesGrantedByMeArgs<ExtArgs> = {}>(args?: Subset<T, User$resumesGrantedByMeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumesGrantedToMe<T extends User$resumesGrantedToMeArgs<ExtArgs> = {}>(args?: Subset<T, User$resumesGrantedToMeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAccessGrantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendanceLogs<T extends User$attendanceLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$attendanceLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schedules<T extends User$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, User$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paySlips<T extends User$paySlipsArgs<ExtArgs> = {}>(args?: Subset<T, User$paySlipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdThreads<T extends User$createdThreadsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdThreadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly facebookId: FieldRef<"User", 'String'>
    readonly lineId: FieldRef<"User", 'String'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly lastLoginIp: FieldRef<"User", 'String'>
    readonly skipRegistration: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isDeleted: FieldRef<"User", 'Boolean'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
    readonly isAnonymized: FieldRef<"User", 'Boolean'>
    readonly deletionReason: FieldRef<"User", 'String'>
    readonly companyId: FieldRef<"User", 'Int'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly resumeId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.company
   */
  export type User$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User.resume
   */
  export type User$resumeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    where?: UserResumeWhereInput
  }

  /**
   * User.resumes
   */
  export type User$resumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserResume
     */
    select?: UserResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserResume
     */
    omit?: UserResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserResumeInclude<ExtArgs> | null
    where?: UserResumeWhereInput
    orderBy?: UserResumeOrderByWithRelationInput | UserResumeOrderByWithRelationInput[]
    cursor?: UserResumeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserResumeScalarFieldEnum | UserResumeScalarFieldEnum[]
  }

  /**
   * User.ipRecords
   */
  export type User$ipRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    where?: IpRecordWhereInput
    orderBy?: IpRecordOrderByWithRelationInput | IpRecordOrderByWithRelationInput[]
    cursor?: IpRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IpRecordScalarFieldEnum | IpRecordScalarFieldEnum[]
  }

  /**
   * User.deviceRecords
   */
  export type User$deviceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    where?: DeviceRecordWhereInput
    orderBy?: DeviceRecordOrderByWithRelationInput | DeviceRecordOrderByWithRelationInput[]
    cursor?: DeviceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeviceRecordScalarFieldEnum | DeviceRecordScalarFieldEnum[]
  }

  /**
   * User.resumeViewLogs
   */
  export type User$resumeViewLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    where?: ResumeViewLogWhereInput
    orderBy?: ResumeViewLogOrderByWithRelationInput | ResumeViewLogOrderByWithRelationInput[]
    cursor?: ResumeViewLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeViewLogScalarFieldEnum | ResumeViewLogScalarFieldEnum[]
  }

  /**
   * User.resumesUserViewed
   */
  export type User$resumesUserViewedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeViewLog
     */
    select?: ResumeViewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeViewLog
     */
    omit?: ResumeViewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeViewLogInclude<ExtArgs> | null
    where?: ResumeViewLogWhereInput
    orderBy?: ResumeViewLogOrderByWithRelationInput | ResumeViewLogOrderByWithRelationInput[]
    cursor?: ResumeViewLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeViewLogScalarFieldEnum | ResumeViewLogScalarFieldEnum[]
  }

  /**
   * User.resumeReviewsGiven
   */
  export type User$resumeReviewsGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeReviewLog
     */
    select?: ResumeReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeReviewLog
     */
    omit?: ResumeReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeReviewLogInclude<ExtArgs> | null
    where?: ResumeReviewLogWhereInput
    orderBy?: ResumeReviewLogOrderByWithRelationInput | ResumeReviewLogOrderByWithRelationInput[]
    cursor?: ResumeReviewLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeReviewLogScalarFieldEnum | ResumeReviewLogScalarFieldEnum[]
  }

  /**
   * User.userReviewsGiven
   */
  export type User$userReviewsGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    where?: UserReviewLogWhereInput
    orderBy?: UserReviewLogOrderByWithRelationInput | UserReviewLogOrderByWithRelationInput[]
    cursor?: UserReviewLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserReviewLogScalarFieldEnum | UserReviewLogScalarFieldEnum[]
  }

  /**
   * User.userReviewsReceived
   */
  export type User$userReviewsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReviewLog
     */
    select?: UserReviewLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReviewLog
     */
    omit?: UserReviewLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserReviewLogInclude<ExtArgs> | null
    where?: UserReviewLogWhereInput
    orderBy?: UserReviewLogOrderByWithRelationInput | UserReviewLogOrderByWithRelationInput[]
    cursor?: UserReviewLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserReviewLogScalarFieldEnum | UserReviewLogScalarFieldEnum[]
  }

  /**
   * User.accountActionsTaken
   */
  export type User$accountActionsTakenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    where?: AccountHistoryLogWhereInput
    orderBy?: AccountHistoryLogOrderByWithRelationInput | AccountHistoryLogOrderByWithRelationInput[]
    cursor?: AccountHistoryLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountHistoryLogScalarFieldEnum | AccountHistoryLogScalarFieldEnum[]
  }

  /**
   * User.accountActionsReceived
   */
  export type User$accountActionsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    where?: AccountHistoryLogWhereInput
    orderBy?: AccountHistoryLogOrderByWithRelationInput | AccountHistoryLogOrderByWithRelationInput[]
    cursor?: AccountHistoryLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountHistoryLogScalarFieldEnum | AccountHistoryLogScalarFieldEnum[]
  }

  /**
   * User.resumesGrantedByMe
   */
  export type User$resumesGrantedByMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    where?: ResumeAccessGrantWhereInput
    orderBy?: ResumeAccessGrantOrderByWithRelationInput | ResumeAccessGrantOrderByWithRelationInput[]
    cursor?: ResumeAccessGrantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeAccessGrantScalarFieldEnum | ResumeAccessGrantScalarFieldEnum[]
  }

  /**
   * User.resumesGrantedToMe
   */
  export type User$resumesGrantedToMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAccessGrant
     */
    select?: ResumeAccessGrantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAccessGrant
     */
    omit?: ResumeAccessGrantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAccessGrantInclude<ExtArgs> | null
    where?: ResumeAccessGrantWhereInput
    orderBy?: ResumeAccessGrantOrderByWithRelationInput | ResumeAccessGrantOrderByWithRelationInput[]
    cursor?: ResumeAccessGrantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeAccessGrantScalarFieldEnum | ResumeAccessGrantScalarFieldEnum[]
  }

  /**
   * User.attendanceLogs
   */
  export type User$attendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceLog
     */
    omit?: AttendanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    where?: AttendanceLogWhereInput
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    cursor?: AttendanceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * User.schedules
   */
  export type User$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSchedule
     */
    select?: ShiftScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShiftSchedule
     */
    omit?: ShiftScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftScheduleInclude<ExtArgs> | null
    where?: ShiftScheduleWhereInput
    orderBy?: ShiftScheduleOrderByWithRelationInput | ShiftScheduleOrderByWithRelationInput[]
    cursor?: ShiftScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftScheduleScalarFieldEnum | ShiftScheduleScalarFieldEnum[]
  }

  /**
   * User.paySlips
   */
  export type User$paySlipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaySlip
     */
    omit?: PaySlipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    where?: PaySlipWhereInput
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    cursor?: PaySlipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageLog
     */
    select?: MessageLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageLog
     */
    omit?: MessageLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageLogInclude<ExtArgs> | null
    where?: MessageLogWhereInput
    orderBy?: MessageLogOrderByWithRelationInput | MessageLogOrderByWithRelationInput[]
    cursor?: MessageLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageLogScalarFieldEnum | MessageLogScalarFieldEnum[]
  }

  /**
   * User.createdThreads
   */
  export type User$createdThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    where?: MessageThreadWhereInput
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    cursor?: MessageThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model IpRecord
   */

  export type AggregateIpRecord = {
    _count: IpRecordCountAggregateOutputType | null
    _avg: IpRecordAvgAggregateOutputType | null
    _sum: IpRecordSumAggregateOutputType | null
    _min: IpRecordMinAggregateOutputType | null
    _max: IpRecordMaxAggregateOutputType | null
  }

  export type IpRecordAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type IpRecordSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type IpRecordMinAggregateOutputType = {
    id: number | null
    userId: number | null
    ipAddress: string | null
    location: string | null
    createdAt: Date | null
  }

  export type IpRecordMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    ipAddress: string | null
    location: string | null
    createdAt: Date | null
  }

  export type IpRecordCountAggregateOutputType = {
    id: number
    userId: number
    ipAddress: number
    location: number
    createdAt: number
    _all: number
  }


  export type IpRecordAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type IpRecordSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type IpRecordMinAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
    location?: true
    createdAt?: true
  }

  export type IpRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
    location?: true
    createdAt?: true
  }

  export type IpRecordCountAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
    location?: true
    createdAt?: true
    _all?: true
  }

  export type IpRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IpRecord to aggregate.
     */
    where?: IpRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpRecords to fetch.
     */
    orderBy?: IpRecordOrderByWithRelationInput | IpRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IpRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IpRecords
    **/
    _count?: true | IpRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IpRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IpRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IpRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IpRecordMaxAggregateInputType
  }

  export type GetIpRecordAggregateType<T extends IpRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateIpRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIpRecord[P]>
      : GetScalarType<T[P], AggregateIpRecord[P]>
  }




  export type IpRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IpRecordWhereInput
    orderBy?: IpRecordOrderByWithAggregationInput | IpRecordOrderByWithAggregationInput[]
    by: IpRecordScalarFieldEnum[] | IpRecordScalarFieldEnum
    having?: IpRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IpRecordCountAggregateInputType | true
    _avg?: IpRecordAvgAggregateInputType
    _sum?: IpRecordSumAggregateInputType
    _min?: IpRecordMinAggregateInputType
    _max?: IpRecordMaxAggregateInputType
  }

  export type IpRecordGroupByOutputType = {
    id: number
    userId: number
    ipAddress: string
    location: string | null
    createdAt: Date
    _count: IpRecordCountAggregateOutputType | null
    _avg: IpRecordAvgAggregateOutputType | null
    _sum: IpRecordSumAggregateOutputType | null
    _min: IpRecordMinAggregateOutputType | null
    _max: IpRecordMaxAggregateOutputType | null
  }

  type GetIpRecordGroupByPayload<T extends IpRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IpRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IpRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IpRecordGroupByOutputType[P]>
            : GetScalarType<T[P], IpRecordGroupByOutputType[P]>
        }
      >
    >


  export type IpRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
    location?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ipRecord"]>

  export type IpRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
    location?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ipRecord"]>

  export type IpRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
    location?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ipRecord"]>

  export type IpRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
    location?: boolean
    createdAt?: boolean
  }

  export type IpRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "ipAddress" | "location" | "createdAt", ExtArgs["result"]["ipRecord"]>
  export type IpRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type IpRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type IpRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $IpRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IpRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      ipAddress: string
      location: string | null
      createdAt: Date
    }, ExtArgs["result"]["ipRecord"]>
    composites: {}
  }

  type IpRecordGetPayload<S extends boolean | null | undefined | IpRecordDefaultArgs> = $Result.GetResult<Prisma.$IpRecordPayload, S>

  type IpRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IpRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IpRecordCountAggregateInputType | true
    }

  export interface IpRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IpRecord'], meta: { name: 'IpRecord' } }
    /**
     * Find zero or one IpRecord that matches the filter.
     * @param {IpRecordFindUniqueArgs} args - Arguments to find a IpRecord
     * @example
     * // Get one IpRecord
     * const ipRecord = await prisma.ipRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IpRecordFindUniqueArgs>(args: SelectSubset<T, IpRecordFindUniqueArgs<ExtArgs>>): Prisma__IpRecordClient<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IpRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IpRecordFindUniqueOrThrowArgs} args - Arguments to find a IpRecord
     * @example
     * // Get one IpRecord
     * const ipRecord = await prisma.ipRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IpRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, IpRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IpRecordClient<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IpRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpRecordFindFirstArgs} args - Arguments to find a IpRecord
     * @example
     * // Get one IpRecord
     * const ipRecord = await prisma.ipRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IpRecordFindFirstArgs>(args?: SelectSubset<T, IpRecordFindFirstArgs<ExtArgs>>): Prisma__IpRecordClient<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IpRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpRecordFindFirstOrThrowArgs} args - Arguments to find a IpRecord
     * @example
     * // Get one IpRecord
     * const ipRecord = await prisma.ipRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IpRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, IpRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__IpRecordClient<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IpRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IpRecords
     * const ipRecords = await prisma.ipRecord.findMany()
     * 
     * // Get first 10 IpRecords
     * const ipRecords = await prisma.ipRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ipRecordWithIdOnly = await prisma.ipRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IpRecordFindManyArgs>(args?: SelectSubset<T, IpRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IpRecord.
     * @param {IpRecordCreateArgs} args - Arguments to create a IpRecord.
     * @example
     * // Create one IpRecord
     * const IpRecord = await prisma.ipRecord.create({
     *   data: {
     *     // ... data to create a IpRecord
     *   }
     * })
     * 
     */
    create<T extends IpRecordCreateArgs>(args: SelectSubset<T, IpRecordCreateArgs<ExtArgs>>): Prisma__IpRecordClient<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IpRecords.
     * @param {IpRecordCreateManyArgs} args - Arguments to create many IpRecords.
     * @example
     * // Create many IpRecords
     * const ipRecord = await prisma.ipRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IpRecordCreateManyArgs>(args?: SelectSubset<T, IpRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IpRecords and returns the data saved in the database.
     * @param {IpRecordCreateManyAndReturnArgs} args - Arguments to create many IpRecords.
     * @example
     * // Create many IpRecords
     * const ipRecord = await prisma.ipRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IpRecords and only return the `id`
     * const ipRecordWithIdOnly = await prisma.ipRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IpRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, IpRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a IpRecord.
     * @param {IpRecordDeleteArgs} args - Arguments to delete one IpRecord.
     * @example
     * // Delete one IpRecord
     * const IpRecord = await prisma.ipRecord.delete({
     *   where: {
     *     // ... filter to delete one IpRecord
     *   }
     * })
     * 
     */
    delete<T extends IpRecordDeleteArgs>(args: SelectSubset<T, IpRecordDeleteArgs<ExtArgs>>): Prisma__IpRecordClient<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IpRecord.
     * @param {IpRecordUpdateArgs} args - Arguments to update one IpRecord.
     * @example
     * // Update one IpRecord
     * const ipRecord = await prisma.ipRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IpRecordUpdateArgs>(args: SelectSubset<T, IpRecordUpdateArgs<ExtArgs>>): Prisma__IpRecordClient<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IpRecords.
     * @param {IpRecordDeleteManyArgs} args - Arguments to filter IpRecords to delete.
     * @example
     * // Delete a few IpRecords
     * const { count } = await prisma.ipRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IpRecordDeleteManyArgs>(args?: SelectSubset<T, IpRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IpRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IpRecords
     * const ipRecord = await prisma.ipRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IpRecordUpdateManyArgs>(args: SelectSubset<T, IpRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IpRecords and returns the data updated in the database.
     * @param {IpRecordUpdateManyAndReturnArgs} args - Arguments to update many IpRecords.
     * @example
     * // Update many IpRecords
     * const ipRecord = await prisma.ipRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more IpRecords and only return the `id`
     * const ipRecordWithIdOnly = await prisma.ipRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IpRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, IpRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one IpRecord.
     * @param {IpRecordUpsertArgs} args - Arguments to update or create a IpRecord.
     * @example
     * // Update or create a IpRecord
     * const ipRecord = await prisma.ipRecord.upsert({
     *   create: {
     *     // ... data to create a IpRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IpRecord we want to update
     *   }
     * })
     */
    upsert<T extends IpRecordUpsertArgs>(args: SelectSubset<T, IpRecordUpsertArgs<ExtArgs>>): Prisma__IpRecordClient<$Result.GetResult<Prisma.$IpRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IpRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpRecordCountArgs} args - Arguments to filter IpRecords to count.
     * @example
     * // Count the number of IpRecords
     * const count = await prisma.ipRecord.count({
     *   where: {
     *     // ... the filter for the IpRecords we want to count
     *   }
     * })
    **/
    count<T extends IpRecordCountArgs>(
      args?: Subset<T, IpRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IpRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IpRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IpRecordAggregateArgs>(args: Subset<T, IpRecordAggregateArgs>): Prisma.PrismaPromise<GetIpRecordAggregateType<T>>

    /**
     * Group by IpRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IpRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IpRecordGroupByArgs['orderBy'] }
        : { orderBy?: IpRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IpRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIpRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IpRecord model
   */
  readonly fields: IpRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IpRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IpRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IpRecord model
   */
  interface IpRecordFieldRefs {
    readonly id: FieldRef<"IpRecord", 'Int'>
    readonly userId: FieldRef<"IpRecord", 'Int'>
    readonly ipAddress: FieldRef<"IpRecord", 'String'>
    readonly location: FieldRef<"IpRecord", 'String'>
    readonly createdAt: FieldRef<"IpRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IpRecord findUnique
   */
  export type IpRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * Filter, which IpRecord to fetch.
     */
    where: IpRecordWhereUniqueInput
  }

  /**
   * IpRecord findUniqueOrThrow
   */
  export type IpRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * Filter, which IpRecord to fetch.
     */
    where: IpRecordWhereUniqueInput
  }

  /**
   * IpRecord findFirst
   */
  export type IpRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * Filter, which IpRecord to fetch.
     */
    where?: IpRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpRecords to fetch.
     */
    orderBy?: IpRecordOrderByWithRelationInput | IpRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IpRecords.
     */
    cursor?: IpRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IpRecords.
     */
    distinct?: IpRecordScalarFieldEnum | IpRecordScalarFieldEnum[]
  }

  /**
   * IpRecord findFirstOrThrow
   */
  export type IpRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * Filter, which IpRecord to fetch.
     */
    where?: IpRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpRecords to fetch.
     */
    orderBy?: IpRecordOrderByWithRelationInput | IpRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IpRecords.
     */
    cursor?: IpRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IpRecords.
     */
    distinct?: IpRecordScalarFieldEnum | IpRecordScalarFieldEnum[]
  }

  /**
   * IpRecord findMany
   */
  export type IpRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * Filter, which IpRecords to fetch.
     */
    where?: IpRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpRecords to fetch.
     */
    orderBy?: IpRecordOrderByWithRelationInput | IpRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IpRecords.
     */
    cursor?: IpRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpRecords.
     */
    skip?: number
    distinct?: IpRecordScalarFieldEnum | IpRecordScalarFieldEnum[]
  }

  /**
   * IpRecord create
   */
  export type IpRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a IpRecord.
     */
    data: XOR<IpRecordCreateInput, IpRecordUncheckedCreateInput>
  }

  /**
   * IpRecord createMany
   */
  export type IpRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IpRecords.
     */
    data: IpRecordCreateManyInput | IpRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IpRecord createManyAndReturn
   */
  export type IpRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * The data used to create many IpRecords.
     */
    data: IpRecordCreateManyInput | IpRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IpRecord update
   */
  export type IpRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a IpRecord.
     */
    data: XOR<IpRecordUpdateInput, IpRecordUncheckedUpdateInput>
    /**
     * Choose, which IpRecord to update.
     */
    where: IpRecordWhereUniqueInput
  }

  /**
   * IpRecord updateMany
   */
  export type IpRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IpRecords.
     */
    data: XOR<IpRecordUpdateManyMutationInput, IpRecordUncheckedUpdateManyInput>
    /**
     * Filter which IpRecords to update
     */
    where?: IpRecordWhereInput
    /**
     * Limit how many IpRecords to update.
     */
    limit?: number
  }

  /**
   * IpRecord updateManyAndReturn
   */
  export type IpRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * The data used to update IpRecords.
     */
    data: XOR<IpRecordUpdateManyMutationInput, IpRecordUncheckedUpdateManyInput>
    /**
     * Filter which IpRecords to update
     */
    where?: IpRecordWhereInput
    /**
     * Limit how many IpRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * IpRecord upsert
   */
  export type IpRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the IpRecord to update in case it exists.
     */
    where: IpRecordWhereUniqueInput
    /**
     * In case the IpRecord found by the `where` argument doesn't exist, create a new IpRecord with this data.
     */
    create: XOR<IpRecordCreateInput, IpRecordUncheckedCreateInput>
    /**
     * In case the IpRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IpRecordUpdateInput, IpRecordUncheckedUpdateInput>
  }

  /**
   * IpRecord delete
   */
  export type IpRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
    /**
     * Filter which IpRecord to delete.
     */
    where: IpRecordWhereUniqueInput
  }

  /**
   * IpRecord deleteMany
   */
  export type IpRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IpRecords to delete
     */
    where?: IpRecordWhereInput
    /**
     * Limit how many IpRecords to delete.
     */
    limit?: number
  }

  /**
   * IpRecord without action
   */
  export type IpRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpRecord
     */
    select?: IpRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IpRecord
     */
    omit?: IpRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpRecordInclude<ExtArgs> | null
  }


  /**
   * Model DeviceRecord
   */

  export type AggregateDeviceRecord = {
    _count: DeviceRecordCountAggregateOutputType | null
    _avg: DeviceRecordAvgAggregateOutputType | null
    _sum: DeviceRecordSumAggregateOutputType | null
    _min: DeviceRecordMinAggregateOutputType | null
    _max: DeviceRecordMaxAggregateOutputType | null
  }

  export type DeviceRecordAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type DeviceRecordSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type DeviceRecordMinAggregateOutputType = {
    id: number | null
    userId: number | null
    deviceInfo: string | null
    platform: string | null
    createdAt: Date | null
  }

  export type DeviceRecordMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    deviceInfo: string | null
    platform: string | null
    createdAt: Date | null
  }

  export type DeviceRecordCountAggregateOutputType = {
    id: number
    userId: number
    deviceInfo: number
    platform: number
    createdAt: number
    _all: number
  }


  export type DeviceRecordAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type DeviceRecordSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type DeviceRecordMinAggregateInputType = {
    id?: true
    userId?: true
    deviceInfo?: true
    platform?: true
    createdAt?: true
  }

  export type DeviceRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    deviceInfo?: true
    platform?: true
    createdAt?: true
  }

  export type DeviceRecordCountAggregateInputType = {
    id?: true
    userId?: true
    deviceInfo?: true
    platform?: true
    createdAt?: true
    _all?: true
  }

  export type DeviceRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceRecord to aggregate.
     */
    where?: DeviceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRecords to fetch.
     */
    orderBy?: DeviceRecordOrderByWithRelationInput | DeviceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceRecords
    **/
    _count?: true | DeviceRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceRecordMaxAggregateInputType
  }

  export type GetDeviceRecordAggregateType<T extends DeviceRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceRecord[P]>
      : GetScalarType<T[P], AggregateDeviceRecord[P]>
  }




  export type DeviceRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceRecordWhereInput
    orderBy?: DeviceRecordOrderByWithAggregationInput | DeviceRecordOrderByWithAggregationInput[]
    by: DeviceRecordScalarFieldEnum[] | DeviceRecordScalarFieldEnum
    having?: DeviceRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceRecordCountAggregateInputType | true
    _avg?: DeviceRecordAvgAggregateInputType
    _sum?: DeviceRecordSumAggregateInputType
    _min?: DeviceRecordMinAggregateInputType
    _max?: DeviceRecordMaxAggregateInputType
  }

  export type DeviceRecordGroupByOutputType = {
    id: number
    userId: number
    deviceInfo: string
    platform: string | null
    createdAt: Date
    _count: DeviceRecordCountAggregateOutputType | null
    _avg: DeviceRecordAvgAggregateOutputType | null
    _sum: DeviceRecordSumAggregateOutputType | null
    _min: DeviceRecordMinAggregateOutputType | null
    _max: DeviceRecordMaxAggregateOutputType | null
  }

  type GetDeviceRecordGroupByPayload<T extends DeviceRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceRecordGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceRecordGroupByOutputType[P]>
        }
      >
    >


  export type DeviceRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    deviceInfo?: boolean
    platform?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deviceRecord"]>

  export type DeviceRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    deviceInfo?: boolean
    platform?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deviceRecord"]>

  export type DeviceRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    deviceInfo?: boolean
    platform?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deviceRecord"]>

  export type DeviceRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    deviceInfo?: boolean
    platform?: boolean
    createdAt?: boolean
  }

  export type DeviceRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "deviceInfo" | "platform" | "createdAt", ExtArgs["result"]["deviceRecord"]>
  export type DeviceRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DeviceRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DeviceRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DeviceRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeviceRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      deviceInfo: string
      platform: string | null
      createdAt: Date
    }, ExtArgs["result"]["deviceRecord"]>
    composites: {}
  }

  type DeviceRecordGetPayload<S extends boolean | null | undefined | DeviceRecordDefaultArgs> = $Result.GetResult<Prisma.$DeviceRecordPayload, S>

  type DeviceRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeviceRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeviceRecordCountAggregateInputType | true
    }

  export interface DeviceRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeviceRecord'], meta: { name: 'DeviceRecord' } }
    /**
     * Find zero or one DeviceRecord that matches the filter.
     * @param {DeviceRecordFindUniqueArgs} args - Arguments to find a DeviceRecord
     * @example
     * // Get one DeviceRecord
     * const deviceRecord = await prisma.deviceRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceRecordFindUniqueArgs>(args: SelectSubset<T, DeviceRecordFindUniqueArgs<ExtArgs>>): Prisma__DeviceRecordClient<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DeviceRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeviceRecordFindUniqueOrThrowArgs} args - Arguments to find a DeviceRecord
     * @example
     * // Get one DeviceRecord
     * const deviceRecord = await prisma.deviceRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceRecordClient<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeviceRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRecordFindFirstArgs} args - Arguments to find a DeviceRecord
     * @example
     * // Get one DeviceRecord
     * const deviceRecord = await prisma.deviceRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceRecordFindFirstArgs>(args?: SelectSubset<T, DeviceRecordFindFirstArgs<ExtArgs>>): Prisma__DeviceRecordClient<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeviceRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRecordFindFirstOrThrowArgs} args - Arguments to find a DeviceRecord
     * @example
     * // Get one DeviceRecord
     * const deviceRecord = await prisma.deviceRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceRecordClient<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DeviceRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceRecords
     * const deviceRecords = await prisma.deviceRecord.findMany()
     * 
     * // Get first 10 DeviceRecords
     * const deviceRecords = await prisma.deviceRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceRecordWithIdOnly = await prisma.deviceRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeviceRecordFindManyArgs>(args?: SelectSubset<T, DeviceRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DeviceRecord.
     * @param {DeviceRecordCreateArgs} args - Arguments to create a DeviceRecord.
     * @example
     * // Create one DeviceRecord
     * const DeviceRecord = await prisma.deviceRecord.create({
     *   data: {
     *     // ... data to create a DeviceRecord
     *   }
     * })
     * 
     */
    create<T extends DeviceRecordCreateArgs>(args: SelectSubset<T, DeviceRecordCreateArgs<ExtArgs>>): Prisma__DeviceRecordClient<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DeviceRecords.
     * @param {DeviceRecordCreateManyArgs} args - Arguments to create many DeviceRecords.
     * @example
     * // Create many DeviceRecords
     * const deviceRecord = await prisma.deviceRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceRecordCreateManyArgs>(args?: SelectSubset<T, DeviceRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeviceRecords and returns the data saved in the database.
     * @param {DeviceRecordCreateManyAndReturnArgs} args - Arguments to create many DeviceRecords.
     * @example
     * // Create many DeviceRecords
     * const deviceRecord = await prisma.deviceRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeviceRecords and only return the `id`
     * const deviceRecordWithIdOnly = await prisma.deviceRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DeviceRecord.
     * @param {DeviceRecordDeleteArgs} args - Arguments to delete one DeviceRecord.
     * @example
     * // Delete one DeviceRecord
     * const DeviceRecord = await prisma.deviceRecord.delete({
     *   where: {
     *     // ... filter to delete one DeviceRecord
     *   }
     * })
     * 
     */
    delete<T extends DeviceRecordDeleteArgs>(args: SelectSubset<T, DeviceRecordDeleteArgs<ExtArgs>>): Prisma__DeviceRecordClient<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DeviceRecord.
     * @param {DeviceRecordUpdateArgs} args - Arguments to update one DeviceRecord.
     * @example
     * // Update one DeviceRecord
     * const deviceRecord = await prisma.deviceRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceRecordUpdateArgs>(args: SelectSubset<T, DeviceRecordUpdateArgs<ExtArgs>>): Prisma__DeviceRecordClient<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DeviceRecords.
     * @param {DeviceRecordDeleteManyArgs} args - Arguments to filter DeviceRecords to delete.
     * @example
     * // Delete a few DeviceRecords
     * const { count } = await prisma.deviceRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceRecordDeleteManyArgs>(args?: SelectSubset<T, DeviceRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceRecords
     * const deviceRecord = await prisma.deviceRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceRecordUpdateManyArgs>(args: SelectSubset<T, DeviceRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceRecords and returns the data updated in the database.
     * @param {DeviceRecordUpdateManyAndReturnArgs} args - Arguments to update many DeviceRecords.
     * @example
     * // Update many DeviceRecords
     * const deviceRecord = await prisma.deviceRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DeviceRecords and only return the `id`
     * const deviceRecordWithIdOnly = await prisma.deviceRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeviceRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, DeviceRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DeviceRecord.
     * @param {DeviceRecordUpsertArgs} args - Arguments to update or create a DeviceRecord.
     * @example
     * // Update or create a DeviceRecord
     * const deviceRecord = await prisma.deviceRecord.upsert({
     *   create: {
     *     // ... data to create a DeviceRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceRecord we want to update
     *   }
     * })
     */
    upsert<T extends DeviceRecordUpsertArgs>(args: SelectSubset<T, DeviceRecordUpsertArgs<ExtArgs>>): Prisma__DeviceRecordClient<$Result.GetResult<Prisma.$DeviceRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DeviceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRecordCountArgs} args - Arguments to filter DeviceRecords to count.
     * @example
     * // Count the number of DeviceRecords
     * const count = await prisma.deviceRecord.count({
     *   where: {
     *     // ... the filter for the DeviceRecords we want to count
     *   }
     * })
    **/
    count<T extends DeviceRecordCountArgs>(
      args?: Subset<T, DeviceRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceRecordAggregateArgs>(args: Subset<T, DeviceRecordAggregateArgs>): Prisma.PrismaPromise<GetDeviceRecordAggregateType<T>>

    /**
     * Group by DeviceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceRecordGroupByArgs['orderBy'] }
        : { orderBy?: DeviceRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeviceRecord model
   */
  readonly fields: DeviceRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeviceRecord model
   */
  interface DeviceRecordFieldRefs {
    readonly id: FieldRef<"DeviceRecord", 'Int'>
    readonly userId: FieldRef<"DeviceRecord", 'Int'>
    readonly deviceInfo: FieldRef<"DeviceRecord", 'String'>
    readonly platform: FieldRef<"DeviceRecord", 'String'>
    readonly createdAt: FieldRef<"DeviceRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DeviceRecord findUnique
   */
  export type DeviceRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeviceRecord to fetch.
     */
    where: DeviceRecordWhereUniqueInput
  }

  /**
   * DeviceRecord findUniqueOrThrow
   */
  export type DeviceRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeviceRecord to fetch.
     */
    where: DeviceRecordWhereUniqueInput
  }

  /**
   * DeviceRecord findFirst
   */
  export type DeviceRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeviceRecord to fetch.
     */
    where?: DeviceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRecords to fetch.
     */
    orderBy?: DeviceRecordOrderByWithRelationInput | DeviceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceRecords.
     */
    cursor?: DeviceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceRecords.
     */
    distinct?: DeviceRecordScalarFieldEnum | DeviceRecordScalarFieldEnum[]
  }

  /**
   * DeviceRecord findFirstOrThrow
   */
  export type DeviceRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeviceRecord to fetch.
     */
    where?: DeviceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRecords to fetch.
     */
    orderBy?: DeviceRecordOrderByWithRelationInput | DeviceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceRecords.
     */
    cursor?: DeviceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceRecords.
     */
    distinct?: DeviceRecordScalarFieldEnum | DeviceRecordScalarFieldEnum[]
  }

  /**
   * DeviceRecord findMany
   */
  export type DeviceRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeviceRecords to fetch.
     */
    where?: DeviceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRecords to fetch.
     */
    orderBy?: DeviceRecordOrderByWithRelationInput | DeviceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceRecords.
     */
    cursor?: DeviceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRecords.
     */
    skip?: number
    distinct?: DeviceRecordScalarFieldEnum | DeviceRecordScalarFieldEnum[]
  }

  /**
   * DeviceRecord create
   */
  export type DeviceRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a DeviceRecord.
     */
    data: XOR<DeviceRecordCreateInput, DeviceRecordUncheckedCreateInput>
  }

  /**
   * DeviceRecord createMany
   */
  export type DeviceRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeviceRecords.
     */
    data: DeviceRecordCreateManyInput | DeviceRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceRecord createManyAndReturn
   */
  export type DeviceRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * The data used to create many DeviceRecords.
     */
    data: DeviceRecordCreateManyInput | DeviceRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeviceRecord update
   */
  export type DeviceRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a DeviceRecord.
     */
    data: XOR<DeviceRecordUpdateInput, DeviceRecordUncheckedUpdateInput>
    /**
     * Choose, which DeviceRecord to update.
     */
    where: DeviceRecordWhereUniqueInput
  }

  /**
   * DeviceRecord updateMany
   */
  export type DeviceRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeviceRecords.
     */
    data: XOR<DeviceRecordUpdateManyMutationInput, DeviceRecordUncheckedUpdateManyInput>
    /**
     * Filter which DeviceRecords to update
     */
    where?: DeviceRecordWhereInput
    /**
     * Limit how many DeviceRecords to update.
     */
    limit?: number
  }

  /**
   * DeviceRecord updateManyAndReturn
   */
  export type DeviceRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * The data used to update DeviceRecords.
     */
    data: XOR<DeviceRecordUpdateManyMutationInput, DeviceRecordUncheckedUpdateManyInput>
    /**
     * Filter which DeviceRecords to update
     */
    where?: DeviceRecordWhereInput
    /**
     * Limit how many DeviceRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeviceRecord upsert
   */
  export type DeviceRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the DeviceRecord to update in case it exists.
     */
    where: DeviceRecordWhereUniqueInput
    /**
     * In case the DeviceRecord found by the `where` argument doesn't exist, create a new DeviceRecord with this data.
     */
    create: XOR<DeviceRecordCreateInput, DeviceRecordUncheckedCreateInput>
    /**
     * In case the DeviceRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceRecordUpdateInput, DeviceRecordUncheckedUpdateInput>
  }

  /**
   * DeviceRecord delete
   */
  export type DeviceRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
    /**
     * Filter which DeviceRecord to delete.
     */
    where: DeviceRecordWhereUniqueInput
  }

  /**
   * DeviceRecord deleteMany
   */
  export type DeviceRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceRecords to delete
     */
    where?: DeviceRecordWhereInput
    /**
     * Limit how many DeviceRecords to delete.
     */
    limit?: number
  }

  /**
   * DeviceRecord without action
   */
  export type DeviceRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRecord
     */
    select?: DeviceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRecord
     */
    omit?: DeviceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceRecordInclude<ExtArgs> | null
  }


  /**
   * Model AccountHistoryLog
   */

  export type AggregateAccountHistoryLog = {
    _count: AccountHistoryLogCountAggregateOutputType | null
    _avg: AccountHistoryLogAvgAggregateOutputType | null
    _sum: AccountHistoryLogSumAggregateOutputType | null
    _min: AccountHistoryLogMinAggregateOutputType | null
    _max: AccountHistoryLogMaxAggregateOutputType | null
  }

  export type AccountHistoryLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    operatorId: number | null
  }

  export type AccountHistoryLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    operatorId: number | null
  }

  export type AccountHistoryLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    operatorId: number | null
    action: string | null
    note: string | null
    createdAt: Date | null
  }

  export type AccountHistoryLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    operatorId: number | null
    action: string | null
    note: string | null
    createdAt: Date | null
  }

  export type AccountHistoryLogCountAggregateOutputType = {
    id: number
    userId: number
    operatorId: number
    action: number
    note: number
    createdAt: number
    _all: number
  }


  export type AccountHistoryLogAvgAggregateInputType = {
    id?: true
    userId?: true
    operatorId?: true
  }

  export type AccountHistoryLogSumAggregateInputType = {
    id?: true
    userId?: true
    operatorId?: true
  }

  export type AccountHistoryLogMinAggregateInputType = {
    id?: true
    userId?: true
    operatorId?: true
    action?: true
    note?: true
    createdAt?: true
  }

  export type AccountHistoryLogMaxAggregateInputType = {
    id?: true
    userId?: true
    operatorId?: true
    action?: true
    note?: true
    createdAt?: true
  }

  export type AccountHistoryLogCountAggregateInputType = {
    id?: true
    userId?: true
    operatorId?: true
    action?: true
    note?: true
    createdAt?: true
    _all?: true
  }

  export type AccountHistoryLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountHistoryLog to aggregate.
     */
    where?: AccountHistoryLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountHistoryLogs to fetch.
     */
    orderBy?: AccountHistoryLogOrderByWithRelationInput | AccountHistoryLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountHistoryLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountHistoryLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountHistoryLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountHistoryLogs
    **/
    _count?: true | AccountHistoryLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountHistoryLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountHistoryLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountHistoryLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountHistoryLogMaxAggregateInputType
  }

  export type GetAccountHistoryLogAggregateType<T extends AccountHistoryLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountHistoryLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountHistoryLog[P]>
      : GetScalarType<T[P], AggregateAccountHistoryLog[P]>
  }




  export type AccountHistoryLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountHistoryLogWhereInput
    orderBy?: AccountHistoryLogOrderByWithAggregationInput | AccountHistoryLogOrderByWithAggregationInput[]
    by: AccountHistoryLogScalarFieldEnum[] | AccountHistoryLogScalarFieldEnum
    having?: AccountHistoryLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountHistoryLogCountAggregateInputType | true
    _avg?: AccountHistoryLogAvgAggregateInputType
    _sum?: AccountHistoryLogSumAggregateInputType
    _min?: AccountHistoryLogMinAggregateInputType
    _max?: AccountHistoryLogMaxAggregateInputType
  }

  export type AccountHistoryLogGroupByOutputType = {
    id: number
    userId: number
    operatorId: number | null
    action: string
    note: string | null
    createdAt: Date
    _count: AccountHistoryLogCountAggregateOutputType | null
    _avg: AccountHistoryLogAvgAggregateOutputType | null
    _sum: AccountHistoryLogSumAggregateOutputType | null
    _min: AccountHistoryLogMinAggregateOutputType | null
    _max: AccountHistoryLogMaxAggregateOutputType | null
  }

  type GetAccountHistoryLogGroupByPayload<T extends AccountHistoryLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountHistoryLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountHistoryLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountHistoryLogGroupByOutputType[P]>
            : GetScalarType<T[P], AccountHistoryLogGroupByOutputType[P]>
        }
      >
    >


  export type AccountHistoryLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    operatorId?: boolean
    action?: boolean
    note?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    operatedBy?: boolean | AccountHistoryLog$operatedByArgs<ExtArgs>
  }, ExtArgs["result"]["accountHistoryLog"]>

  export type AccountHistoryLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    operatorId?: boolean
    action?: boolean
    note?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    operatedBy?: boolean | AccountHistoryLog$operatedByArgs<ExtArgs>
  }, ExtArgs["result"]["accountHistoryLog"]>

  export type AccountHistoryLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    operatorId?: boolean
    action?: boolean
    note?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    operatedBy?: boolean | AccountHistoryLog$operatedByArgs<ExtArgs>
  }, ExtArgs["result"]["accountHistoryLog"]>

  export type AccountHistoryLogSelectScalar = {
    id?: boolean
    userId?: boolean
    operatorId?: boolean
    action?: boolean
    note?: boolean
    createdAt?: boolean
  }

  export type AccountHistoryLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "operatorId" | "action" | "note" | "createdAt", ExtArgs["result"]["accountHistoryLog"]>
  export type AccountHistoryLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    operatedBy?: boolean | AccountHistoryLog$operatedByArgs<ExtArgs>
  }
  export type AccountHistoryLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    operatedBy?: boolean | AccountHistoryLog$operatedByArgs<ExtArgs>
  }
  export type AccountHistoryLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    operatedBy?: boolean | AccountHistoryLog$operatedByArgs<ExtArgs>
  }

  export type $AccountHistoryLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountHistoryLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      operatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      operatorId: number | null
      action: string
      note: string | null
      createdAt: Date
    }, ExtArgs["result"]["accountHistoryLog"]>
    composites: {}
  }

  type AccountHistoryLogGetPayload<S extends boolean | null | undefined | AccountHistoryLogDefaultArgs> = $Result.GetResult<Prisma.$AccountHistoryLogPayload, S>

  type AccountHistoryLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountHistoryLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountHistoryLogCountAggregateInputType | true
    }

  export interface AccountHistoryLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountHistoryLog'], meta: { name: 'AccountHistoryLog' } }
    /**
     * Find zero or one AccountHistoryLog that matches the filter.
     * @param {AccountHistoryLogFindUniqueArgs} args - Arguments to find a AccountHistoryLog
     * @example
     * // Get one AccountHistoryLog
     * const accountHistoryLog = await prisma.accountHistoryLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountHistoryLogFindUniqueArgs>(args: SelectSubset<T, AccountHistoryLogFindUniqueArgs<ExtArgs>>): Prisma__AccountHistoryLogClient<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountHistoryLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountHistoryLogFindUniqueOrThrowArgs} args - Arguments to find a AccountHistoryLog
     * @example
     * // Get one AccountHistoryLog
     * const accountHistoryLog = await prisma.accountHistoryLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountHistoryLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountHistoryLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountHistoryLogClient<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountHistoryLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountHistoryLogFindFirstArgs} args - Arguments to find a AccountHistoryLog
     * @example
     * // Get one AccountHistoryLog
     * const accountHistoryLog = await prisma.accountHistoryLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountHistoryLogFindFirstArgs>(args?: SelectSubset<T, AccountHistoryLogFindFirstArgs<ExtArgs>>): Prisma__AccountHistoryLogClient<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountHistoryLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountHistoryLogFindFirstOrThrowArgs} args - Arguments to find a AccountHistoryLog
     * @example
     * // Get one AccountHistoryLog
     * const accountHistoryLog = await prisma.accountHistoryLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountHistoryLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountHistoryLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountHistoryLogClient<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountHistoryLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountHistoryLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountHistoryLogs
     * const accountHistoryLogs = await prisma.accountHistoryLog.findMany()
     * 
     * // Get first 10 AccountHistoryLogs
     * const accountHistoryLogs = await prisma.accountHistoryLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountHistoryLogWithIdOnly = await prisma.accountHistoryLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountHistoryLogFindManyArgs>(args?: SelectSubset<T, AccountHistoryLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountHistoryLog.
     * @param {AccountHistoryLogCreateArgs} args - Arguments to create a AccountHistoryLog.
     * @example
     * // Create one AccountHistoryLog
     * const AccountHistoryLog = await prisma.accountHistoryLog.create({
     *   data: {
     *     // ... data to create a AccountHistoryLog
     *   }
     * })
     * 
     */
    create<T extends AccountHistoryLogCreateArgs>(args: SelectSubset<T, AccountHistoryLogCreateArgs<ExtArgs>>): Prisma__AccountHistoryLogClient<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountHistoryLogs.
     * @param {AccountHistoryLogCreateManyArgs} args - Arguments to create many AccountHistoryLogs.
     * @example
     * // Create many AccountHistoryLogs
     * const accountHistoryLog = await prisma.accountHistoryLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountHistoryLogCreateManyArgs>(args?: SelectSubset<T, AccountHistoryLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccountHistoryLogs and returns the data saved in the database.
     * @param {AccountHistoryLogCreateManyAndReturnArgs} args - Arguments to create many AccountHistoryLogs.
     * @example
     * // Create many AccountHistoryLogs
     * const accountHistoryLog = await prisma.accountHistoryLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccountHistoryLogs and only return the `id`
     * const accountHistoryLogWithIdOnly = await prisma.accountHistoryLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountHistoryLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountHistoryLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AccountHistoryLog.
     * @param {AccountHistoryLogDeleteArgs} args - Arguments to delete one AccountHistoryLog.
     * @example
     * // Delete one AccountHistoryLog
     * const AccountHistoryLog = await prisma.accountHistoryLog.delete({
     *   where: {
     *     // ... filter to delete one AccountHistoryLog
     *   }
     * })
     * 
     */
    delete<T extends AccountHistoryLogDeleteArgs>(args: SelectSubset<T, AccountHistoryLogDeleteArgs<ExtArgs>>): Prisma__AccountHistoryLogClient<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountHistoryLog.
     * @param {AccountHistoryLogUpdateArgs} args - Arguments to update one AccountHistoryLog.
     * @example
     * // Update one AccountHistoryLog
     * const accountHistoryLog = await prisma.accountHistoryLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountHistoryLogUpdateArgs>(args: SelectSubset<T, AccountHistoryLogUpdateArgs<ExtArgs>>): Prisma__AccountHistoryLogClient<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountHistoryLogs.
     * @param {AccountHistoryLogDeleteManyArgs} args - Arguments to filter AccountHistoryLogs to delete.
     * @example
     * // Delete a few AccountHistoryLogs
     * const { count } = await prisma.accountHistoryLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountHistoryLogDeleteManyArgs>(args?: SelectSubset<T, AccountHistoryLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountHistoryLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountHistoryLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountHistoryLogs
     * const accountHistoryLog = await prisma.accountHistoryLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountHistoryLogUpdateManyArgs>(args: SelectSubset<T, AccountHistoryLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountHistoryLogs and returns the data updated in the database.
     * @param {AccountHistoryLogUpdateManyAndReturnArgs} args - Arguments to update many AccountHistoryLogs.
     * @example
     * // Update many AccountHistoryLogs
     * const accountHistoryLog = await prisma.accountHistoryLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AccountHistoryLogs and only return the `id`
     * const accountHistoryLogWithIdOnly = await prisma.accountHistoryLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountHistoryLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountHistoryLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AccountHistoryLog.
     * @param {AccountHistoryLogUpsertArgs} args - Arguments to update or create a AccountHistoryLog.
     * @example
     * // Update or create a AccountHistoryLog
     * const accountHistoryLog = await prisma.accountHistoryLog.upsert({
     *   create: {
     *     // ... data to create a AccountHistoryLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountHistoryLog we want to update
     *   }
     * })
     */
    upsert<T extends AccountHistoryLogUpsertArgs>(args: SelectSubset<T, AccountHistoryLogUpsertArgs<ExtArgs>>): Prisma__AccountHistoryLogClient<$Result.GetResult<Prisma.$AccountHistoryLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountHistoryLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountHistoryLogCountArgs} args - Arguments to filter AccountHistoryLogs to count.
     * @example
     * // Count the number of AccountHistoryLogs
     * const count = await prisma.accountHistoryLog.count({
     *   where: {
     *     // ... the filter for the AccountHistoryLogs we want to count
     *   }
     * })
    **/
    count<T extends AccountHistoryLogCountArgs>(
      args?: Subset<T, AccountHistoryLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountHistoryLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountHistoryLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountHistoryLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountHistoryLogAggregateArgs>(args: Subset<T, AccountHistoryLogAggregateArgs>): Prisma.PrismaPromise<GetAccountHistoryLogAggregateType<T>>

    /**
     * Group by AccountHistoryLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountHistoryLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountHistoryLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountHistoryLogGroupByArgs['orderBy'] }
        : { orderBy?: AccountHistoryLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountHistoryLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountHistoryLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountHistoryLog model
   */
  readonly fields: AccountHistoryLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountHistoryLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountHistoryLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    operatedBy<T extends AccountHistoryLog$operatedByArgs<ExtArgs> = {}>(args?: Subset<T, AccountHistoryLog$operatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountHistoryLog model
   */
  interface AccountHistoryLogFieldRefs {
    readonly id: FieldRef<"AccountHistoryLog", 'Int'>
    readonly userId: FieldRef<"AccountHistoryLog", 'Int'>
    readonly operatorId: FieldRef<"AccountHistoryLog", 'Int'>
    readonly action: FieldRef<"AccountHistoryLog", 'String'>
    readonly note: FieldRef<"AccountHistoryLog", 'String'>
    readonly createdAt: FieldRef<"AccountHistoryLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccountHistoryLog findUnique
   */
  export type AccountHistoryLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * Filter, which AccountHistoryLog to fetch.
     */
    where: AccountHistoryLogWhereUniqueInput
  }

  /**
   * AccountHistoryLog findUniqueOrThrow
   */
  export type AccountHistoryLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * Filter, which AccountHistoryLog to fetch.
     */
    where: AccountHistoryLogWhereUniqueInput
  }

  /**
   * AccountHistoryLog findFirst
   */
  export type AccountHistoryLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * Filter, which AccountHistoryLog to fetch.
     */
    where?: AccountHistoryLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountHistoryLogs to fetch.
     */
    orderBy?: AccountHistoryLogOrderByWithRelationInput | AccountHistoryLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountHistoryLogs.
     */
    cursor?: AccountHistoryLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountHistoryLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountHistoryLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountHistoryLogs.
     */
    distinct?: AccountHistoryLogScalarFieldEnum | AccountHistoryLogScalarFieldEnum[]
  }

  /**
   * AccountHistoryLog findFirstOrThrow
   */
  export type AccountHistoryLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * Filter, which AccountHistoryLog to fetch.
     */
    where?: AccountHistoryLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountHistoryLogs to fetch.
     */
    orderBy?: AccountHistoryLogOrderByWithRelationInput | AccountHistoryLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountHistoryLogs.
     */
    cursor?: AccountHistoryLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountHistoryLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountHistoryLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountHistoryLogs.
     */
    distinct?: AccountHistoryLogScalarFieldEnum | AccountHistoryLogScalarFieldEnum[]
  }

  /**
   * AccountHistoryLog findMany
   */
  export type AccountHistoryLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * Filter, which AccountHistoryLogs to fetch.
     */
    where?: AccountHistoryLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountHistoryLogs to fetch.
     */
    orderBy?: AccountHistoryLogOrderByWithRelationInput | AccountHistoryLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountHistoryLogs.
     */
    cursor?: AccountHistoryLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountHistoryLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountHistoryLogs.
     */
    skip?: number
    distinct?: AccountHistoryLogScalarFieldEnum | AccountHistoryLogScalarFieldEnum[]
  }

  /**
   * AccountHistoryLog create
   */
  export type AccountHistoryLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountHistoryLog.
     */
    data: XOR<AccountHistoryLogCreateInput, AccountHistoryLogUncheckedCreateInput>
  }

  /**
   * AccountHistoryLog createMany
   */
  export type AccountHistoryLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountHistoryLogs.
     */
    data: AccountHistoryLogCreateManyInput | AccountHistoryLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountHistoryLog createManyAndReturn
   */
  export type AccountHistoryLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * The data used to create many AccountHistoryLogs.
     */
    data: AccountHistoryLogCreateManyInput | AccountHistoryLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountHistoryLog update
   */
  export type AccountHistoryLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountHistoryLog.
     */
    data: XOR<AccountHistoryLogUpdateInput, AccountHistoryLogUncheckedUpdateInput>
    /**
     * Choose, which AccountHistoryLog to update.
     */
    where: AccountHistoryLogWhereUniqueInput
  }

  /**
   * AccountHistoryLog updateMany
   */
  export type AccountHistoryLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountHistoryLogs.
     */
    data: XOR<AccountHistoryLogUpdateManyMutationInput, AccountHistoryLogUncheckedUpdateManyInput>
    /**
     * Filter which AccountHistoryLogs to update
     */
    where?: AccountHistoryLogWhereInput
    /**
     * Limit how many AccountHistoryLogs to update.
     */
    limit?: number
  }

  /**
   * AccountHistoryLog updateManyAndReturn
   */
  export type AccountHistoryLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * The data used to update AccountHistoryLogs.
     */
    data: XOR<AccountHistoryLogUpdateManyMutationInput, AccountHistoryLogUncheckedUpdateManyInput>
    /**
     * Filter which AccountHistoryLogs to update
     */
    where?: AccountHistoryLogWhereInput
    /**
     * Limit how many AccountHistoryLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountHistoryLog upsert
   */
  export type AccountHistoryLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountHistoryLog to update in case it exists.
     */
    where: AccountHistoryLogWhereUniqueInput
    /**
     * In case the AccountHistoryLog found by the `where` argument doesn't exist, create a new AccountHistoryLog with this data.
     */
    create: XOR<AccountHistoryLogCreateInput, AccountHistoryLogUncheckedCreateInput>
    /**
     * In case the AccountHistoryLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountHistoryLogUpdateInput, AccountHistoryLogUncheckedUpdateInput>
  }

  /**
   * AccountHistoryLog delete
   */
  export type AccountHistoryLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
    /**
     * Filter which AccountHistoryLog to delete.
     */
    where: AccountHistoryLogWhereUniqueInput
  }

  /**
   * AccountHistoryLog deleteMany
   */
  export type AccountHistoryLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountHistoryLogs to delete
     */
    where?: AccountHistoryLogWhereInput
    /**
     * Limit how many AccountHistoryLogs to delete.
     */
    limit?: number
  }

  /**
   * AccountHistoryLog.operatedBy
   */
  export type AccountHistoryLog$operatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AccountHistoryLog without action
   */
  export type AccountHistoryLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountHistoryLog
     */
    select?: AccountHistoryLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountHistoryLog
     */
    omit?: AccountHistoryLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountHistoryLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ResumeAccessGrantScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    grantedToId: 'grantedToId',
    grantedById: 'grantedById',
    createdAt: 'createdAt'
  };

  export type ResumeAccessGrantScalarFieldEnum = (typeof ResumeAccessGrantScalarFieldEnum)[keyof typeof ResumeAccessGrantScalarFieldEnum]


  export const ResumeViewLogScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    userViewedById: 'userViewedById',
    resumeId: 'resumeId',
    viewedAt: 'viewedAt'
  };

  export type ResumeViewLogScalarFieldEnum = (typeof ResumeViewLogScalarFieldEnum)[keyof typeof ResumeViewLogScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    isApproved: 'isApproved',
    isActive: 'isActive'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const AttendanceLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    companyId: 'companyId',
    clockIn: 'clockIn',
    clockOut: 'clockOut',
    note: 'note',
    scheduleId: 'scheduleId'
  };

  export type AttendanceLogScalarFieldEnum = (typeof AttendanceLogScalarFieldEnum)[keyof typeof AttendanceLogScalarFieldEnum]


  export const ShiftScheduleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    companyId: 'companyId',
    shiftDate: 'shiftDate',
    startTime: 'startTime',
    endTime: 'endTime',
    note: 'note'
  };

  export type ShiftScheduleScalarFieldEnum = (typeof ShiftScheduleScalarFieldEnum)[keyof typeof ShiftScheduleScalarFieldEnum]


  export const PaySlipScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    issuedById: 'issuedById',
    companyId: 'companyId',
    month: 'month',
    amount: 'amount',
    note: 'note',
    fileUrl: 'fileUrl',
    createdAt: 'createdAt'
  };

  export type PaySlipScalarFieldEnum = (typeof PaySlipScalarFieldEnum)[keyof typeof PaySlipScalarFieldEnum]


  export const JobPostingScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    title: 'title',
    description: 'description',
    location: 'location',
    jobType: 'jobType',
    salaryRange: 'salaryRange',
    isActive: 'isActive',
    postedAt: 'postedAt',
    expiredAt: 'expiredAt'
  };

  export type JobPostingScalarFieldEnum = (typeof JobPostingScalarFieldEnum)[keyof typeof JobPostingScalarFieldEnum]


  export const JobApplicationScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    resumeId: 'resumeId',
    status: 'status',
    appliedAt: 'appliedAt',
    note: 'note'
  };

  export type JobApplicationScalarFieldEnum = (typeof JobApplicationScalarFieldEnum)[keyof typeof JobApplicationScalarFieldEnum]


  export const MessageThreadScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    createdById: 'createdById',
    createdAt: 'createdAt'
  };

  export type MessageThreadScalarFieldEnum = (typeof MessageThreadScalarFieldEnum)[keyof typeof MessageThreadScalarFieldEnum]


  export const MessageLogScalarFieldEnum: {
    id: 'id',
    threadId: 'threadId',
    senderId: 'senderId',
    content: 'content',
    sentAt: 'sentAt'
  };

  export type MessageLogScalarFieldEnum = (typeof MessageLogScalarFieldEnum)[keyof typeof MessageLogScalarFieldEnum]


  export const UserResumeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    isPrimary: 'isPrimary',
    title: 'title',
    companyId: 'companyId',
    identityNumber: 'identityNumber',
    workPermit: 'workPermit',
    passport: 'passport',
    email: 'email',
    emailVerified: 'emailVerified',
    phoneNumber: 'phoneNumber',
    phoneVerified: 'phoneVerified',
    profilePicture: 'profilePicture',
    firstName: 'firstName',
    lastName: 'lastName',
    englishName: 'englishName',
    nickname: 'nickname',
    mailCountry: 'mailCountry',
    mailCity: 'mailCity',
    mailDistrict: 'mailDistrict',
    mailAddress: 'mailAddress',
    residentialCountry: 'residentialCountry',
    residentialCity: 'residentialCity',
    residentialDistrict: 'residentialDistrict',
    residentialAddress: 'residentialAddress',
    isRegistered: 'isRegistered',
    isDeleted: 'isDeleted',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserResumeScalarFieldEnum = (typeof UserResumeScalarFieldEnum)[keyof typeof UserResumeScalarFieldEnum]


  export const LanguageScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    name: 'name',
    level: 'level',
    levelOther: 'levelOther'
  };

  export type LanguageScalarFieldEnum = (typeof LanguageScalarFieldEnum)[keyof typeof LanguageScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    school: 'school',
    department: 'department',
    status: 'status',
    statusOther: 'statusOther',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const ExperienceScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    company: 'company',
    title: 'title',
    startDate: 'startDate',
    endDate: 'endDate',
    description: 'description'
  };

  export type ExperienceScalarFieldEnum = (typeof ExperienceScalarFieldEnum)[keyof typeof ExperienceScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    name: 'name'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const CertificateScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    name: 'name',
    expiry: 'expiry'
  };

  export type CertificateScalarFieldEnum = (typeof CertificateScalarFieldEnum)[keyof typeof CertificateScalarFieldEnum]


  export const TraitScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    personality: 'personality',
    interest: 'interest'
  };

  export type TraitScalarFieldEnum = (typeof TraitScalarFieldEnum)[keyof typeof TraitScalarFieldEnum]


  export const CommuteScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    method: 'method',
    methodOther: 'methodOther'
  };

  export type CommuteScalarFieldEnum = (typeof CommuteScalarFieldEnum)[keyof typeof CommuteScalarFieldEnum]


  export const WorkingTimeScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    shift: 'shift',
    shiftOther: 'shiftOther',
    preference: 'preference',
    expectedStart: 'expectedStart',
    expectedEnd: 'expectedEnd'
  };

  export type WorkingTimeScalarFieldEnum = (typeof WorkingTimeScalarFieldEnum)[keyof typeof WorkingTimeScalarFieldEnum]


  export const WorkIdentityScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    identity: 'identity',
    identityOther: 'identityOther'
  };

  export type WorkIdentityScalarFieldEnum = (typeof WorkIdentityScalarFieldEnum)[keyof typeof WorkIdentityScalarFieldEnum]


  export const JobTypeScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    type: 'type',
    typeOther: 'typeOther'
  };

  export type JobTypeScalarFieldEnum = (typeof JobTypeScalarFieldEnum)[keyof typeof JobTypeScalarFieldEnum]


  export const EmergencyContactScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    relation: 'relation',
    relationOther: 'relationOther'
  };

  export type EmergencyContactScalarFieldEnum = (typeof EmergencyContactScalarFieldEnum)[keyof typeof EmergencyContactScalarFieldEnum]


  export const BiographyScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    content: 'content'
  };

  export type BiographyScalarFieldEnum = (typeof BiographyScalarFieldEnum)[keyof typeof BiographyScalarFieldEnum]


  export const PortfolioScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    externalUrl: 'externalUrl',
    title: 'title',
    description: 'description'
  };

  export type PortfolioScalarFieldEnum = (typeof PortfolioScalarFieldEnum)[keyof typeof PortfolioScalarFieldEnum]


  export const ProfilePhotoScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    fileUrl: 'fileUrl',
    type: 'type'
  };

  export type ProfilePhotoScalarFieldEnum = (typeof ProfilePhotoScalarFieldEnum)[keyof typeof ProfilePhotoScalarFieldEnum]


  export const ResumeVersionScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    snapshot: 'snapshot',
    createdAt: 'createdAt',
    version: 'version',
    note: 'note',
    isCurrent: 'isCurrent'
  };

  export type ResumeVersionScalarFieldEnum = (typeof ResumeVersionScalarFieldEnum)[keyof typeof ResumeVersionScalarFieldEnum]


  export const ResumeVisibilityScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    isPublic: 'isPublic',
    allowedAudience: 'allowedAudience',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type ResumeVisibilityScalarFieldEnum = (typeof ResumeVisibilityScalarFieldEnum)[keyof typeof ResumeVisibilityScalarFieldEnum]


  export const ResumeReviewStatusScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    viewerId: 'viewerId',
    viewerType: 'viewerType',
    viewedAt: 'viewedAt'
  };

  export type ResumeReviewStatusScalarFieldEnum = (typeof ResumeReviewStatusScalarFieldEnum)[keyof typeof ResumeReviewStatusScalarFieldEnum]


  export const ResumePDFScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    fileUrl: 'fileUrl',
    template: 'template',
    createdAt: 'createdAt'
  };

  export type ResumePDFScalarFieldEnum = (typeof ResumePDFScalarFieldEnum)[keyof typeof ResumePDFScalarFieldEnum]


  export const UserReviewLogScalarFieldEnum: {
    id: 'id',
    targetUserId: 'targetUserId',
    reviewerId: 'reviewerId',
    score: 'score',
    reviewType: 'reviewType',
    isBlacklisted: 'isBlacklisted',
    note: 'note',
    createdAt: 'createdAt'
  };

  export type UserReviewLogScalarFieldEnum = (typeof UserReviewLogScalarFieldEnum)[keyof typeof UserReviewLogScalarFieldEnum]


  export const ResumeReviewLogScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    reviewerId: 'reviewerId',
    score: 'score',
    status: 'status',
    note: 'note',
    createdAt: 'createdAt'
  };

  export type ResumeReviewLogScalarFieldEnum = (typeof ResumeReviewLogScalarFieldEnum)[keyof typeof ResumeReviewLogScalarFieldEnum]


  export const UserReviewTagScalarFieldEnum: {
    id: 'id',
    tagId: 'tagId',
    reviewId: 'reviewId'
  };

  export type UserReviewTagScalarFieldEnum = (typeof UserReviewTagScalarFieldEnum)[keyof typeof UserReviewTagScalarFieldEnum]


  export const ResumeReviewTagScalarFieldEnum: {
    id: 'id',
    tagId: 'tagId',
    reviewId: 'reviewId'
  };

  export type ResumeReviewTagScalarFieldEnum = (typeof ResumeReviewTagScalarFieldEnum)[keyof typeof ResumeReviewTagScalarFieldEnum]


  export const ReviewTagOptionScalarFieldEnum: {
    id: 'id',
    label: 'label',
    type: 'type',
    isPublic: 'isPublic'
  };

  export type ReviewTagOptionScalarFieldEnum = (typeof ReviewTagOptionScalarFieldEnum)[keyof typeof ReviewTagOptionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    googleId: 'googleId',
    facebookId: 'facebookId',
    lineId: 'lineId',
    lastLogin: 'lastLogin',
    lastLoginIp: 'lastLoginIp',
    skipRegistration: 'skipRegistration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    deletedAt: 'deletedAt',
    isAnonymized: 'isAnonymized',
    deletionReason: 'deletionReason',
    companyId: 'companyId',
    role: 'role',
    resumeId: 'resumeId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const IpRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    ipAddress: 'ipAddress',
    location: 'location',
    createdAt: 'createdAt'
  };

  export type IpRecordScalarFieldEnum = (typeof IpRecordScalarFieldEnum)[keyof typeof IpRecordScalarFieldEnum]


  export const DeviceRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    deviceInfo: 'deviceInfo',
    platform: 'platform',
    createdAt: 'createdAt'
  };

  export type DeviceRecordScalarFieldEnum = (typeof DeviceRecordScalarFieldEnum)[keyof typeof DeviceRecordScalarFieldEnum]


  export const AccountHistoryLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    operatorId: 'operatorId',
    action: 'action',
    note: 'note',
    createdAt: 'createdAt'
  };

  export type AccountHistoryLogScalarFieldEnum = (typeof AccountHistoryLogScalarFieldEnum)[keyof typeof AccountHistoryLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'CompanyType'
   */
  export type EnumCompanyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyType'>
    


  /**
   * Reference to a field of type 'CompanyType[]'
   */
  export type ListEnumCompanyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'JobTypeEnum'
   */
  export type EnumJobTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobTypeEnum'>
    


  /**
   * Reference to a field of type 'JobTypeEnum[]'
   */
  export type ListEnumJobTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobTypeEnum[]'>
    


  /**
   * Reference to a field of type 'LanguageLevel'
   */
  export type EnumLanguageLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LanguageLevel'>
    


  /**
   * Reference to a field of type 'LanguageLevel[]'
   */
  export type ListEnumLanguageLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LanguageLevel[]'>
    


  /**
   * Reference to a field of type 'EducationStatus'
   */
  export type EnumEducationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EducationStatus'>
    


  /**
   * Reference to a field of type 'EducationStatus[]'
   */
  export type ListEnumEducationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EducationStatus[]'>
    


  /**
   * Reference to a field of type 'CommuteMethod'
   */
  export type EnumCommuteMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommuteMethod'>
    


  /**
   * Reference to a field of type 'CommuteMethod[]'
   */
  export type ListEnumCommuteMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommuteMethod[]'>
    


  /**
   * Reference to a field of type 'ShiftType'
   */
  export type EnumShiftTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShiftType'>
    


  /**
   * Reference to a field of type 'ShiftType[]'
   */
  export type ListEnumShiftTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShiftType[]'>
    


  /**
   * Reference to a field of type 'WorkIdentityType'
   */
  export type EnumWorkIdentityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkIdentityType'>
    


  /**
   * Reference to a field of type 'WorkIdentityType[]'
   */
  export type ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkIdentityType[]'>
    


  /**
   * Reference to a field of type 'ContactRelation'
   */
  export type EnumContactRelationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactRelation'>
    


  /**
   * Reference to a field of type 'ContactRelation[]'
   */
  export type ListEnumContactRelationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactRelation[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'ReviewStatus'
   */
  export type EnumReviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewStatus'>
    


  /**
   * Reference to a field of type 'ReviewStatus[]'
   */
  export type ListEnumReviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewStatus[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ResumeAccessGrantWhereInput = {
    AND?: ResumeAccessGrantWhereInput | ResumeAccessGrantWhereInput[]
    OR?: ResumeAccessGrantWhereInput[]
    NOT?: ResumeAccessGrantWhereInput | ResumeAccessGrantWhereInput[]
    id?: IntFilter<"ResumeAccessGrant"> | number
    resumeId?: IntFilter<"ResumeAccessGrant"> | number
    grantedToId?: IntFilter<"ResumeAccessGrant"> | number
    grantedById?: IntFilter<"ResumeAccessGrant"> | number
    createdAt?: DateTimeFilter<"ResumeAccessGrant"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
    grantedTo?: XOR<UserScalarRelationFilter, UserWhereInput>
    grantedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ResumeAccessGrantOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    grantedToId?: SortOrder
    grantedById?: SortOrder
    createdAt?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
    grantedTo?: UserOrderByWithRelationInput
    grantedBy?: UserOrderByWithRelationInput
  }

  export type ResumeAccessGrantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    resumeId_grantedToId?: ResumeAccessGrantResumeIdGrantedToIdCompoundUniqueInput
    AND?: ResumeAccessGrantWhereInput | ResumeAccessGrantWhereInput[]
    OR?: ResumeAccessGrantWhereInput[]
    NOT?: ResumeAccessGrantWhereInput | ResumeAccessGrantWhereInput[]
    resumeId?: IntFilter<"ResumeAccessGrant"> | number
    grantedToId?: IntFilter<"ResumeAccessGrant"> | number
    grantedById?: IntFilter<"ResumeAccessGrant"> | number
    createdAt?: DateTimeFilter<"ResumeAccessGrant"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
    grantedTo?: XOR<UserScalarRelationFilter, UserWhereInput>
    grantedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "resumeId_grantedToId">

  export type ResumeAccessGrantOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    grantedToId?: SortOrder
    grantedById?: SortOrder
    createdAt?: SortOrder
    _count?: ResumeAccessGrantCountOrderByAggregateInput
    _avg?: ResumeAccessGrantAvgOrderByAggregateInput
    _max?: ResumeAccessGrantMaxOrderByAggregateInput
    _min?: ResumeAccessGrantMinOrderByAggregateInput
    _sum?: ResumeAccessGrantSumOrderByAggregateInput
  }

  export type ResumeAccessGrantScalarWhereWithAggregatesInput = {
    AND?: ResumeAccessGrantScalarWhereWithAggregatesInput | ResumeAccessGrantScalarWhereWithAggregatesInput[]
    OR?: ResumeAccessGrantScalarWhereWithAggregatesInput[]
    NOT?: ResumeAccessGrantScalarWhereWithAggregatesInput | ResumeAccessGrantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResumeAccessGrant"> | number
    resumeId?: IntWithAggregatesFilter<"ResumeAccessGrant"> | number
    grantedToId?: IntWithAggregatesFilter<"ResumeAccessGrant"> | number
    grantedById?: IntWithAggregatesFilter<"ResumeAccessGrant"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ResumeAccessGrant"> | Date | string
  }

  export type ResumeViewLogWhereInput = {
    AND?: ResumeViewLogWhereInput | ResumeViewLogWhereInput[]
    OR?: ResumeViewLogWhereInput[]
    NOT?: ResumeViewLogWhereInput | ResumeViewLogWhereInput[]
    id?: IntFilter<"ResumeViewLog"> | number
    adminId?: IntFilter<"ResumeViewLog"> | number
    userViewedById?: IntFilter<"ResumeViewLog"> | number
    resumeId?: IntFilter<"ResumeViewLog"> | number
    viewedAt?: DateTimeFilter<"ResumeViewLog"> | Date | string
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    userViewedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type ResumeViewLogOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    userViewedById?: SortOrder
    resumeId?: SortOrder
    viewedAt?: SortOrder
    admin?: UserOrderByWithRelationInput
    userViewedBy?: UserOrderByWithRelationInput
    resume?: UserResumeOrderByWithRelationInput
  }

  export type ResumeViewLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResumeViewLogWhereInput | ResumeViewLogWhereInput[]
    OR?: ResumeViewLogWhereInput[]
    NOT?: ResumeViewLogWhereInput | ResumeViewLogWhereInput[]
    adminId?: IntFilter<"ResumeViewLog"> | number
    userViewedById?: IntFilter<"ResumeViewLog"> | number
    resumeId?: IntFilter<"ResumeViewLog"> | number
    viewedAt?: DateTimeFilter<"ResumeViewLog"> | Date | string
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    userViewedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type ResumeViewLogOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    userViewedById?: SortOrder
    resumeId?: SortOrder
    viewedAt?: SortOrder
    _count?: ResumeViewLogCountOrderByAggregateInput
    _avg?: ResumeViewLogAvgOrderByAggregateInput
    _max?: ResumeViewLogMaxOrderByAggregateInput
    _min?: ResumeViewLogMinOrderByAggregateInput
    _sum?: ResumeViewLogSumOrderByAggregateInput
  }

  export type ResumeViewLogScalarWhereWithAggregatesInput = {
    AND?: ResumeViewLogScalarWhereWithAggregatesInput | ResumeViewLogScalarWhereWithAggregatesInput[]
    OR?: ResumeViewLogScalarWhereWithAggregatesInput[]
    NOT?: ResumeViewLogScalarWhereWithAggregatesInput | ResumeViewLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResumeViewLog"> | number
    adminId?: IntWithAggregatesFilter<"ResumeViewLog"> | number
    userViewedById?: IntWithAggregatesFilter<"ResumeViewLog"> | number
    resumeId?: IntWithAggregatesFilter<"ResumeViewLog"> | number
    viewedAt?: DateTimeWithAggregatesFilter<"ResumeViewLog"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: IntFilter<"Company"> | number
    name?: StringFilter<"Company"> | string
    type?: EnumCompanyTypeFilter<"Company"> | $Enums.CompanyType
    isApproved?: BoolFilter<"Company"> | boolean
    isActive?: BoolFilter<"Company"> | boolean
    users?: UserListRelationFilter
    resumes?: UserResumeListRelationFilter
    attendanceLogs?: AttendanceLogListRelationFilter
    schedules?: ShiftScheduleListRelationFilter
    issuedPaySlips?: PaySlipListRelationFilter
    jobPosting?: JobPostingListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    isActive?: SortOrder
    users?: UserOrderByRelationAggregateInput
    resumes?: UserResumeOrderByRelationAggregateInput
    attendanceLogs?: AttendanceLogOrderByRelationAggregateInput
    schedules?: ShiftScheduleOrderByRelationAggregateInput
    issuedPaySlips?: PaySlipOrderByRelationAggregateInput
    jobPosting?: JobPostingOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    type?: EnumCompanyTypeFilter<"Company"> | $Enums.CompanyType
    isApproved?: BoolFilter<"Company"> | boolean
    isActive?: BoolFilter<"Company"> | boolean
    users?: UserListRelationFilter
    resumes?: UserResumeListRelationFilter
    attendanceLogs?: AttendanceLogListRelationFilter
    schedules?: ShiftScheduleListRelationFilter
    issuedPaySlips?: PaySlipListRelationFilter
    jobPosting?: JobPostingListRelationFilter
  }, "id" | "name">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    isActive?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Company"> | number
    name?: StringWithAggregatesFilter<"Company"> | string
    type?: EnumCompanyTypeWithAggregatesFilter<"Company"> | $Enums.CompanyType
    isApproved?: BoolWithAggregatesFilter<"Company"> | boolean
    isActive?: BoolWithAggregatesFilter<"Company"> | boolean
  }

  export type AttendanceLogWhereInput = {
    AND?: AttendanceLogWhereInput | AttendanceLogWhereInput[]
    OR?: AttendanceLogWhereInput[]
    NOT?: AttendanceLogWhereInput | AttendanceLogWhereInput[]
    id?: IntFilter<"AttendanceLog"> | number
    userId?: IntFilter<"AttendanceLog"> | number
    companyId?: IntFilter<"AttendanceLog"> | number
    clockIn?: DateTimeFilter<"AttendanceLog"> | Date | string
    clockOut?: DateTimeNullableFilter<"AttendanceLog"> | Date | string | null
    note?: StringNullableFilter<"AttendanceLog"> | string | null
    scheduleId?: IntNullableFilter<"AttendanceLog"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    schedule?: XOR<ShiftScheduleNullableScalarRelationFilter, ShiftScheduleWhereInput> | null
  }

  export type AttendanceLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    scheduleId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    schedule?: ShiftScheduleOrderByWithRelationInput
  }

  export type AttendanceLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttendanceLogWhereInput | AttendanceLogWhereInput[]
    OR?: AttendanceLogWhereInput[]
    NOT?: AttendanceLogWhereInput | AttendanceLogWhereInput[]
    userId?: IntFilter<"AttendanceLog"> | number
    companyId?: IntFilter<"AttendanceLog"> | number
    clockIn?: DateTimeFilter<"AttendanceLog"> | Date | string
    clockOut?: DateTimeNullableFilter<"AttendanceLog"> | Date | string | null
    note?: StringNullableFilter<"AttendanceLog"> | string | null
    scheduleId?: IntNullableFilter<"AttendanceLog"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    schedule?: XOR<ShiftScheduleNullableScalarRelationFilter, ShiftScheduleWhereInput> | null
  }, "id">

  export type AttendanceLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    scheduleId?: SortOrderInput | SortOrder
    _count?: AttendanceLogCountOrderByAggregateInput
    _avg?: AttendanceLogAvgOrderByAggregateInput
    _max?: AttendanceLogMaxOrderByAggregateInput
    _min?: AttendanceLogMinOrderByAggregateInput
    _sum?: AttendanceLogSumOrderByAggregateInput
  }

  export type AttendanceLogScalarWhereWithAggregatesInput = {
    AND?: AttendanceLogScalarWhereWithAggregatesInput | AttendanceLogScalarWhereWithAggregatesInput[]
    OR?: AttendanceLogScalarWhereWithAggregatesInput[]
    NOT?: AttendanceLogScalarWhereWithAggregatesInput | AttendanceLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AttendanceLog"> | number
    userId?: IntWithAggregatesFilter<"AttendanceLog"> | number
    companyId?: IntWithAggregatesFilter<"AttendanceLog"> | number
    clockIn?: DateTimeWithAggregatesFilter<"AttendanceLog"> | Date | string
    clockOut?: DateTimeNullableWithAggregatesFilter<"AttendanceLog"> | Date | string | null
    note?: StringNullableWithAggregatesFilter<"AttendanceLog"> | string | null
    scheduleId?: IntNullableWithAggregatesFilter<"AttendanceLog"> | number | null
  }

  export type ShiftScheduleWhereInput = {
    AND?: ShiftScheduleWhereInput | ShiftScheduleWhereInput[]
    OR?: ShiftScheduleWhereInput[]
    NOT?: ShiftScheduleWhereInput | ShiftScheduleWhereInput[]
    id?: IntFilter<"ShiftSchedule"> | number
    userId?: IntFilter<"ShiftSchedule"> | number
    companyId?: IntFilter<"ShiftSchedule"> | number
    shiftDate?: DateTimeFilter<"ShiftSchedule"> | Date | string
    startTime?: DateTimeFilter<"ShiftSchedule"> | Date | string
    endTime?: DateTimeFilter<"ShiftSchedule"> | Date | string
    note?: StringNullableFilter<"ShiftSchedule"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    attendanceLogs?: AttendanceLogListRelationFilter
  }

  export type ShiftScheduleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    shiftDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    note?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    attendanceLogs?: AttendanceLogOrderByRelationAggregateInput
  }

  export type ShiftScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShiftScheduleWhereInput | ShiftScheduleWhereInput[]
    OR?: ShiftScheduleWhereInput[]
    NOT?: ShiftScheduleWhereInput | ShiftScheduleWhereInput[]
    userId?: IntFilter<"ShiftSchedule"> | number
    companyId?: IntFilter<"ShiftSchedule"> | number
    shiftDate?: DateTimeFilter<"ShiftSchedule"> | Date | string
    startTime?: DateTimeFilter<"ShiftSchedule"> | Date | string
    endTime?: DateTimeFilter<"ShiftSchedule"> | Date | string
    note?: StringNullableFilter<"ShiftSchedule"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    attendanceLogs?: AttendanceLogListRelationFilter
  }, "id">

  export type ShiftScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    shiftDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    note?: SortOrderInput | SortOrder
    _count?: ShiftScheduleCountOrderByAggregateInput
    _avg?: ShiftScheduleAvgOrderByAggregateInput
    _max?: ShiftScheduleMaxOrderByAggregateInput
    _min?: ShiftScheduleMinOrderByAggregateInput
    _sum?: ShiftScheduleSumOrderByAggregateInput
  }

  export type ShiftScheduleScalarWhereWithAggregatesInput = {
    AND?: ShiftScheduleScalarWhereWithAggregatesInput | ShiftScheduleScalarWhereWithAggregatesInput[]
    OR?: ShiftScheduleScalarWhereWithAggregatesInput[]
    NOT?: ShiftScheduleScalarWhereWithAggregatesInput | ShiftScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShiftSchedule"> | number
    userId?: IntWithAggregatesFilter<"ShiftSchedule"> | number
    companyId?: IntWithAggregatesFilter<"ShiftSchedule"> | number
    shiftDate?: DateTimeWithAggregatesFilter<"ShiftSchedule"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"ShiftSchedule"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"ShiftSchedule"> | Date | string
    note?: StringNullableWithAggregatesFilter<"ShiftSchedule"> | string | null
  }

  export type PaySlipWhereInput = {
    AND?: PaySlipWhereInput | PaySlipWhereInput[]
    OR?: PaySlipWhereInput[]
    NOT?: PaySlipWhereInput | PaySlipWhereInput[]
    id?: IntFilter<"PaySlip"> | number
    userId?: IntFilter<"PaySlip"> | number
    issuedById?: IntFilter<"PaySlip"> | number
    companyId?: IntFilter<"PaySlip"> | number
    month?: DateTimeFilter<"PaySlip"> | Date | string
    amount?: IntFilter<"PaySlip"> | number
    note?: StringNullableFilter<"PaySlip"> | string | null
    fileUrl?: StringNullableFilter<"PaySlip"> | string | null
    createdAt?: DateTimeFilter<"PaySlip"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    issuedBy?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type PaySlipOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    issuedById?: SortOrder
    companyId?: SortOrder
    month?: SortOrder
    amount?: SortOrder
    note?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    issuedBy?: CompanyOrderByWithRelationInput
  }

  export type PaySlipWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaySlipWhereInput | PaySlipWhereInput[]
    OR?: PaySlipWhereInput[]
    NOT?: PaySlipWhereInput | PaySlipWhereInput[]
    userId?: IntFilter<"PaySlip"> | number
    issuedById?: IntFilter<"PaySlip"> | number
    companyId?: IntFilter<"PaySlip"> | number
    month?: DateTimeFilter<"PaySlip"> | Date | string
    amount?: IntFilter<"PaySlip"> | number
    note?: StringNullableFilter<"PaySlip"> | string | null
    fileUrl?: StringNullableFilter<"PaySlip"> | string | null
    createdAt?: DateTimeFilter<"PaySlip"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    issuedBy?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id">

  export type PaySlipOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    issuedById?: SortOrder
    companyId?: SortOrder
    month?: SortOrder
    amount?: SortOrder
    note?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PaySlipCountOrderByAggregateInput
    _avg?: PaySlipAvgOrderByAggregateInput
    _max?: PaySlipMaxOrderByAggregateInput
    _min?: PaySlipMinOrderByAggregateInput
    _sum?: PaySlipSumOrderByAggregateInput
  }

  export type PaySlipScalarWhereWithAggregatesInput = {
    AND?: PaySlipScalarWhereWithAggregatesInput | PaySlipScalarWhereWithAggregatesInput[]
    OR?: PaySlipScalarWhereWithAggregatesInput[]
    NOT?: PaySlipScalarWhereWithAggregatesInput | PaySlipScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PaySlip"> | number
    userId?: IntWithAggregatesFilter<"PaySlip"> | number
    issuedById?: IntWithAggregatesFilter<"PaySlip"> | number
    companyId?: IntWithAggregatesFilter<"PaySlip"> | number
    month?: DateTimeWithAggregatesFilter<"PaySlip"> | Date | string
    amount?: IntWithAggregatesFilter<"PaySlip"> | number
    note?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    fileUrl?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PaySlip"> | Date | string
  }

  export type JobPostingWhereInput = {
    AND?: JobPostingWhereInput | JobPostingWhereInput[]
    OR?: JobPostingWhereInput[]
    NOT?: JobPostingWhereInput | JobPostingWhereInput[]
    id?: IntFilter<"JobPosting"> | number
    companyId?: IntFilter<"JobPosting"> | number
    title?: StringFilter<"JobPosting"> | string
    description?: StringFilter<"JobPosting"> | string
    location?: StringNullableFilter<"JobPosting"> | string | null
    jobType?: EnumJobTypeEnumFilter<"JobPosting"> | $Enums.JobTypeEnum
    salaryRange?: StringNullableFilter<"JobPosting"> | string | null
    isActive?: BoolFilter<"JobPosting"> | boolean
    postedAt?: DateTimeFilter<"JobPosting"> | Date | string
    expiredAt?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    applications?: JobApplicationListRelationFilter
  }

  export type JobPostingOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrderInput | SortOrder
    jobType?: SortOrder
    salaryRange?: SortOrderInput | SortOrder
    isActive?: SortOrder
    postedAt?: SortOrder
    expiredAt?: SortOrderInput | SortOrder
    company?: CompanyOrderByWithRelationInput
    applications?: JobApplicationOrderByRelationAggregateInput
  }

  export type JobPostingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobPostingWhereInput | JobPostingWhereInput[]
    OR?: JobPostingWhereInput[]
    NOT?: JobPostingWhereInput | JobPostingWhereInput[]
    companyId?: IntFilter<"JobPosting"> | number
    title?: StringFilter<"JobPosting"> | string
    description?: StringFilter<"JobPosting"> | string
    location?: StringNullableFilter<"JobPosting"> | string | null
    jobType?: EnumJobTypeEnumFilter<"JobPosting"> | $Enums.JobTypeEnum
    salaryRange?: StringNullableFilter<"JobPosting"> | string | null
    isActive?: BoolFilter<"JobPosting"> | boolean
    postedAt?: DateTimeFilter<"JobPosting"> | Date | string
    expiredAt?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    applications?: JobApplicationListRelationFilter
  }, "id">

  export type JobPostingOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrderInput | SortOrder
    jobType?: SortOrder
    salaryRange?: SortOrderInput | SortOrder
    isActive?: SortOrder
    postedAt?: SortOrder
    expiredAt?: SortOrderInput | SortOrder
    _count?: JobPostingCountOrderByAggregateInput
    _avg?: JobPostingAvgOrderByAggregateInput
    _max?: JobPostingMaxOrderByAggregateInput
    _min?: JobPostingMinOrderByAggregateInput
    _sum?: JobPostingSumOrderByAggregateInput
  }

  export type JobPostingScalarWhereWithAggregatesInput = {
    AND?: JobPostingScalarWhereWithAggregatesInput | JobPostingScalarWhereWithAggregatesInput[]
    OR?: JobPostingScalarWhereWithAggregatesInput[]
    NOT?: JobPostingScalarWhereWithAggregatesInput | JobPostingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobPosting"> | number
    companyId?: IntWithAggregatesFilter<"JobPosting"> | number
    title?: StringWithAggregatesFilter<"JobPosting"> | string
    description?: StringWithAggregatesFilter<"JobPosting"> | string
    location?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    jobType?: EnumJobTypeEnumWithAggregatesFilter<"JobPosting"> | $Enums.JobTypeEnum
    salaryRange?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    isActive?: BoolWithAggregatesFilter<"JobPosting"> | boolean
    postedAt?: DateTimeWithAggregatesFilter<"JobPosting"> | Date | string
    expiredAt?: DateTimeNullableWithAggregatesFilter<"JobPosting"> | Date | string | null
  }

  export type JobApplicationWhereInput = {
    AND?: JobApplicationWhereInput | JobApplicationWhereInput[]
    OR?: JobApplicationWhereInput[]
    NOT?: JobApplicationWhereInput | JobApplicationWhereInput[]
    id?: IntFilter<"JobApplication"> | number
    jobId?: IntFilter<"JobApplication"> | number
    resumeId?: IntFilter<"JobApplication"> | number
    status?: StringFilter<"JobApplication"> | string
    appliedAt?: DateTimeFilter<"JobApplication"> | Date | string
    note?: StringNullableFilter<"JobApplication"> | string | null
    job?: XOR<JobPostingScalarRelationFilter, JobPostingWhereInput>
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type JobApplicationOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    resumeId?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    note?: SortOrderInput | SortOrder
    job?: JobPostingOrderByWithRelationInput
    resume?: UserResumeOrderByWithRelationInput
  }

  export type JobApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobApplicationWhereInput | JobApplicationWhereInput[]
    OR?: JobApplicationWhereInput[]
    NOT?: JobApplicationWhereInput | JobApplicationWhereInput[]
    jobId?: IntFilter<"JobApplication"> | number
    resumeId?: IntFilter<"JobApplication"> | number
    status?: StringFilter<"JobApplication"> | string
    appliedAt?: DateTimeFilter<"JobApplication"> | Date | string
    note?: StringNullableFilter<"JobApplication"> | string | null
    job?: XOR<JobPostingScalarRelationFilter, JobPostingWhereInput>
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type JobApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    resumeId?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    note?: SortOrderInput | SortOrder
    _count?: JobApplicationCountOrderByAggregateInput
    _avg?: JobApplicationAvgOrderByAggregateInput
    _max?: JobApplicationMaxOrderByAggregateInput
    _min?: JobApplicationMinOrderByAggregateInput
    _sum?: JobApplicationSumOrderByAggregateInput
  }

  export type JobApplicationScalarWhereWithAggregatesInput = {
    AND?: JobApplicationScalarWhereWithAggregatesInput | JobApplicationScalarWhereWithAggregatesInput[]
    OR?: JobApplicationScalarWhereWithAggregatesInput[]
    NOT?: JobApplicationScalarWhereWithAggregatesInput | JobApplicationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobApplication"> | number
    jobId?: IntWithAggregatesFilter<"JobApplication"> | number
    resumeId?: IntWithAggregatesFilter<"JobApplication"> | number
    status?: StringWithAggregatesFilter<"JobApplication"> | string
    appliedAt?: DateTimeWithAggregatesFilter<"JobApplication"> | Date | string
    note?: StringNullableWithAggregatesFilter<"JobApplication"> | string | null
  }

  export type MessageThreadWhereInput = {
    AND?: MessageThreadWhereInput | MessageThreadWhereInput[]
    OR?: MessageThreadWhereInput[]
    NOT?: MessageThreadWhereInput | MessageThreadWhereInput[]
    id?: IntFilter<"MessageThread"> | number
    resumeId?: IntFilter<"MessageThread"> | number
    createdById?: IntFilter<"MessageThread"> | number
    createdAt?: DateTimeFilter<"MessageThread"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    messages?: MessageLogListRelationFilter
  }

  export type MessageThreadOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    messages?: MessageLogOrderByRelationAggregateInput
  }

  export type MessageThreadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageThreadWhereInput | MessageThreadWhereInput[]
    OR?: MessageThreadWhereInput[]
    NOT?: MessageThreadWhereInput | MessageThreadWhereInput[]
    resumeId?: IntFilter<"MessageThread"> | number
    createdById?: IntFilter<"MessageThread"> | number
    createdAt?: DateTimeFilter<"MessageThread"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    messages?: MessageLogListRelationFilter
  }, "id">

  export type MessageThreadOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    _count?: MessageThreadCountOrderByAggregateInput
    _avg?: MessageThreadAvgOrderByAggregateInput
    _max?: MessageThreadMaxOrderByAggregateInput
    _min?: MessageThreadMinOrderByAggregateInput
    _sum?: MessageThreadSumOrderByAggregateInput
  }

  export type MessageThreadScalarWhereWithAggregatesInput = {
    AND?: MessageThreadScalarWhereWithAggregatesInput | MessageThreadScalarWhereWithAggregatesInput[]
    OR?: MessageThreadScalarWhereWithAggregatesInput[]
    NOT?: MessageThreadScalarWhereWithAggregatesInput | MessageThreadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MessageThread"> | number
    resumeId?: IntWithAggregatesFilter<"MessageThread"> | number
    createdById?: IntWithAggregatesFilter<"MessageThread"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MessageThread"> | Date | string
  }

  export type MessageLogWhereInput = {
    AND?: MessageLogWhereInput | MessageLogWhereInput[]
    OR?: MessageLogWhereInput[]
    NOT?: MessageLogWhereInput | MessageLogWhereInput[]
    id?: IntFilter<"MessageLog"> | number
    threadId?: IntFilter<"MessageLog"> | number
    senderId?: IntFilter<"MessageLog"> | number
    content?: StringFilter<"MessageLog"> | string
    sentAt?: DateTimeFilter<"MessageLog"> | Date | string
    thread?: XOR<MessageThreadScalarRelationFilter, MessageThreadWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageLogOrderByWithRelationInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    thread?: MessageThreadOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type MessageLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageLogWhereInput | MessageLogWhereInput[]
    OR?: MessageLogWhereInput[]
    NOT?: MessageLogWhereInput | MessageLogWhereInput[]
    threadId?: IntFilter<"MessageLog"> | number
    senderId?: IntFilter<"MessageLog"> | number
    content?: StringFilter<"MessageLog"> | string
    sentAt?: DateTimeFilter<"MessageLog"> | Date | string
    thread?: XOR<MessageThreadScalarRelationFilter, MessageThreadWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MessageLogOrderByWithAggregationInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    _count?: MessageLogCountOrderByAggregateInput
    _avg?: MessageLogAvgOrderByAggregateInput
    _max?: MessageLogMaxOrderByAggregateInput
    _min?: MessageLogMinOrderByAggregateInput
    _sum?: MessageLogSumOrderByAggregateInput
  }

  export type MessageLogScalarWhereWithAggregatesInput = {
    AND?: MessageLogScalarWhereWithAggregatesInput | MessageLogScalarWhereWithAggregatesInput[]
    OR?: MessageLogScalarWhereWithAggregatesInput[]
    NOT?: MessageLogScalarWhereWithAggregatesInput | MessageLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MessageLog"> | number
    threadId?: IntWithAggregatesFilter<"MessageLog"> | number
    senderId?: IntWithAggregatesFilter<"MessageLog"> | number
    content?: StringWithAggregatesFilter<"MessageLog"> | string
    sentAt?: DateTimeWithAggregatesFilter<"MessageLog"> | Date | string
  }

  export type UserResumeWhereInput = {
    AND?: UserResumeWhereInput | UserResumeWhereInput[]
    OR?: UserResumeWhereInput[]
    NOT?: UserResumeWhereInput | UserResumeWhereInput[]
    id?: IntFilter<"UserResume"> | number
    userId?: IntFilter<"UserResume"> | number
    isPrimary?: BoolFilter<"UserResume"> | boolean
    title?: StringNullableFilter<"UserResume"> | string | null
    companyId?: IntFilter<"UserResume"> | number
    identityNumber?: StringNullableFilter<"UserResume"> | string | null
    workPermit?: StringNullableFilter<"UserResume"> | string | null
    passport?: StringNullableFilter<"UserResume"> | string | null
    email?: StringNullableFilter<"UserResume"> | string | null
    emailVerified?: BoolFilter<"UserResume"> | boolean
    phoneNumber?: StringNullableFilter<"UserResume"> | string | null
    phoneVerified?: BoolFilter<"UserResume"> | boolean
    profilePicture?: StringNullableFilter<"UserResume"> | string | null
    firstName?: StringFilter<"UserResume"> | string
    lastName?: StringFilter<"UserResume"> | string
    englishName?: StringNullableFilter<"UserResume"> | string | null
    nickname?: StringNullableFilter<"UserResume"> | string | null
    mailCountry?: StringNullableFilter<"UserResume"> | string | null
    mailCity?: StringNullableFilter<"UserResume"> | string | null
    mailDistrict?: StringNullableFilter<"UserResume"> | string | null
    mailAddress?: StringNullableFilter<"UserResume"> | string | null
    residentialCountry?: StringNullableFilter<"UserResume"> | string | null
    residentialCity?: StringNullableFilter<"UserResume"> | string | null
    residentialDistrict?: StringNullableFilter<"UserResume"> | string | null
    residentialAddress?: StringNullableFilter<"UserResume"> | string | null
    isRegistered?: BoolFilter<"UserResume"> | boolean
    isDeleted?: BoolFilter<"UserResume"> | boolean
    deletedAt?: DateTimeNullableFilter<"UserResume"> | Date | string | null
    createdAt?: DateTimeFilter<"UserResume"> | Date | string
    updatedAt?: DateTimeFilter<"UserResume"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    primaryOf?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    languages?: LanguageListRelationFilter
    educations?: EducationListRelationFilter
    experiences?: ExperienceListRelationFilter
    skills?: SkillListRelationFilter
    certificates?: CertificateListRelationFilter
    traits?: TraitListRelationFilter
    commuteOptions?: CommuteListRelationFilter
    workingTimes?: WorkingTimeListRelationFilter
    workIdentities?: WorkIdentityListRelationFilter
    jobPreferences?: JobTypeListRelationFilter
    emergencyContacts?: EmergencyContactListRelationFilter
    biography?: XOR<BiographyNullableScalarRelationFilter, BiographyWhereInput> | null
    portfolio?: PortfolioListRelationFilter
    profilePhotos?: ProfilePhotoListRelationFilter
    resumeVersions?: ResumeVersionListRelationFilter
    resumeVisibility?: XOR<ResumeVisibilityNullableScalarRelationFilter, ResumeVisibilityWhereInput> | null
    resumeReviewStatuses?: ResumeReviewStatusListRelationFilter
    resumeViewLogs?: ResumeViewLogListRelationFilter
    resumePDFs?: ResumePDFListRelationFilter
    resumeReviewLogs?: ResumeReviewLogListRelationFilter
    messageThreads?: MessageThreadListRelationFilter
    accessGrants?: ResumeAccessGrantListRelationFilter
    jobapplication?: JobApplicationListRelationFilter
  }

  export type UserResumeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    isPrimary?: SortOrder
    title?: SortOrderInput | SortOrder
    companyId?: SortOrder
    identityNumber?: SortOrderInput | SortOrder
    workPermit?: SortOrderInput | SortOrder
    passport?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    phoneVerified?: SortOrder
    profilePicture?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    englishName?: SortOrderInput | SortOrder
    nickname?: SortOrderInput | SortOrder
    mailCountry?: SortOrderInput | SortOrder
    mailCity?: SortOrderInput | SortOrder
    mailDistrict?: SortOrderInput | SortOrder
    mailAddress?: SortOrderInput | SortOrder
    residentialCountry?: SortOrderInput | SortOrder
    residentialCity?: SortOrderInput | SortOrder
    residentialDistrict?: SortOrderInput | SortOrder
    residentialAddress?: SortOrderInput | SortOrder
    isRegistered?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    primaryOf?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    languages?: LanguageOrderByRelationAggregateInput
    educations?: EducationOrderByRelationAggregateInput
    experiences?: ExperienceOrderByRelationAggregateInput
    skills?: SkillOrderByRelationAggregateInput
    certificates?: CertificateOrderByRelationAggregateInput
    traits?: TraitOrderByRelationAggregateInput
    commuteOptions?: CommuteOrderByRelationAggregateInput
    workingTimes?: WorkingTimeOrderByRelationAggregateInput
    workIdentities?: WorkIdentityOrderByRelationAggregateInput
    jobPreferences?: JobTypeOrderByRelationAggregateInput
    emergencyContacts?: EmergencyContactOrderByRelationAggregateInput
    biography?: BiographyOrderByWithRelationInput
    portfolio?: PortfolioOrderByRelationAggregateInput
    profilePhotos?: ProfilePhotoOrderByRelationAggregateInput
    resumeVersions?: ResumeVersionOrderByRelationAggregateInput
    resumeVisibility?: ResumeVisibilityOrderByWithRelationInput
    resumeReviewStatuses?: ResumeReviewStatusOrderByRelationAggregateInput
    resumeViewLogs?: ResumeViewLogOrderByRelationAggregateInput
    resumePDFs?: ResumePDFOrderByRelationAggregateInput
    resumeReviewLogs?: ResumeReviewLogOrderByRelationAggregateInput
    messageThreads?: MessageThreadOrderByRelationAggregateInput
    accessGrants?: ResumeAccessGrantOrderByRelationAggregateInput
    jobapplication?: JobApplicationOrderByRelationAggregateInput
  }

  export type UserResumeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    identityNumber?: string
    workPermit?: string
    passport?: string
    email?: string
    phoneNumber?: string
    userId_isPrimary?: UserResumeUserIdIsPrimaryCompoundUniqueInput
    AND?: UserResumeWhereInput | UserResumeWhereInput[]
    OR?: UserResumeWhereInput[]
    NOT?: UserResumeWhereInput | UserResumeWhereInput[]
    userId?: IntFilter<"UserResume"> | number
    isPrimary?: BoolFilter<"UserResume"> | boolean
    title?: StringNullableFilter<"UserResume"> | string | null
    companyId?: IntFilter<"UserResume"> | number
    emailVerified?: BoolFilter<"UserResume"> | boolean
    phoneVerified?: BoolFilter<"UserResume"> | boolean
    profilePicture?: StringNullableFilter<"UserResume"> | string | null
    firstName?: StringFilter<"UserResume"> | string
    lastName?: StringFilter<"UserResume"> | string
    englishName?: StringNullableFilter<"UserResume"> | string | null
    nickname?: StringNullableFilter<"UserResume"> | string | null
    mailCountry?: StringNullableFilter<"UserResume"> | string | null
    mailCity?: StringNullableFilter<"UserResume"> | string | null
    mailDistrict?: StringNullableFilter<"UserResume"> | string | null
    mailAddress?: StringNullableFilter<"UserResume"> | string | null
    residentialCountry?: StringNullableFilter<"UserResume"> | string | null
    residentialCity?: StringNullableFilter<"UserResume"> | string | null
    residentialDistrict?: StringNullableFilter<"UserResume"> | string | null
    residentialAddress?: StringNullableFilter<"UserResume"> | string | null
    isRegistered?: BoolFilter<"UserResume"> | boolean
    isDeleted?: BoolFilter<"UserResume"> | boolean
    deletedAt?: DateTimeNullableFilter<"UserResume"> | Date | string | null
    createdAt?: DateTimeFilter<"UserResume"> | Date | string
    updatedAt?: DateTimeFilter<"UserResume"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    primaryOf?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    languages?: LanguageListRelationFilter
    educations?: EducationListRelationFilter
    experiences?: ExperienceListRelationFilter
    skills?: SkillListRelationFilter
    certificates?: CertificateListRelationFilter
    traits?: TraitListRelationFilter
    commuteOptions?: CommuteListRelationFilter
    workingTimes?: WorkingTimeListRelationFilter
    workIdentities?: WorkIdentityListRelationFilter
    jobPreferences?: JobTypeListRelationFilter
    emergencyContacts?: EmergencyContactListRelationFilter
    biography?: XOR<BiographyNullableScalarRelationFilter, BiographyWhereInput> | null
    portfolio?: PortfolioListRelationFilter
    profilePhotos?: ProfilePhotoListRelationFilter
    resumeVersions?: ResumeVersionListRelationFilter
    resumeVisibility?: XOR<ResumeVisibilityNullableScalarRelationFilter, ResumeVisibilityWhereInput> | null
    resumeReviewStatuses?: ResumeReviewStatusListRelationFilter
    resumeViewLogs?: ResumeViewLogListRelationFilter
    resumePDFs?: ResumePDFListRelationFilter
    resumeReviewLogs?: ResumeReviewLogListRelationFilter
    messageThreads?: MessageThreadListRelationFilter
    accessGrants?: ResumeAccessGrantListRelationFilter
    jobapplication?: JobApplicationListRelationFilter
  }, "id" | "identityNumber" | "workPermit" | "passport" | "email" | "phoneNumber" | "userId_isPrimary">

  export type UserResumeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    isPrimary?: SortOrder
    title?: SortOrderInput | SortOrder
    companyId?: SortOrder
    identityNumber?: SortOrderInput | SortOrder
    workPermit?: SortOrderInput | SortOrder
    passport?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    phoneVerified?: SortOrder
    profilePicture?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    englishName?: SortOrderInput | SortOrder
    nickname?: SortOrderInput | SortOrder
    mailCountry?: SortOrderInput | SortOrder
    mailCity?: SortOrderInput | SortOrder
    mailDistrict?: SortOrderInput | SortOrder
    mailAddress?: SortOrderInput | SortOrder
    residentialCountry?: SortOrderInput | SortOrder
    residentialCity?: SortOrderInput | SortOrder
    residentialDistrict?: SortOrderInput | SortOrder
    residentialAddress?: SortOrderInput | SortOrder
    isRegistered?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserResumeCountOrderByAggregateInput
    _avg?: UserResumeAvgOrderByAggregateInput
    _max?: UserResumeMaxOrderByAggregateInput
    _min?: UserResumeMinOrderByAggregateInput
    _sum?: UserResumeSumOrderByAggregateInput
  }

  export type UserResumeScalarWhereWithAggregatesInput = {
    AND?: UserResumeScalarWhereWithAggregatesInput | UserResumeScalarWhereWithAggregatesInput[]
    OR?: UserResumeScalarWhereWithAggregatesInput[]
    NOT?: UserResumeScalarWhereWithAggregatesInput | UserResumeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserResume"> | number
    userId?: IntWithAggregatesFilter<"UserResume"> | number
    isPrimary?: BoolWithAggregatesFilter<"UserResume"> | boolean
    title?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    companyId?: IntWithAggregatesFilter<"UserResume"> | number
    identityNumber?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    workPermit?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    passport?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    email?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    emailVerified?: BoolWithAggregatesFilter<"UserResume"> | boolean
    phoneNumber?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    phoneVerified?: BoolWithAggregatesFilter<"UserResume"> | boolean
    profilePicture?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    firstName?: StringWithAggregatesFilter<"UserResume"> | string
    lastName?: StringWithAggregatesFilter<"UserResume"> | string
    englishName?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    nickname?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    mailCountry?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    mailCity?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    mailDistrict?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    mailAddress?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    residentialCountry?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    residentialCity?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    residentialDistrict?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    residentialAddress?: StringNullableWithAggregatesFilter<"UserResume"> | string | null
    isRegistered?: BoolWithAggregatesFilter<"UserResume"> | boolean
    isDeleted?: BoolWithAggregatesFilter<"UserResume"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"UserResume"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserResume"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserResume"> | Date | string
  }

  export type LanguageWhereInput = {
    AND?: LanguageWhereInput | LanguageWhereInput[]
    OR?: LanguageWhereInput[]
    NOT?: LanguageWhereInput | LanguageWhereInput[]
    id?: IntFilter<"Language"> | number
    resumeId?: IntFilter<"Language"> | number
    name?: StringFilter<"Language"> | string
    level?: EnumLanguageLevelFilter<"Language"> | $Enums.LanguageLevel
    levelOther?: StringNullableFilter<"Language"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type LanguageOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    level?: SortOrder
    levelOther?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type LanguageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LanguageWhereInput | LanguageWhereInput[]
    OR?: LanguageWhereInput[]
    NOT?: LanguageWhereInput | LanguageWhereInput[]
    resumeId?: IntFilter<"Language"> | number
    name?: StringFilter<"Language"> | string
    level?: EnumLanguageLevelFilter<"Language"> | $Enums.LanguageLevel
    levelOther?: StringNullableFilter<"Language"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type LanguageOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    level?: SortOrder
    levelOther?: SortOrderInput | SortOrder
    _count?: LanguageCountOrderByAggregateInput
    _avg?: LanguageAvgOrderByAggregateInput
    _max?: LanguageMaxOrderByAggregateInput
    _min?: LanguageMinOrderByAggregateInput
    _sum?: LanguageSumOrderByAggregateInput
  }

  export type LanguageScalarWhereWithAggregatesInput = {
    AND?: LanguageScalarWhereWithAggregatesInput | LanguageScalarWhereWithAggregatesInput[]
    OR?: LanguageScalarWhereWithAggregatesInput[]
    NOT?: LanguageScalarWhereWithAggregatesInput | LanguageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Language"> | number
    resumeId?: IntWithAggregatesFilter<"Language"> | number
    name?: StringWithAggregatesFilter<"Language"> | string
    level?: EnumLanguageLevelWithAggregatesFilter<"Language"> | $Enums.LanguageLevel
    levelOther?: StringNullableWithAggregatesFilter<"Language"> | string | null
  }

  export type EducationWhereInput = {
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    id?: IntFilter<"Education"> | number
    resumeId?: IntFilter<"Education"> | number
    school?: StringFilter<"Education"> | string
    department?: StringFilter<"Education"> | string
    status?: EnumEducationStatusFilter<"Education"> | $Enums.EducationStatus
    statusOther?: StringNullableFilter<"Education"> | string | null
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeFilter<"Education"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    school?: SortOrder
    department?: SortOrder
    status?: SortOrder
    statusOther?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type EducationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    resumeId?: IntFilter<"Education"> | number
    school?: StringFilter<"Education"> | string
    department?: StringFilter<"Education"> | string
    status?: EnumEducationStatusFilter<"Education"> | $Enums.EducationStatus
    statusOther?: StringNullableFilter<"Education"> | string | null
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeFilter<"Education"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    school?: SortOrder
    department?: SortOrder
    status?: SortOrder
    statusOther?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _avg?: EducationAvgOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
    _sum?: EducationSumOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    OR?: EducationScalarWhereWithAggregatesInput[]
    NOT?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Education"> | number
    resumeId?: IntWithAggregatesFilter<"Education"> | number
    school?: StringWithAggregatesFilter<"Education"> | string
    department?: StringWithAggregatesFilter<"Education"> | string
    status?: EnumEducationStatusWithAggregatesFilter<"Education"> | $Enums.EducationStatus
    statusOther?: StringNullableWithAggregatesFilter<"Education"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Education"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Education"> | Date | string
  }

  export type ExperienceWhereInput = {
    AND?: ExperienceWhereInput | ExperienceWhereInput[]
    OR?: ExperienceWhereInput[]
    NOT?: ExperienceWhereInput | ExperienceWhereInput[]
    id?: IntFilter<"Experience"> | number
    resumeId?: IntFilter<"Experience"> | number
    company?: StringFilter<"Experience"> | string
    title?: StringFilter<"Experience"> | string
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeFilter<"Experience"> | Date | string
    description?: StringFilter<"Experience"> | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type ExperienceOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    company?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type ExperienceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExperienceWhereInput | ExperienceWhereInput[]
    OR?: ExperienceWhereInput[]
    NOT?: ExperienceWhereInput | ExperienceWhereInput[]
    resumeId?: IntFilter<"Experience"> | number
    company?: StringFilter<"Experience"> | string
    title?: StringFilter<"Experience"> | string
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeFilter<"Experience"> | Date | string
    description?: StringFilter<"Experience"> | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type ExperienceOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    company?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
    _count?: ExperienceCountOrderByAggregateInput
    _avg?: ExperienceAvgOrderByAggregateInput
    _max?: ExperienceMaxOrderByAggregateInput
    _min?: ExperienceMinOrderByAggregateInput
    _sum?: ExperienceSumOrderByAggregateInput
  }

  export type ExperienceScalarWhereWithAggregatesInput = {
    AND?: ExperienceScalarWhereWithAggregatesInput | ExperienceScalarWhereWithAggregatesInput[]
    OR?: ExperienceScalarWhereWithAggregatesInput[]
    NOT?: ExperienceScalarWhereWithAggregatesInput | ExperienceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Experience"> | number
    resumeId?: IntWithAggregatesFilter<"Experience"> | number
    company?: StringWithAggregatesFilter<"Experience"> | string
    title?: StringWithAggregatesFilter<"Experience"> | string
    startDate?: DateTimeWithAggregatesFilter<"Experience"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Experience"> | Date | string
    description?: StringWithAggregatesFilter<"Experience"> | string
  }

  export type SkillWhereInput = {
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    id?: IntFilter<"Skill"> | number
    resumeId?: IntFilter<"Skill"> | number
    name?: StringFilter<"Skill"> | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type SkillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    resumeId?: IntFilter<"Skill"> | number
    name?: StringFilter<"Skill"> | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _avg?: SkillAvgOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
    _sum?: SkillSumOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    OR?: SkillScalarWhereWithAggregatesInput[]
    NOT?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Skill"> | number
    resumeId?: IntWithAggregatesFilter<"Skill"> | number
    name?: StringWithAggregatesFilter<"Skill"> | string
  }

  export type CertificateWhereInput = {
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    id?: IntFilter<"Certificate"> | number
    resumeId?: IntFilter<"Certificate"> | number
    name?: StringFilter<"Certificate"> | string
    expiry?: DateTimeNullableFilter<"Certificate"> | Date | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type CertificateOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    expiry?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type CertificateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    resumeId?: IntFilter<"Certificate"> | number
    name?: StringFilter<"Certificate"> | string
    expiry?: DateTimeNullableFilter<"Certificate"> | Date | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type CertificateOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    expiry?: SortOrderInput | SortOrder
    _count?: CertificateCountOrderByAggregateInput
    _avg?: CertificateAvgOrderByAggregateInput
    _max?: CertificateMaxOrderByAggregateInput
    _min?: CertificateMinOrderByAggregateInput
    _sum?: CertificateSumOrderByAggregateInput
  }

  export type CertificateScalarWhereWithAggregatesInput = {
    AND?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    OR?: CertificateScalarWhereWithAggregatesInput[]
    NOT?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Certificate"> | number
    resumeId?: IntWithAggregatesFilter<"Certificate"> | number
    name?: StringWithAggregatesFilter<"Certificate"> | string
    expiry?: DateTimeNullableWithAggregatesFilter<"Certificate"> | Date | string | null
  }

  export type TraitWhereInput = {
    AND?: TraitWhereInput | TraitWhereInput[]
    OR?: TraitWhereInput[]
    NOT?: TraitWhereInput | TraitWhereInput[]
    id?: IntFilter<"Trait"> | number
    resumeId?: IntFilter<"Trait"> | number
    personality?: StringFilter<"Trait"> | string
    interest?: StringNullableFilter<"Trait"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type TraitOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    personality?: SortOrder
    interest?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type TraitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TraitWhereInput | TraitWhereInput[]
    OR?: TraitWhereInput[]
    NOT?: TraitWhereInput | TraitWhereInput[]
    resumeId?: IntFilter<"Trait"> | number
    personality?: StringFilter<"Trait"> | string
    interest?: StringNullableFilter<"Trait"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type TraitOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    personality?: SortOrder
    interest?: SortOrderInput | SortOrder
    _count?: TraitCountOrderByAggregateInput
    _avg?: TraitAvgOrderByAggregateInput
    _max?: TraitMaxOrderByAggregateInput
    _min?: TraitMinOrderByAggregateInput
    _sum?: TraitSumOrderByAggregateInput
  }

  export type TraitScalarWhereWithAggregatesInput = {
    AND?: TraitScalarWhereWithAggregatesInput | TraitScalarWhereWithAggregatesInput[]
    OR?: TraitScalarWhereWithAggregatesInput[]
    NOT?: TraitScalarWhereWithAggregatesInput | TraitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Trait"> | number
    resumeId?: IntWithAggregatesFilter<"Trait"> | number
    personality?: StringWithAggregatesFilter<"Trait"> | string
    interest?: StringNullableWithAggregatesFilter<"Trait"> | string | null
  }

  export type CommuteWhereInput = {
    AND?: CommuteWhereInput | CommuteWhereInput[]
    OR?: CommuteWhereInput[]
    NOT?: CommuteWhereInput | CommuteWhereInput[]
    id?: IntFilter<"Commute"> | number
    resumeId?: IntFilter<"Commute"> | number
    method?: EnumCommuteMethodFilter<"Commute"> | $Enums.CommuteMethod
    methodOther?: StringNullableFilter<"Commute"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type CommuteOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    method?: SortOrder
    methodOther?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type CommuteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommuteWhereInput | CommuteWhereInput[]
    OR?: CommuteWhereInput[]
    NOT?: CommuteWhereInput | CommuteWhereInput[]
    resumeId?: IntFilter<"Commute"> | number
    method?: EnumCommuteMethodFilter<"Commute"> | $Enums.CommuteMethod
    methodOther?: StringNullableFilter<"Commute"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type CommuteOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    method?: SortOrder
    methodOther?: SortOrderInput | SortOrder
    _count?: CommuteCountOrderByAggregateInput
    _avg?: CommuteAvgOrderByAggregateInput
    _max?: CommuteMaxOrderByAggregateInput
    _min?: CommuteMinOrderByAggregateInput
    _sum?: CommuteSumOrderByAggregateInput
  }

  export type CommuteScalarWhereWithAggregatesInput = {
    AND?: CommuteScalarWhereWithAggregatesInput | CommuteScalarWhereWithAggregatesInput[]
    OR?: CommuteScalarWhereWithAggregatesInput[]
    NOT?: CommuteScalarWhereWithAggregatesInput | CommuteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Commute"> | number
    resumeId?: IntWithAggregatesFilter<"Commute"> | number
    method?: EnumCommuteMethodWithAggregatesFilter<"Commute"> | $Enums.CommuteMethod
    methodOther?: StringNullableWithAggregatesFilter<"Commute"> | string | null
  }

  export type WorkingTimeWhereInput = {
    AND?: WorkingTimeWhereInput | WorkingTimeWhereInput[]
    OR?: WorkingTimeWhereInput[]
    NOT?: WorkingTimeWhereInput | WorkingTimeWhereInput[]
    id?: IntFilter<"WorkingTime"> | number
    resumeId?: IntFilter<"WorkingTime"> | number
    shift?: EnumShiftTypeFilter<"WorkingTime"> | $Enums.ShiftType
    shiftOther?: StringNullableFilter<"WorkingTime"> | string | null
    preference?: StringFilter<"WorkingTime"> | string
    expectedStart?: DateTimeNullableFilter<"WorkingTime"> | Date | string | null
    expectedEnd?: DateTimeNullableFilter<"WorkingTime"> | Date | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type WorkingTimeOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shift?: SortOrder
    shiftOther?: SortOrderInput | SortOrder
    preference?: SortOrder
    expectedStart?: SortOrderInput | SortOrder
    expectedEnd?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type WorkingTimeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkingTimeWhereInput | WorkingTimeWhereInput[]
    OR?: WorkingTimeWhereInput[]
    NOT?: WorkingTimeWhereInput | WorkingTimeWhereInput[]
    resumeId?: IntFilter<"WorkingTime"> | number
    shift?: EnumShiftTypeFilter<"WorkingTime"> | $Enums.ShiftType
    shiftOther?: StringNullableFilter<"WorkingTime"> | string | null
    preference?: StringFilter<"WorkingTime"> | string
    expectedStart?: DateTimeNullableFilter<"WorkingTime"> | Date | string | null
    expectedEnd?: DateTimeNullableFilter<"WorkingTime"> | Date | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type WorkingTimeOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shift?: SortOrder
    shiftOther?: SortOrderInput | SortOrder
    preference?: SortOrder
    expectedStart?: SortOrderInput | SortOrder
    expectedEnd?: SortOrderInput | SortOrder
    _count?: WorkingTimeCountOrderByAggregateInput
    _avg?: WorkingTimeAvgOrderByAggregateInput
    _max?: WorkingTimeMaxOrderByAggregateInput
    _min?: WorkingTimeMinOrderByAggregateInput
    _sum?: WorkingTimeSumOrderByAggregateInput
  }

  export type WorkingTimeScalarWhereWithAggregatesInput = {
    AND?: WorkingTimeScalarWhereWithAggregatesInput | WorkingTimeScalarWhereWithAggregatesInput[]
    OR?: WorkingTimeScalarWhereWithAggregatesInput[]
    NOT?: WorkingTimeScalarWhereWithAggregatesInput | WorkingTimeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkingTime"> | number
    resumeId?: IntWithAggregatesFilter<"WorkingTime"> | number
    shift?: EnumShiftTypeWithAggregatesFilter<"WorkingTime"> | $Enums.ShiftType
    shiftOther?: StringNullableWithAggregatesFilter<"WorkingTime"> | string | null
    preference?: StringWithAggregatesFilter<"WorkingTime"> | string
    expectedStart?: DateTimeNullableWithAggregatesFilter<"WorkingTime"> | Date | string | null
    expectedEnd?: DateTimeNullableWithAggregatesFilter<"WorkingTime"> | Date | string | null
  }

  export type WorkIdentityWhereInput = {
    AND?: WorkIdentityWhereInput | WorkIdentityWhereInput[]
    OR?: WorkIdentityWhereInput[]
    NOT?: WorkIdentityWhereInput | WorkIdentityWhereInput[]
    id?: IntFilter<"WorkIdentity"> | number
    resumeId?: IntFilter<"WorkIdentity"> | number
    identity?: EnumWorkIdentityTypeFilter<"WorkIdentity"> | $Enums.WorkIdentityType
    identityOther?: StringNullableFilter<"WorkIdentity"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type WorkIdentityOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    identity?: SortOrder
    identityOther?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type WorkIdentityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkIdentityWhereInput | WorkIdentityWhereInput[]
    OR?: WorkIdentityWhereInput[]
    NOT?: WorkIdentityWhereInput | WorkIdentityWhereInput[]
    resumeId?: IntFilter<"WorkIdentity"> | number
    identity?: EnumWorkIdentityTypeFilter<"WorkIdentity"> | $Enums.WorkIdentityType
    identityOther?: StringNullableFilter<"WorkIdentity"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type WorkIdentityOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    identity?: SortOrder
    identityOther?: SortOrderInput | SortOrder
    _count?: WorkIdentityCountOrderByAggregateInput
    _avg?: WorkIdentityAvgOrderByAggregateInput
    _max?: WorkIdentityMaxOrderByAggregateInput
    _min?: WorkIdentityMinOrderByAggregateInput
    _sum?: WorkIdentitySumOrderByAggregateInput
  }

  export type WorkIdentityScalarWhereWithAggregatesInput = {
    AND?: WorkIdentityScalarWhereWithAggregatesInput | WorkIdentityScalarWhereWithAggregatesInput[]
    OR?: WorkIdentityScalarWhereWithAggregatesInput[]
    NOT?: WorkIdentityScalarWhereWithAggregatesInput | WorkIdentityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkIdentity"> | number
    resumeId?: IntWithAggregatesFilter<"WorkIdentity"> | number
    identity?: EnumWorkIdentityTypeWithAggregatesFilter<"WorkIdentity"> | $Enums.WorkIdentityType
    identityOther?: StringNullableWithAggregatesFilter<"WorkIdentity"> | string | null
  }

  export type JobTypeWhereInput = {
    AND?: JobTypeWhereInput | JobTypeWhereInput[]
    OR?: JobTypeWhereInput[]
    NOT?: JobTypeWhereInput | JobTypeWhereInput[]
    id?: IntFilter<"JobType"> | number
    resumeId?: IntFilter<"JobType"> | number
    type?: EnumJobTypeEnumFilter<"JobType"> | $Enums.JobTypeEnum
    typeOther?: StringNullableFilter<"JobType"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type JobTypeOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    type?: SortOrder
    typeOther?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type JobTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobTypeWhereInput | JobTypeWhereInput[]
    OR?: JobTypeWhereInput[]
    NOT?: JobTypeWhereInput | JobTypeWhereInput[]
    resumeId?: IntFilter<"JobType"> | number
    type?: EnumJobTypeEnumFilter<"JobType"> | $Enums.JobTypeEnum
    typeOther?: StringNullableFilter<"JobType"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type JobTypeOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    type?: SortOrder
    typeOther?: SortOrderInput | SortOrder
    _count?: JobTypeCountOrderByAggregateInput
    _avg?: JobTypeAvgOrderByAggregateInput
    _max?: JobTypeMaxOrderByAggregateInput
    _min?: JobTypeMinOrderByAggregateInput
    _sum?: JobTypeSumOrderByAggregateInput
  }

  export type JobTypeScalarWhereWithAggregatesInput = {
    AND?: JobTypeScalarWhereWithAggregatesInput | JobTypeScalarWhereWithAggregatesInput[]
    OR?: JobTypeScalarWhereWithAggregatesInput[]
    NOT?: JobTypeScalarWhereWithAggregatesInput | JobTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobType"> | number
    resumeId?: IntWithAggregatesFilter<"JobType"> | number
    type?: EnumJobTypeEnumWithAggregatesFilter<"JobType"> | $Enums.JobTypeEnum
    typeOther?: StringNullableWithAggregatesFilter<"JobType"> | string | null
  }

  export type EmergencyContactWhereInput = {
    AND?: EmergencyContactWhereInput | EmergencyContactWhereInput[]
    OR?: EmergencyContactWhereInput[]
    NOT?: EmergencyContactWhereInput | EmergencyContactWhereInput[]
    id?: IntFilter<"EmergencyContact"> | number
    resumeId?: IntFilter<"EmergencyContact"> | number
    firstName?: StringFilter<"EmergencyContact"> | string
    lastName?: StringFilter<"EmergencyContact"> | string
    phoneNumber?: StringFilter<"EmergencyContact"> | string
    relation?: EnumContactRelationFilter<"EmergencyContact"> | $Enums.ContactRelation
    relationOther?: StringNullableFilter<"EmergencyContact"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type EmergencyContactOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    relation?: SortOrder
    relationOther?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type EmergencyContactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmergencyContactWhereInput | EmergencyContactWhereInput[]
    OR?: EmergencyContactWhereInput[]
    NOT?: EmergencyContactWhereInput | EmergencyContactWhereInput[]
    resumeId?: IntFilter<"EmergencyContact"> | number
    firstName?: StringFilter<"EmergencyContact"> | string
    lastName?: StringFilter<"EmergencyContact"> | string
    phoneNumber?: StringFilter<"EmergencyContact"> | string
    relation?: EnumContactRelationFilter<"EmergencyContact"> | $Enums.ContactRelation
    relationOther?: StringNullableFilter<"EmergencyContact"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type EmergencyContactOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    relation?: SortOrder
    relationOther?: SortOrderInput | SortOrder
    _count?: EmergencyContactCountOrderByAggregateInput
    _avg?: EmergencyContactAvgOrderByAggregateInput
    _max?: EmergencyContactMaxOrderByAggregateInput
    _min?: EmergencyContactMinOrderByAggregateInput
    _sum?: EmergencyContactSumOrderByAggregateInput
  }

  export type EmergencyContactScalarWhereWithAggregatesInput = {
    AND?: EmergencyContactScalarWhereWithAggregatesInput | EmergencyContactScalarWhereWithAggregatesInput[]
    OR?: EmergencyContactScalarWhereWithAggregatesInput[]
    NOT?: EmergencyContactScalarWhereWithAggregatesInput | EmergencyContactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmergencyContact"> | number
    resumeId?: IntWithAggregatesFilter<"EmergencyContact"> | number
    firstName?: StringWithAggregatesFilter<"EmergencyContact"> | string
    lastName?: StringWithAggregatesFilter<"EmergencyContact"> | string
    phoneNumber?: StringWithAggregatesFilter<"EmergencyContact"> | string
    relation?: EnumContactRelationWithAggregatesFilter<"EmergencyContact"> | $Enums.ContactRelation
    relationOther?: StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
  }

  export type BiographyWhereInput = {
    AND?: BiographyWhereInput | BiographyWhereInput[]
    OR?: BiographyWhereInput[]
    NOT?: BiographyWhereInput | BiographyWhereInput[]
    id?: IntFilter<"Biography"> | number
    resumeId?: IntFilter<"Biography"> | number
    content?: StringFilter<"Biography"> | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type BiographyOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    content?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type BiographyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    resumeId?: number
    AND?: BiographyWhereInput | BiographyWhereInput[]
    OR?: BiographyWhereInput[]
    NOT?: BiographyWhereInput | BiographyWhereInput[]
    content?: StringFilter<"Biography"> | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id" | "resumeId">

  export type BiographyOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    content?: SortOrder
    _count?: BiographyCountOrderByAggregateInput
    _avg?: BiographyAvgOrderByAggregateInput
    _max?: BiographyMaxOrderByAggregateInput
    _min?: BiographyMinOrderByAggregateInput
    _sum?: BiographySumOrderByAggregateInput
  }

  export type BiographyScalarWhereWithAggregatesInput = {
    AND?: BiographyScalarWhereWithAggregatesInput | BiographyScalarWhereWithAggregatesInput[]
    OR?: BiographyScalarWhereWithAggregatesInput[]
    NOT?: BiographyScalarWhereWithAggregatesInput | BiographyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Biography"> | number
    resumeId?: IntWithAggregatesFilter<"Biography"> | number
    content?: StringWithAggregatesFilter<"Biography"> | string
  }

  export type PortfolioWhereInput = {
    AND?: PortfolioWhereInput | PortfolioWhereInput[]
    OR?: PortfolioWhereInput[]
    NOT?: PortfolioWhereInput | PortfolioWhereInput[]
    id?: IntFilter<"Portfolio"> | number
    resumeId?: IntFilter<"Portfolio"> | number
    externalUrl?: StringFilter<"Portfolio"> | string
    title?: StringNullableFilter<"Portfolio"> | string | null
    description?: StringNullableFilter<"Portfolio"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type PortfolioOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    externalUrl?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type PortfolioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PortfolioWhereInput | PortfolioWhereInput[]
    OR?: PortfolioWhereInput[]
    NOT?: PortfolioWhereInput | PortfolioWhereInput[]
    resumeId?: IntFilter<"Portfolio"> | number
    externalUrl?: StringFilter<"Portfolio"> | string
    title?: StringNullableFilter<"Portfolio"> | string | null
    description?: StringNullableFilter<"Portfolio"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type PortfolioOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    externalUrl?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    _count?: PortfolioCountOrderByAggregateInput
    _avg?: PortfolioAvgOrderByAggregateInput
    _max?: PortfolioMaxOrderByAggregateInput
    _min?: PortfolioMinOrderByAggregateInput
    _sum?: PortfolioSumOrderByAggregateInput
  }

  export type PortfolioScalarWhereWithAggregatesInput = {
    AND?: PortfolioScalarWhereWithAggregatesInput | PortfolioScalarWhereWithAggregatesInput[]
    OR?: PortfolioScalarWhereWithAggregatesInput[]
    NOT?: PortfolioScalarWhereWithAggregatesInput | PortfolioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Portfolio"> | number
    resumeId?: IntWithAggregatesFilter<"Portfolio"> | number
    externalUrl?: StringWithAggregatesFilter<"Portfolio"> | string
    title?: StringNullableWithAggregatesFilter<"Portfolio"> | string | null
    description?: StringNullableWithAggregatesFilter<"Portfolio"> | string | null
  }

  export type ProfilePhotoWhereInput = {
    AND?: ProfilePhotoWhereInput | ProfilePhotoWhereInput[]
    OR?: ProfilePhotoWhereInput[]
    NOT?: ProfilePhotoWhereInput | ProfilePhotoWhereInput[]
    id?: IntFilter<"ProfilePhoto"> | number
    resumeId?: IntFilter<"ProfilePhoto"> | number
    fileUrl?: StringFilter<"ProfilePhoto"> | string
    type?: StringNullableFilter<"ProfilePhoto"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type ProfilePhotoOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    type?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type ProfilePhotoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfilePhotoWhereInput | ProfilePhotoWhereInput[]
    OR?: ProfilePhotoWhereInput[]
    NOT?: ProfilePhotoWhereInput | ProfilePhotoWhereInput[]
    resumeId?: IntFilter<"ProfilePhoto"> | number
    fileUrl?: StringFilter<"ProfilePhoto"> | string
    type?: StringNullableFilter<"ProfilePhoto"> | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type ProfilePhotoOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    type?: SortOrderInput | SortOrder
    _count?: ProfilePhotoCountOrderByAggregateInput
    _avg?: ProfilePhotoAvgOrderByAggregateInput
    _max?: ProfilePhotoMaxOrderByAggregateInput
    _min?: ProfilePhotoMinOrderByAggregateInput
    _sum?: ProfilePhotoSumOrderByAggregateInput
  }

  export type ProfilePhotoScalarWhereWithAggregatesInput = {
    AND?: ProfilePhotoScalarWhereWithAggregatesInput | ProfilePhotoScalarWhereWithAggregatesInput[]
    OR?: ProfilePhotoScalarWhereWithAggregatesInput[]
    NOT?: ProfilePhotoScalarWhereWithAggregatesInput | ProfilePhotoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProfilePhoto"> | number
    resumeId?: IntWithAggregatesFilter<"ProfilePhoto"> | number
    fileUrl?: StringWithAggregatesFilter<"ProfilePhoto"> | string
    type?: StringNullableWithAggregatesFilter<"ProfilePhoto"> | string | null
  }

  export type ResumeVersionWhereInput = {
    AND?: ResumeVersionWhereInput | ResumeVersionWhereInput[]
    OR?: ResumeVersionWhereInput[]
    NOT?: ResumeVersionWhereInput | ResumeVersionWhereInput[]
    id?: IntFilter<"ResumeVersion"> | number
    resumeId?: IntFilter<"ResumeVersion"> | number
    snapshot?: JsonFilter<"ResumeVersion">
    createdAt?: DateTimeFilter<"ResumeVersion"> | Date | string
    version?: StringNullableFilter<"ResumeVersion"> | string | null
    note?: StringNullableFilter<"ResumeVersion"> | string | null
    isCurrent?: BoolFilter<"ResumeVersion"> | boolean
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type ResumeVersionOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    snapshot?: SortOrder
    createdAt?: SortOrder
    version?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    isCurrent?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type ResumeVersionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResumeVersionWhereInput | ResumeVersionWhereInput[]
    OR?: ResumeVersionWhereInput[]
    NOT?: ResumeVersionWhereInput | ResumeVersionWhereInput[]
    resumeId?: IntFilter<"ResumeVersion"> | number
    snapshot?: JsonFilter<"ResumeVersion">
    createdAt?: DateTimeFilter<"ResumeVersion"> | Date | string
    version?: StringNullableFilter<"ResumeVersion"> | string | null
    note?: StringNullableFilter<"ResumeVersion"> | string | null
    isCurrent?: BoolFilter<"ResumeVersion"> | boolean
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type ResumeVersionOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    snapshot?: SortOrder
    createdAt?: SortOrder
    version?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    isCurrent?: SortOrder
    _count?: ResumeVersionCountOrderByAggregateInput
    _avg?: ResumeVersionAvgOrderByAggregateInput
    _max?: ResumeVersionMaxOrderByAggregateInput
    _min?: ResumeVersionMinOrderByAggregateInput
    _sum?: ResumeVersionSumOrderByAggregateInput
  }

  export type ResumeVersionScalarWhereWithAggregatesInput = {
    AND?: ResumeVersionScalarWhereWithAggregatesInput | ResumeVersionScalarWhereWithAggregatesInput[]
    OR?: ResumeVersionScalarWhereWithAggregatesInput[]
    NOT?: ResumeVersionScalarWhereWithAggregatesInput | ResumeVersionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResumeVersion"> | number
    resumeId?: IntWithAggregatesFilter<"ResumeVersion"> | number
    snapshot?: JsonWithAggregatesFilter<"ResumeVersion">
    createdAt?: DateTimeWithAggregatesFilter<"ResumeVersion"> | Date | string
    version?: StringNullableWithAggregatesFilter<"ResumeVersion"> | string | null
    note?: StringNullableWithAggregatesFilter<"ResumeVersion"> | string | null
    isCurrent?: BoolWithAggregatesFilter<"ResumeVersion"> | boolean
  }

  export type ResumeVisibilityWhereInput = {
    AND?: ResumeVisibilityWhereInput | ResumeVisibilityWhereInput[]
    OR?: ResumeVisibilityWhereInput[]
    NOT?: ResumeVisibilityWhereInput | ResumeVisibilityWhereInput[]
    id?: IntFilter<"ResumeVisibility"> | number
    resumeId?: IntFilter<"ResumeVisibility"> | number
    isPublic?: BoolFilter<"ResumeVisibility"> | boolean
    allowedAudience?: StringNullableFilter<"ResumeVisibility"> | string | null
    startDate?: DateTimeNullableFilter<"ResumeVisibility"> | Date | string | null
    endDate?: DateTimeNullableFilter<"ResumeVisibility"> | Date | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type ResumeVisibilityOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    isPublic?: SortOrder
    allowedAudience?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type ResumeVisibilityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    resumeId?: number
    AND?: ResumeVisibilityWhereInput | ResumeVisibilityWhereInput[]
    OR?: ResumeVisibilityWhereInput[]
    NOT?: ResumeVisibilityWhereInput | ResumeVisibilityWhereInput[]
    isPublic?: BoolFilter<"ResumeVisibility"> | boolean
    allowedAudience?: StringNullableFilter<"ResumeVisibility"> | string | null
    startDate?: DateTimeNullableFilter<"ResumeVisibility"> | Date | string | null
    endDate?: DateTimeNullableFilter<"ResumeVisibility"> | Date | string | null
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id" | "resumeId">

  export type ResumeVisibilityOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    isPublic?: SortOrder
    allowedAudience?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    _count?: ResumeVisibilityCountOrderByAggregateInput
    _avg?: ResumeVisibilityAvgOrderByAggregateInput
    _max?: ResumeVisibilityMaxOrderByAggregateInput
    _min?: ResumeVisibilityMinOrderByAggregateInput
    _sum?: ResumeVisibilitySumOrderByAggregateInput
  }

  export type ResumeVisibilityScalarWhereWithAggregatesInput = {
    AND?: ResumeVisibilityScalarWhereWithAggregatesInput | ResumeVisibilityScalarWhereWithAggregatesInput[]
    OR?: ResumeVisibilityScalarWhereWithAggregatesInput[]
    NOT?: ResumeVisibilityScalarWhereWithAggregatesInput | ResumeVisibilityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResumeVisibility"> | number
    resumeId?: IntWithAggregatesFilter<"ResumeVisibility"> | number
    isPublic?: BoolWithAggregatesFilter<"ResumeVisibility"> | boolean
    allowedAudience?: StringNullableWithAggregatesFilter<"ResumeVisibility"> | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"ResumeVisibility"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"ResumeVisibility"> | Date | string | null
  }

  export type ResumeReviewStatusWhereInput = {
    AND?: ResumeReviewStatusWhereInput | ResumeReviewStatusWhereInput[]
    OR?: ResumeReviewStatusWhereInput[]
    NOT?: ResumeReviewStatusWhereInput | ResumeReviewStatusWhereInput[]
    id?: IntFilter<"ResumeReviewStatus"> | number
    resumeId?: IntFilter<"ResumeReviewStatus"> | number
    viewerId?: IntFilter<"ResumeReviewStatus"> | number
    viewerType?: StringFilter<"ResumeReviewStatus"> | string
    viewedAt?: DateTimeFilter<"ResumeReviewStatus"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type ResumeReviewStatusOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    viewerId?: SortOrder
    viewerType?: SortOrder
    viewedAt?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type ResumeReviewStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    resumeId_viewerId_viewerType?: ResumeReviewStatusResumeIdViewerIdViewerTypeCompoundUniqueInput
    AND?: ResumeReviewStatusWhereInput | ResumeReviewStatusWhereInput[]
    OR?: ResumeReviewStatusWhereInput[]
    NOT?: ResumeReviewStatusWhereInput | ResumeReviewStatusWhereInput[]
    resumeId?: IntFilter<"ResumeReviewStatus"> | number
    viewerId?: IntFilter<"ResumeReviewStatus"> | number
    viewerType?: StringFilter<"ResumeReviewStatus"> | string
    viewedAt?: DateTimeFilter<"ResumeReviewStatus"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id" | "resumeId_viewerId_viewerType">

  export type ResumeReviewStatusOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    viewerId?: SortOrder
    viewerType?: SortOrder
    viewedAt?: SortOrder
    _count?: ResumeReviewStatusCountOrderByAggregateInput
    _avg?: ResumeReviewStatusAvgOrderByAggregateInput
    _max?: ResumeReviewStatusMaxOrderByAggregateInput
    _min?: ResumeReviewStatusMinOrderByAggregateInput
    _sum?: ResumeReviewStatusSumOrderByAggregateInput
  }

  export type ResumeReviewStatusScalarWhereWithAggregatesInput = {
    AND?: ResumeReviewStatusScalarWhereWithAggregatesInput | ResumeReviewStatusScalarWhereWithAggregatesInput[]
    OR?: ResumeReviewStatusScalarWhereWithAggregatesInput[]
    NOT?: ResumeReviewStatusScalarWhereWithAggregatesInput | ResumeReviewStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResumeReviewStatus"> | number
    resumeId?: IntWithAggregatesFilter<"ResumeReviewStatus"> | number
    viewerId?: IntWithAggregatesFilter<"ResumeReviewStatus"> | number
    viewerType?: StringWithAggregatesFilter<"ResumeReviewStatus"> | string
    viewedAt?: DateTimeWithAggregatesFilter<"ResumeReviewStatus"> | Date | string
  }

  export type ResumePDFWhereInput = {
    AND?: ResumePDFWhereInput | ResumePDFWhereInput[]
    OR?: ResumePDFWhereInput[]
    NOT?: ResumePDFWhereInput | ResumePDFWhereInput[]
    id?: IntFilter<"ResumePDF"> | number
    resumeId?: IntFilter<"ResumePDF"> | number
    fileUrl?: StringFilter<"ResumePDF"> | string
    template?: StringNullableFilter<"ResumePDF"> | string | null
    createdAt?: DateTimeFilter<"ResumePDF"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }

  export type ResumePDFOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    template?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
  }

  export type ResumePDFWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResumePDFWhereInput | ResumePDFWhereInput[]
    OR?: ResumePDFWhereInput[]
    NOT?: ResumePDFWhereInput | ResumePDFWhereInput[]
    resumeId?: IntFilter<"ResumePDF"> | number
    fileUrl?: StringFilter<"ResumePDF"> | string
    template?: StringNullableFilter<"ResumePDF"> | string | null
    createdAt?: DateTimeFilter<"ResumePDF"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
  }, "id">

  export type ResumePDFOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    template?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ResumePDFCountOrderByAggregateInput
    _avg?: ResumePDFAvgOrderByAggregateInput
    _max?: ResumePDFMaxOrderByAggregateInput
    _min?: ResumePDFMinOrderByAggregateInput
    _sum?: ResumePDFSumOrderByAggregateInput
  }

  export type ResumePDFScalarWhereWithAggregatesInput = {
    AND?: ResumePDFScalarWhereWithAggregatesInput | ResumePDFScalarWhereWithAggregatesInput[]
    OR?: ResumePDFScalarWhereWithAggregatesInput[]
    NOT?: ResumePDFScalarWhereWithAggregatesInput | ResumePDFScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResumePDF"> | number
    resumeId?: IntWithAggregatesFilter<"ResumePDF"> | number
    fileUrl?: StringWithAggregatesFilter<"ResumePDF"> | string
    template?: StringNullableWithAggregatesFilter<"ResumePDF"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ResumePDF"> | Date | string
  }

  export type UserReviewLogWhereInput = {
    AND?: UserReviewLogWhereInput | UserReviewLogWhereInput[]
    OR?: UserReviewLogWhereInput[]
    NOT?: UserReviewLogWhereInput | UserReviewLogWhereInput[]
    id?: IntFilter<"UserReviewLog"> | number
    targetUserId?: IntFilter<"UserReviewLog"> | number
    reviewerId?: IntFilter<"UserReviewLog"> | number
    score?: IntNullableFilter<"UserReviewLog"> | number | null
    reviewType?: StringNullableFilter<"UserReviewLog"> | string | null
    isBlacklisted?: BoolFilter<"UserReviewLog"> | boolean
    note?: StringNullableFilter<"UserReviewLog"> | string | null
    createdAt?: DateTimeFilter<"UserReviewLog"> | Date | string
    targetUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
    tags?: UserReviewTagListRelationFilter
  }

  export type UserReviewLogOrderByWithRelationInput = {
    id?: SortOrder
    targetUserId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrderInput | SortOrder
    reviewType?: SortOrderInput | SortOrder
    isBlacklisted?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    targetUser?: UserOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
    tags?: UserReviewTagOrderByRelationAggregateInput
  }

  export type UserReviewLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserReviewLogWhereInput | UserReviewLogWhereInput[]
    OR?: UserReviewLogWhereInput[]
    NOT?: UserReviewLogWhereInput | UserReviewLogWhereInput[]
    targetUserId?: IntFilter<"UserReviewLog"> | number
    reviewerId?: IntFilter<"UserReviewLog"> | number
    score?: IntNullableFilter<"UserReviewLog"> | number | null
    reviewType?: StringNullableFilter<"UserReviewLog"> | string | null
    isBlacklisted?: BoolFilter<"UserReviewLog"> | boolean
    note?: StringNullableFilter<"UserReviewLog"> | string | null
    createdAt?: DateTimeFilter<"UserReviewLog"> | Date | string
    targetUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
    tags?: UserReviewTagListRelationFilter
  }, "id">

  export type UserReviewLogOrderByWithAggregationInput = {
    id?: SortOrder
    targetUserId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrderInput | SortOrder
    reviewType?: SortOrderInput | SortOrder
    isBlacklisted?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserReviewLogCountOrderByAggregateInput
    _avg?: UserReviewLogAvgOrderByAggregateInput
    _max?: UserReviewLogMaxOrderByAggregateInput
    _min?: UserReviewLogMinOrderByAggregateInput
    _sum?: UserReviewLogSumOrderByAggregateInput
  }

  export type UserReviewLogScalarWhereWithAggregatesInput = {
    AND?: UserReviewLogScalarWhereWithAggregatesInput | UserReviewLogScalarWhereWithAggregatesInput[]
    OR?: UserReviewLogScalarWhereWithAggregatesInput[]
    NOT?: UserReviewLogScalarWhereWithAggregatesInput | UserReviewLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserReviewLog"> | number
    targetUserId?: IntWithAggregatesFilter<"UserReviewLog"> | number
    reviewerId?: IntWithAggregatesFilter<"UserReviewLog"> | number
    score?: IntNullableWithAggregatesFilter<"UserReviewLog"> | number | null
    reviewType?: StringNullableWithAggregatesFilter<"UserReviewLog"> | string | null
    isBlacklisted?: BoolWithAggregatesFilter<"UserReviewLog"> | boolean
    note?: StringNullableWithAggregatesFilter<"UserReviewLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserReviewLog"> | Date | string
  }

  export type ResumeReviewLogWhereInput = {
    AND?: ResumeReviewLogWhereInput | ResumeReviewLogWhereInput[]
    OR?: ResumeReviewLogWhereInput[]
    NOT?: ResumeReviewLogWhereInput | ResumeReviewLogWhereInput[]
    id?: IntFilter<"ResumeReviewLog"> | number
    resumeId?: IntFilter<"ResumeReviewLog"> | number
    reviewerId?: IntFilter<"ResumeReviewLog"> | number
    score?: IntNullableFilter<"ResumeReviewLog"> | number | null
    status?: EnumReviewStatusFilter<"ResumeReviewLog"> | $Enums.ReviewStatus
    note?: StringNullableFilter<"ResumeReviewLog"> | string | null
    createdAt?: DateTimeFilter<"ResumeReviewLog"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
    reviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
    tags?: ResumeReviewTagListRelationFilter
  }

  export type ResumeReviewLogOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrderInput | SortOrder
    status?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resume?: UserResumeOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
    tags?: ResumeReviewTagOrderByRelationAggregateInput
  }

  export type ResumeReviewLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResumeReviewLogWhereInput | ResumeReviewLogWhereInput[]
    OR?: ResumeReviewLogWhereInput[]
    NOT?: ResumeReviewLogWhereInput | ResumeReviewLogWhereInput[]
    resumeId?: IntFilter<"ResumeReviewLog"> | number
    reviewerId?: IntFilter<"ResumeReviewLog"> | number
    score?: IntNullableFilter<"ResumeReviewLog"> | number | null
    status?: EnumReviewStatusFilter<"ResumeReviewLog"> | $Enums.ReviewStatus
    note?: StringNullableFilter<"ResumeReviewLog"> | string | null
    createdAt?: DateTimeFilter<"ResumeReviewLog"> | Date | string
    resume?: XOR<UserResumeScalarRelationFilter, UserResumeWhereInput>
    reviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
    tags?: ResumeReviewTagListRelationFilter
  }, "id">

  export type ResumeReviewLogOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrderInput | SortOrder
    status?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ResumeReviewLogCountOrderByAggregateInput
    _avg?: ResumeReviewLogAvgOrderByAggregateInput
    _max?: ResumeReviewLogMaxOrderByAggregateInput
    _min?: ResumeReviewLogMinOrderByAggregateInput
    _sum?: ResumeReviewLogSumOrderByAggregateInput
  }

  export type ResumeReviewLogScalarWhereWithAggregatesInput = {
    AND?: ResumeReviewLogScalarWhereWithAggregatesInput | ResumeReviewLogScalarWhereWithAggregatesInput[]
    OR?: ResumeReviewLogScalarWhereWithAggregatesInput[]
    NOT?: ResumeReviewLogScalarWhereWithAggregatesInput | ResumeReviewLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResumeReviewLog"> | number
    resumeId?: IntWithAggregatesFilter<"ResumeReviewLog"> | number
    reviewerId?: IntWithAggregatesFilter<"ResumeReviewLog"> | number
    score?: IntNullableWithAggregatesFilter<"ResumeReviewLog"> | number | null
    status?: EnumReviewStatusWithAggregatesFilter<"ResumeReviewLog"> | $Enums.ReviewStatus
    note?: StringNullableWithAggregatesFilter<"ResumeReviewLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ResumeReviewLog"> | Date | string
  }

  export type UserReviewTagWhereInput = {
    AND?: UserReviewTagWhereInput | UserReviewTagWhereInput[]
    OR?: UserReviewTagWhereInput[]
    NOT?: UserReviewTagWhereInput | UserReviewTagWhereInput[]
    id?: IntFilter<"UserReviewTag"> | number
    tagId?: IntFilter<"UserReviewTag"> | number
    reviewId?: IntFilter<"UserReviewTag"> | number
    tag?: XOR<ReviewTagOptionScalarRelationFilter, ReviewTagOptionWhereInput>
    review?: XOR<UserReviewLogScalarRelationFilter, UserReviewLogWhereInput>
  }

  export type UserReviewTagOrderByWithRelationInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
    tag?: ReviewTagOptionOrderByWithRelationInput
    review?: UserReviewLogOrderByWithRelationInput
  }

  export type UserReviewTagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserReviewTagWhereInput | UserReviewTagWhereInput[]
    OR?: UserReviewTagWhereInput[]
    NOT?: UserReviewTagWhereInput | UserReviewTagWhereInput[]
    tagId?: IntFilter<"UserReviewTag"> | number
    reviewId?: IntFilter<"UserReviewTag"> | number
    tag?: XOR<ReviewTagOptionScalarRelationFilter, ReviewTagOptionWhereInput>
    review?: XOR<UserReviewLogScalarRelationFilter, UserReviewLogWhereInput>
  }, "id">

  export type UserReviewTagOrderByWithAggregationInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
    _count?: UserReviewTagCountOrderByAggregateInput
    _avg?: UserReviewTagAvgOrderByAggregateInput
    _max?: UserReviewTagMaxOrderByAggregateInput
    _min?: UserReviewTagMinOrderByAggregateInput
    _sum?: UserReviewTagSumOrderByAggregateInput
  }

  export type UserReviewTagScalarWhereWithAggregatesInput = {
    AND?: UserReviewTagScalarWhereWithAggregatesInput | UserReviewTagScalarWhereWithAggregatesInput[]
    OR?: UserReviewTagScalarWhereWithAggregatesInput[]
    NOT?: UserReviewTagScalarWhereWithAggregatesInput | UserReviewTagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserReviewTag"> | number
    tagId?: IntWithAggregatesFilter<"UserReviewTag"> | number
    reviewId?: IntWithAggregatesFilter<"UserReviewTag"> | number
  }

  export type ResumeReviewTagWhereInput = {
    AND?: ResumeReviewTagWhereInput | ResumeReviewTagWhereInput[]
    OR?: ResumeReviewTagWhereInput[]
    NOT?: ResumeReviewTagWhereInput | ResumeReviewTagWhereInput[]
    id?: IntFilter<"ResumeReviewTag"> | number
    tagId?: IntFilter<"ResumeReviewTag"> | number
    reviewId?: IntFilter<"ResumeReviewTag"> | number
    tag?: XOR<ReviewTagOptionScalarRelationFilter, ReviewTagOptionWhereInput>
    review?: XOR<ResumeReviewLogScalarRelationFilter, ResumeReviewLogWhereInput>
  }

  export type ResumeReviewTagOrderByWithRelationInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
    tag?: ReviewTagOptionOrderByWithRelationInput
    review?: ResumeReviewLogOrderByWithRelationInput
  }

  export type ResumeReviewTagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResumeReviewTagWhereInput | ResumeReviewTagWhereInput[]
    OR?: ResumeReviewTagWhereInput[]
    NOT?: ResumeReviewTagWhereInput | ResumeReviewTagWhereInput[]
    tagId?: IntFilter<"ResumeReviewTag"> | number
    reviewId?: IntFilter<"ResumeReviewTag"> | number
    tag?: XOR<ReviewTagOptionScalarRelationFilter, ReviewTagOptionWhereInput>
    review?: XOR<ResumeReviewLogScalarRelationFilter, ResumeReviewLogWhereInput>
  }, "id">

  export type ResumeReviewTagOrderByWithAggregationInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
    _count?: ResumeReviewTagCountOrderByAggregateInput
    _avg?: ResumeReviewTagAvgOrderByAggregateInput
    _max?: ResumeReviewTagMaxOrderByAggregateInput
    _min?: ResumeReviewTagMinOrderByAggregateInput
    _sum?: ResumeReviewTagSumOrderByAggregateInput
  }

  export type ResumeReviewTagScalarWhereWithAggregatesInput = {
    AND?: ResumeReviewTagScalarWhereWithAggregatesInput | ResumeReviewTagScalarWhereWithAggregatesInput[]
    OR?: ResumeReviewTagScalarWhereWithAggregatesInput[]
    NOT?: ResumeReviewTagScalarWhereWithAggregatesInput | ResumeReviewTagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResumeReviewTag"> | number
    tagId?: IntWithAggregatesFilter<"ResumeReviewTag"> | number
    reviewId?: IntWithAggregatesFilter<"ResumeReviewTag"> | number
  }

  export type ReviewTagOptionWhereInput = {
    AND?: ReviewTagOptionWhereInput | ReviewTagOptionWhereInput[]
    OR?: ReviewTagOptionWhereInput[]
    NOT?: ReviewTagOptionWhereInput | ReviewTagOptionWhereInput[]
    id?: IntFilter<"ReviewTagOption"> | number
    label?: StringFilter<"ReviewTagOption"> | string
    type?: StringNullableFilter<"ReviewTagOption"> | string | null
    isPublic?: BoolFilter<"ReviewTagOption"> | boolean
    resumeTags?: ResumeReviewTagListRelationFilter
    userTags?: UserReviewTagListRelationFilter
  }

  export type ReviewTagOptionOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    resumeTags?: ResumeReviewTagOrderByRelationAggregateInput
    userTags?: UserReviewTagOrderByRelationAggregateInput
  }

  export type ReviewTagOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    label?: string
    AND?: ReviewTagOptionWhereInput | ReviewTagOptionWhereInput[]
    OR?: ReviewTagOptionWhereInput[]
    NOT?: ReviewTagOptionWhereInput | ReviewTagOptionWhereInput[]
    type?: StringNullableFilter<"ReviewTagOption"> | string | null
    isPublic?: BoolFilter<"ReviewTagOption"> | boolean
    resumeTags?: ResumeReviewTagListRelationFilter
    userTags?: UserReviewTagListRelationFilter
  }, "id" | "label">

  export type ReviewTagOptionOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    _count?: ReviewTagOptionCountOrderByAggregateInput
    _avg?: ReviewTagOptionAvgOrderByAggregateInput
    _max?: ReviewTagOptionMaxOrderByAggregateInput
    _min?: ReviewTagOptionMinOrderByAggregateInput
    _sum?: ReviewTagOptionSumOrderByAggregateInput
  }

  export type ReviewTagOptionScalarWhereWithAggregatesInput = {
    AND?: ReviewTagOptionScalarWhereWithAggregatesInput | ReviewTagOptionScalarWhereWithAggregatesInput[]
    OR?: ReviewTagOptionScalarWhereWithAggregatesInput[]
    NOT?: ReviewTagOptionScalarWhereWithAggregatesInput | ReviewTagOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReviewTagOption"> | number
    label?: StringWithAggregatesFilter<"ReviewTagOption"> | string
    type?: StringNullableWithAggregatesFilter<"ReviewTagOption"> | string | null
    isPublic?: BoolWithAggregatesFilter<"ReviewTagOption"> | boolean
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    facebookId?: StringNullableFilter<"User"> | string | null
    lineId?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginIp?: StringNullableFilter<"User"> | string | null
    skipRegistration?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isDeleted?: BoolFilter<"User"> | boolean
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    isAnonymized?: BoolFilter<"User"> | boolean
    deletionReason?: StringNullableFilter<"User"> | string | null
    companyId?: IntNullableFilter<"User"> | number | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    resumeId?: IntNullableFilter<"User"> | number | null
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    resume?: XOR<UserResumeNullableScalarRelationFilter, UserResumeWhereInput> | null
    resumes?: UserResumeListRelationFilter
    ipRecords?: IpRecordListRelationFilter
    deviceRecords?: DeviceRecordListRelationFilter
    resumeViewLogs?: ResumeViewLogListRelationFilter
    resumesUserViewed?: ResumeViewLogListRelationFilter
    resumeReviewsGiven?: ResumeReviewLogListRelationFilter
    userReviewsGiven?: UserReviewLogListRelationFilter
    userReviewsReceived?: UserReviewLogListRelationFilter
    accountActionsTaken?: AccountHistoryLogListRelationFilter
    accountActionsReceived?: AccountHistoryLogListRelationFilter
    resumesGrantedByMe?: ResumeAccessGrantListRelationFilter
    resumesGrantedToMe?: ResumeAccessGrantListRelationFilter
    attendanceLogs?: AttendanceLogListRelationFilter
    schedules?: ShiftScheduleListRelationFilter
    paySlips?: PaySlipListRelationFilter
    sentMessages?: MessageLogListRelationFilter
    createdThreads?: MessageThreadListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    facebookId?: SortOrderInput | SortOrder
    lineId?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    lastLoginIp?: SortOrderInput | SortOrder
    skipRegistration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    isAnonymized?: SortOrder
    deletionReason?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    role?: SortOrder
    resumeId?: SortOrderInput | SortOrder
    company?: CompanyOrderByWithRelationInput
    resume?: UserResumeOrderByWithRelationInput
    resumes?: UserResumeOrderByRelationAggregateInput
    ipRecords?: IpRecordOrderByRelationAggregateInput
    deviceRecords?: DeviceRecordOrderByRelationAggregateInput
    resumeViewLogs?: ResumeViewLogOrderByRelationAggregateInput
    resumesUserViewed?: ResumeViewLogOrderByRelationAggregateInput
    resumeReviewsGiven?: ResumeReviewLogOrderByRelationAggregateInput
    userReviewsGiven?: UserReviewLogOrderByRelationAggregateInput
    userReviewsReceived?: UserReviewLogOrderByRelationAggregateInput
    accountActionsTaken?: AccountHistoryLogOrderByRelationAggregateInput
    accountActionsReceived?: AccountHistoryLogOrderByRelationAggregateInput
    resumesGrantedByMe?: ResumeAccessGrantOrderByRelationAggregateInput
    resumesGrantedToMe?: ResumeAccessGrantOrderByRelationAggregateInput
    attendanceLogs?: AttendanceLogOrderByRelationAggregateInput
    schedules?: ShiftScheduleOrderByRelationAggregateInput
    paySlips?: PaySlipOrderByRelationAggregateInput
    sentMessages?: MessageLogOrderByRelationAggregateInput
    createdThreads?: MessageThreadOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    googleId?: string
    facebookId?: string
    lineId?: string
    resumeId?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginIp?: StringNullableFilter<"User"> | string | null
    skipRegistration?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isDeleted?: BoolFilter<"User"> | boolean
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    isAnonymized?: BoolFilter<"User"> | boolean
    deletionReason?: StringNullableFilter<"User"> | string | null
    companyId?: IntNullableFilter<"User"> | number | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    resume?: XOR<UserResumeNullableScalarRelationFilter, UserResumeWhereInput> | null
    resumes?: UserResumeListRelationFilter
    ipRecords?: IpRecordListRelationFilter
    deviceRecords?: DeviceRecordListRelationFilter
    resumeViewLogs?: ResumeViewLogListRelationFilter
    resumesUserViewed?: ResumeViewLogListRelationFilter
    resumeReviewsGiven?: ResumeReviewLogListRelationFilter
    userReviewsGiven?: UserReviewLogListRelationFilter
    userReviewsReceived?: UserReviewLogListRelationFilter
    accountActionsTaken?: AccountHistoryLogListRelationFilter
    accountActionsReceived?: AccountHistoryLogListRelationFilter
    resumesGrantedByMe?: ResumeAccessGrantListRelationFilter
    resumesGrantedToMe?: ResumeAccessGrantListRelationFilter
    attendanceLogs?: AttendanceLogListRelationFilter
    schedules?: ShiftScheduleListRelationFilter
    paySlips?: PaySlipListRelationFilter
    sentMessages?: MessageLogListRelationFilter
    createdThreads?: MessageThreadListRelationFilter
  }, "id" | "email" | "googleId" | "facebookId" | "lineId" | "resumeId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    facebookId?: SortOrderInput | SortOrder
    lineId?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    lastLoginIp?: SortOrderInput | SortOrder
    skipRegistration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    isAnonymized?: SortOrder
    deletionReason?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    role?: SortOrder
    resumeId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    facebookId?: StringNullableWithAggregatesFilter<"User"> | string | null
    lineId?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLoginIp?: StringNullableWithAggregatesFilter<"User"> | string | null
    skipRegistration?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"User"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isAnonymized?: BoolWithAggregatesFilter<"User"> | boolean
    deletionReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyId?: IntNullableWithAggregatesFilter<"User"> | number | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    resumeId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type IpRecordWhereInput = {
    AND?: IpRecordWhereInput | IpRecordWhereInput[]
    OR?: IpRecordWhereInput[]
    NOT?: IpRecordWhereInput | IpRecordWhereInput[]
    id?: IntFilter<"IpRecord"> | number
    userId?: IntFilter<"IpRecord"> | number
    ipAddress?: StringFilter<"IpRecord"> | string
    location?: StringNullableFilter<"IpRecord"> | string | null
    createdAt?: DateTimeFilter<"IpRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type IpRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    location?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type IpRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IpRecordWhereInput | IpRecordWhereInput[]
    OR?: IpRecordWhereInput[]
    NOT?: IpRecordWhereInput | IpRecordWhereInput[]
    userId?: IntFilter<"IpRecord"> | number
    ipAddress?: StringFilter<"IpRecord"> | string
    location?: StringNullableFilter<"IpRecord"> | string | null
    createdAt?: DateTimeFilter<"IpRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type IpRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    location?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: IpRecordCountOrderByAggregateInput
    _avg?: IpRecordAvgOrderByAggregateInput
    _max?: IpRecordMaxOrderByAggregateInput
    _min?: IpRecordMinOrderByAggregateInput
    _sum?: IpRecordSumOrderByAggregateInput
  }

  export type IpRecordScalarWhereWithAggregatesInput = {
    AND?: IpRecordScalarWhereWithAggregatesInput | IpRecordScalarWhereWithAggregatesInput[]
    OR?: IpRecordScalarWhereWithAggregatesInput[]
    NOT?: IpRecordScalarWhereWithAggregatesInput | IpRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IpRecord"> | number
    userId?: IntWithAggregatesFilter<"IpRecord"> | number
    ipAddress?: StringWithAggregatesFilter<"IpRecord"> | string
    location?: StringNullableWithAggregatesFilter<"IpRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"IpRecord"> | Date | string
  }

  export type DeviceRecordWhereInput = {
    AND?: DeviceRecordWhereInput | DeviceRecordWhereInput[]
    OR?: DeviceRecordWhereInput[]
    NOT?: DeviceRecordWhereInput | DeviceRecordWhereInput[]
    id?: IntFilter<"DeviceRecord"> | number
    userId?: IntFilter<"DeviceRecord"> | number
    deviceInfo?: StringFilter<"DeviceRecord"> | string
    platform?: StringNullableFilter<"DeviceRecord"> | string | null
    createdAt?: DateTimeFilter<"DeviceRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DeviceRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    deviceInfo?: SortOrder
    platform?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DeviceRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DeviceRecordWhereInput | DeviceRecordWhereInput[]
    OR?: DeviceRecordWhereInput[]
    NOT?: DeviceRecordWhereInput | DeviceRecordWhereInput[]
    userId?: IntFilter<"DeviceRecord"> | number
    deviceInfo?: StringFilter<"DeviceRecord"> | string
    platform?: StringNullableFilter<"DeviceRecord"> | string | null
    createdAt?: DateTimeFilter<"DeviceRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DeviceRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    deviceInfo?: SortOrder
    platform?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DeviceRecordCountOrderByAggregateInput
    _avg?: DeviceRecordAvgOrderByAggregateInput
    _max?: DeviceRecordMaxOrderByAggregateInput
    _min?: DeviceRecordMinOrderByAggregateInput
    _sum?: DeviceRecordSumOrderByAggregateInput
  }

  export type DeviceRecordScalarWhereWithAggregatesInput = {
    AND?: DeviceRecordScalarWhereWithAggregatesInput | DeviceRecordScalarWhereWithAggregatesInput[]
    OR?: DeviceRecordScalarWhereWithAggregatesInput[]
    NOT?: DeviceRecordScalarWhereWithAggregatesInput | DeviceRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DeviceRecord"> | number
    userId?: IntWithAggregatesFilter<"DeviceRecord"> | number
    deviceInfo?: StringWithAggregatesFilter<"DeviceRecord"> | string
    platform?: StringNullableWithAggregatesFilter<"DeviceRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DeviceRecord"> | Date | string
  }

  export type AccountHistoryLogWhereInput = {
    AND?: AccountHistoryLogWhereInput | AccountHistoryLogWhereInput[]
    OR?: AccountHistoryLogWhereInput[]
    NOT?: AccountHistoryLogWhereInput | AccountHistoryLogWhereInput[]
    id?: IntFilter<"AccountHistoryLog"> | number
    userId?: IntFilter<"AccountHistoryLog"> | number
    operatorId?: IntNullableFilter<"AccountHistoryLog"> | number | null
    action?: StringFilter<"AccountHistoryLog"> | string
    note?: StringNullableFilter<"AccountHistoryLog"> | string | null
    createdAt?: DateTimeFilter<"AccountHistoryLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    operatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AccountHistoryLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    operatorId?: SortOrderInput | SortOrder
    action?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    operatedBy?: UserOrderByWithRelationInput
  }

  export type AccountHistoryLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccountHistoryLogWhereInput | AccountHistoryLogWhereInput[]
    OR?: AccountHistoryLogWhereInput[]
    NOT?: AccountHistoryLogWhereInput | AccountHistoryLogWhereInput[]
    userId?: IntFilter<"AccountHistoryLog"> | number
    operatorId?: IntNullableFilter<"AccountHistoryLog"> | number | null
    action?: StringFilter<"AccountHistoryLog"> | string
    note?: StringNullableFilter<"AccountHistoryLog"> | string | null
    createdAt?: DateTimeFilter<"AccountHistoryLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    operatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AccountHistoryLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    operatorId?: SortOrderInput | SortOrder
    action?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AccountHistoryLogCountOrderByAggregateInput
    _avg?: AccountHistoryLogAvgOrderByAggregateInput
    _max?: AccountHistoryLogMaxOrderByAggregateInput
    _min?: AccountHistoryLogMinOrderByAggregateInput
    _sum?: AccountHistoryLogSumOrderByAggregateInput
  }

  export type AccountHistoryLogScalarWhereWithAggregatesInput = {
    AND?: AccountHistoryLogScalarWhereWithAggregatesInput | AccountHistoryLogScalarWhereWithAggregatesInput[]
    OR?: AccountHistoryLogScalarWhereWithAggregatesInput[]
    NOT?: AccountHistoryLogScalarWhereWithAggregatesInput | AccountHistoryLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccountHistoryLog"> | number
    userId?: IntWithAggregatesFilter<"AccountHistoryLog"> | number
    operatorId?: IntNullableWithAggregatesFilter<"AccountHistoryLog"> | number | null
    action?: StringWithAggregatesFilter<"AccountHistoryLog"> | string
    note?: StringNullableWithAggregatesFilter<"AccountHistoryLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AccountHistoryLog"> | Date | string
  }

  export type ResumeAccessGrantCreateInput = {
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutAccessGrantsInput
    grantedTo: UserCreateNestedOneWithoutResumesGrantedToMeInput
    grantedBy: UserCreateNestedOneWithoutResumesGrantedByMeInput
  }

  export type ResumeAccessGrantUncheckedCreateInput = {
    id?: number
    resumeId: number
    grantedToId: number
    grantedById: number
    createdAt?: Date | string
  }

  export type ResumeAccessGrantUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutAccessGrantsNestedInput
    grantedTo?: UserUpdateOneRequiredWithoutResumesGrantedToMeNestedInput
    grantedBy?: UserUpdateOneRequiredWithoutResumesGrantedByMeNestedInput
  }

  export type ResumeAccessGrantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    grantedToId?: IntFieldUpdateOperationsInput | number
    grantedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAccessGrantCreateManyInput = {
    id?: number
    resumeId: number
    grantedToId: number
    grantedById: number
    createdAt?: Date | string
  }

  export type ResumeAccessGrantUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAccessGrantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    grantedToId?: IntFieldUpdateOperationsInput | number
    grantedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogCreateInput = {
    viewedAt?: Date | string
    admin: UserCreateNestedOneWithoutResumeViewLogsInput
    userViewedBy: UserCreateNestedOneWithoutResumesUserViewedInput
    resume: UserResumeCreateNestedOneWithoutResumeViewLogsInput
  }

  export type ResumeViewLogUncheckedCreateInput = {
    id?: number
    adminId: number
    userViewedById: number
    resumeId: number
    viewedAt?: Date | string
  }

  export type ResumeViewLogUpdateInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneRequiredWithoutResumeViewLogsNestedInput
    userViewedBy?: UserUpdateOneRequiredWithoutResumesUserViewedNestedInput
    resume?: UserResumeUpdateOneRequiredWithoutResumeViewLogsNestedInput
  }

  export type ResumeViewLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    userViewedById?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogCreateManyInput = {
    id?: number
    adminId: number
    userViewedById: number
    resumeId: number
    viewedAt?: Date | string
  }

  export type ResumeViewLogUpdateManyMutationInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    userViewedById?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeUncheckedCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipUncheckedCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUncheckedUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUncheckedUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: number
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
  }

  export type CompanyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttendanceLogCreateInput = {
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    user: UserCreateNestedOneWithoutAttendanceLogsInput
    company: CompanyCreateNestedOneWithoutAttendanceLogsInput
    schedule?: ShiftScheduleCreateNestedOneWithoutAttendanceLogsInput
  }

  export type AttendanceLogUncheckedCreateInput = {
    id?: number
    userId: number
    companyId: number
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    scheduleId?: number | null
  }

  export type AttendanceLogUpdateInput = {
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAttendanceLogsNestedInput
    company?: CompanyUpdateOneRequiredWithoutAttendanceLogsNestedInput
    schedule?: ShiftScheduleUpdateOneWithoutAttendanceLogsNestedInput
  }

  export type AttendanceLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendanceLogCreateManyInput = {
    id?: number
    userId: number
    companyId: number
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    scheduleId?: number | null
  }

  export type AttendanceLogUpdateManyMutationInput = {
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftScheduleCreateInput = {
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
    user: UserCreateNestedOneWithoutSchedulesInput
    company: CompanyCreateNestedOneWithoutSchedulesInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutScheduleInput
  }

  export type ShiftScheduleUncheckedCreateInput = {
    id?: number
    userId: number
    companyId: number
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ShiftScheduleUpdateInput = {
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSchedulesNestedInput
    company?: CompanyUpdateOneRequiredWithoutSchedulesNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutScheduleNestedInput
  }

  export type ShiftScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ShiftScheduleCreateManyInput = {
    id?: number
    userId: number
    companyId: number
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
  }

  export type ShiftScheduleUpdateManyMutationInput = {
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShiftScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipCreateInput = {
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPaySlipsInput
    issuedBy: CompanyCreateNestedOneWithoutIssuedPaySlipsInput
  }

  export type PaySlipUncheckedCreateInput = {
    id?: number
    userId: number
    issuedById: number
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type PaySlipUpdateInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPaySlipsNestedInput
    issuedBy?: CompanyUpdateOneRequiredWithoutIssuedPaySlipsNestedInput
  }

  export type PaySlipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    issuedById?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaySlipCreateManyInput = {
    id?: number
    userId: number
    issuedById: number
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type PaySlipUpdateManyMutationInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaySlipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    issuedById?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobPostingCreateInput = {
    title: string
    description: string
    location?: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange?: string | null
    isActive?: boolean
    postedAt?: Date | string
    expiredAt?: Date | string | null
    company: CompanyCreateNestedOneWithoutJobPostingInput
    applications?: JobApplicationCreateNestedManyWithoutJobInput
  }

  export type JobPostingUncheckedCreateInput = {
    id?: number
    companyId: number
    title: string
    description: string
    location?: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange?: string | null
    isActive?: boolean
    postedAt?: Date | string
    expiredAt?: Date | string | null
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobPostingUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company?: CompanyUpdateOneRequiredWithoutJobPostingNestedInput
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
  }

  export type JobPostingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobPostingCreateManyInput = {
    id?: number
    companyId: number
    title: string
    description: string
    location?: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange?: string | null
    isActive?: boolean
    postedAt?: Date | string
    expiredAt?: Date | string | null
  }

  export type JobPostingUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JobPostingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JobApplicationCreateInput = {
    status: string
    appliedAt?: Date | string
    note?: string | null
    job: JobPostingCreateNestedOneWithoutApplicationsInput
    resume: UserResumeCreateNestedOneWithoutJobapplicationInput
  }

  export type JobApplicationUncheckedCreateInput = {
    id?: number
    jobId: number
    resumeId: number
    status: string
    appliedAt?: Date | string
    note?: string | null
  }

  export type JobApplicationUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    job?: JobPostingUpdateOneRequiredWithoutApplicationsNestedInput
    resume?: UserResumeUpdateOneRequiredWithoutJobapplicationNestedInput
  }

  export type JobApplicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobApplicationCreateManyInput = {
    id?: number
    jobId: number
    resumeId: number
    status: string
    appliedAt?: Date | string
    note?: string | null
  }

  export type JobApplicationUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobApplicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageThreadCreateInput = {
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutMessageThreadsInput
    createdBy: UserCreateNestedOneWithoutCreatedThreadsInput
    messages?: MessageLogCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadUncheckedCreateInput = {
    id?: number
    resumeId: number
    createdById: number
    createdAt?: Date | string
    messages?: MessageLogUncheckedCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutMessageThreadsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedThreadsNestedInput
    messages?: MessageLogUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageLogUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadCreateManyInput = {
    id?: number
    resumeId: number
    createdById: number
    createdAt?: Date | string
  }

  export type MessageThreadUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageThreadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageLogCreateInput = {
    content: string
    sentAt?: Date | string
    thread: MessageThreadCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageLogUncheckedCreateInput = {
    id?: number
    threadId: number
    senderId: number
    content: string
    sentAt?: Date | string
  }

  export type MessageLogUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thread?: MessageThreadUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    threadId?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageLogCreateManyInput = {
    id?: number
    threadId: number
    senderId: number
    content: string
    sentAt?: Date | string
  }

  export type MessageLogUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    threadId?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserResumeCreateInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUpdateInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateManyInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserResumeUpdateManyMutationInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserResumeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageCreateInput = {
    name: string
    level: $Enums.LanguageLevel
    levelOther?: string | null
    resume: UserResumeCreateNestedOneWithoutLanguagesInput
  }

  export type LanguageUncheckedCreateInput = {
    id?: number
    resumeId: number
    name: string
    level: $Enums.LanguageLevel
    levelOther?: string | null
  }

  export type LanguageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    levelOther?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutLanguagesNestedInput
  }

  export type LanguageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    levelOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageCreateManyInput = {
    id?: number
    resumeId: number
    name: string
    level: $Enums.LanguageLevel
    levelOther?: string | null
  }

  export type LanguageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    levelOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    levelOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationCreateInput = {
    school: string
    department: string
    status: $Enums.EducationStatus
    statusOther?: string | null
    startDate: Date | string
    endDate: Date | string
    resume: UserResumeCreateNestedOneWithoutEducationsInput
  }

  export type EducationUncheckedCreateInput = {
    id?: number
    resumeId: number
    school: string
    department: string
    status: $Enums.EducationStatus
    statusOther?: string | null
    startDate: Date | string
    endDate: Date | string
  }

  export type EducationUpdateInput = {
    school?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    status?: EnumEducationStatusFieldUpdateOperationsInput | $Enums.EducationStatus
    statusOther?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutEducationsNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    status?: EnumEducationStatusFieldUpdateOperationsInput | $Enums.EducationStatus
    statusOther?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationCreateManyInput = {
    id?: number
    resumeId: number
    school: string
    department: string
    status: $Enums.EducationStatus
    statusOther?: string | null
    startDate: Date | string
    endDate: Date | string
  }

  export type EducationUpdateManyMutationInput = {
    school?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    status?: EnumEducationStatusFieldUpdateOperationsInput | $Enums.EducationStatus
    statusOther?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    status?: EnumEducationStatusFieldUpdateOperationsInput | $Enums.EducationStatus
    statusOther?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperienceCreateInput = {
    company: string
    title: string
    startDate: Date | string
    endDate: Date | string
    description: string
    resume: UserResumeCreateNestedOneWithoutExperiencesInput
  }

  export type ExperienceUncheckedCreateInput = {
    id?: number
    resumeId: number
    company: string
    title: string
    startDate: Date | string
    endDate: Date | string
    description: string
  }

  export type ExperienceUpdateInput = {
    company?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    resume?: UserResumeUpdateOneRequiredWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceCreateManyInput = {
    id?: number
    resumeId: number
    company: string
    title: string
    startDate: Date | string
    endDate: Date | string
    description: string
  }

  export type ExperienceUpdateManyMutationInput = {
    company?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SkillCreateInput = {
    name: string
    resume: UserResumeCreateNestedOneWithoutSkillsInput
  }

  export type SkillUncheckedCreateInput = {
    id?: number
    resumeId: number
    name: string
  }

  export type SkillUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    resume?: UserResumeUpdateOneRequiredWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillCreateManyInput = {
    id?: number
    resumeId: number
    name: string
  }

  export type SkillUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateCreateInput = {
    name: string
    expiry?: Date | string | null
    resume: UserResumeCreateNestedOneWithoutCertificatesInput
  }

  export type CertificateUncheckedCreateInput = {
    id?: number
    resumeId: number
    name: string
    expiry?: Date | string | null
  }

  export type CertificateUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resume?: UserResumeUpdateOneRequiredWithoutCertificatesNestedInput
  }

  export type CertificateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CertificateCreateManyInput = {
    id?: number
    resumeId: number
    name: string
    expiry?: Date | string | null
  }

  export type CertificateUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CertificateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TraitCreateInput = {
    personality: string
    interest?: string | null
    resume: UserResumeCreateNestedOneWithoutTraitsInput
  }

  export type TraitUncheckedCreateInput = {
    id?: number
    resumeId: number
    personality: string
    interest?: string | null
  }

  export type TraitUpdateInput = {
    personality?: StringFieldUpdateOperationsInput | string
    interest?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutTraitsNestedInput
  }

  export type TraitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    personality?: StringFieldUpdateOperationsInput | string
    interest?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TraitCreateManyInput = {
    id?: number
    resumeId: number
    personality: string
    interest?: string | null
  }

  export type TraitUpdateManyMutationInput = {
    personality?: StringFieldUpdateOperationsInput | string
    interest?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TraitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    personality?: StringFieldUpdateOperationsInput | string
    interest?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommuteCreateInput = {
    method: $Enums.CommuteMethod
    methodOther?: string | null
    resume: UserResumeCreateNestedOneWithoutCommuteOptionsInput
  }

  export type CommuteUncheckedCreateInput = {
    id?: number
    resumeId: number
    method: $Enums.CommuteMethod
    methodOther?: string | null
  }

  export type CommuteUpdateInput = {
    method?: EnumCommuteMethodFieldUpdateOperationsInput | $Enums.CommuteMethod
    methodOther?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutCommuteOptionsNestedInput
  }

  export type CommuteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    method?: EnumCommuteMethodFieldUpdateOperationsInput | $Enums.CommuteMethod
    methodOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommuteCreateManyInput = {
    id?: number
    resumeId: number
    method: $Enums.CommuteMethod
    methodOther?: string | null
  }

  export type CommuteUpdateManyMutationInput = {
    method?: EnumCommuteMethodFieldUpdateOperationsInput | $Enums.CommuteMethod
    methodOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommuteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    method?: EnumCommuteMethodFieldUpdateOperationsInput | $Enums.CommuteMethod
    methodOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkingTimeCreateInput = {
    shift: $Enums.ShiftType
    shiftOther?: string | null
    preference: string
    expectedStart?: Date | string | null
    expectedEnd?: Date | string | null
    resume: UserResumeCreateNestedOneWithoutWorkingTimesInput
  }

  export type WorkingTimeUncheckedCreateInput = {
    id?: number
    resumeId: number
    shift: $Enums.ShiftType
    shiftOther?: string | null
    preference: string
    expectedStart?: Date | string | null
    expectedEnd?: Date | string | null
  }

  export type WorkingTimeUpdateInput = {
    shift?: EnumShiftTypeFieldUpdateOperationsInput | $Enums.ShiftType
    shiftOther?: NullableStringFieldUpdateOperationsInput | string | null
    preference?: StringFieldUpdateOperationsInput | string
    expectedStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resume?: UserResumeUpdateOneRequiredWithoutWorkingTimesNestedInput
  }

  export type WorkingTimeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    shift?: EnumShiftTypeFieldUpdateOperationsInput | $Enums.ShiftType
    shiftOther?: NullableStringFieldUpdateOperationsInput | string | null
    preference?: StringFieldUpdateOperationsInput | string
    expectedStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkingTimeCreateManyInput = {
    id?: number
    resumeId: number
    shift: $Enums.ShiftType
    shiftOther?: string | null
    preference: string
    expectedStart?: Date | string | null
    expectedEnd?: Date | string | null
  }

  export type WorkingTimeUpdateManyMutationInput = {
    shift?: EnumShiftTypeFieldUpdateOperationsInput | $Enums.ShiftType
    shiftOther?: NullableStringFieldUpdateOperationsInput | string | null
    preference?: StringFieldUpdateOperationsInput | string
    expectedStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkingTimeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    shift?: EnumShiftTypeFieldUpdateOperationsInput | $Enums.ShiftType
    shiftOther?: NullableStringFieldUpdateOperationsInput | string | null
    preference?: StringFieldUpdateOperationsInput | string
    expectedStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkIdentityCreateInput = {
    identity: $Enums.WorkIdentityType
    identityOther?: string | null
    resume: UserResumeCreateNestedOneWithoutWorkIdentitiesInput
  }

  export type WorkIdentityUncheckedCreateInput = {
    id?: number
    resumeId: number
    identity: $Enums.WorkIdentityType
    identityOther?: string | null
  }

  export type WorkIdentityUpdateInput = {
    identity?: EnumWorkIdentityTypeFieldUpdateOperationsInput | $Enums.WorkIdentityType
    identityOther?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutWorkIdentitiesNestedInput
  }

  export type WorkIdentityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    identity?: EnumWorkIdentityTypeFieldUpdateOperationsInput | $Enums.WorkIdentityType
    identityOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkIdentityCreateManyInput = {
    id?: number
    resumeId: number
    identity: $Enums.WorkIdentityType
    identityOther?: string | null
  }

  export type WorkIdentityUpdateManyMutationInput = {
    identity?: EnumWorkIdentityTypeFieldUpdateOperationsInput | $Enums.WorkIdentityType
    identityOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkIdentityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    identity?: EnumWorkIdentityTypeFieldUpdateOperationsInput | $Enums.WorkIdentityType
    identityOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobTypeCreateInput = {
    type: $Enums.JobTypeEnum
    typeOther?: string | null
    resume: UserResumeCreateNestedOneWithoutJobPreferencesInput
  }

  export type JobTypeUncheckedCreateInput = {
    id?: number
    resumeId: number
    type: $Enums.JobTypeEnum
    typeOther?: string | null
  }

  export type JobTypeUpdateInput = {
    type?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    typeOther?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutJobPreferencesNestedInput
  }

  export type JobTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    type?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    typeOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobTypeCreateManyInput = {
    id?: number
    resumeId: number
    type: $Enums.JobTypeEnum
    typeOther?: string | null
  }

  export type JobTypeUpdateManyMutationInput = {
    type?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    typeOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    type?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    typeOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmergencyContactCreateInput = {
    firstName: string
    lastName: string
    phoneNumber: string
    relation: $Enums.ContactRelation
    relationOther?: string | null
    resume: UserResumeCreateNestedOneWithoutEmergencyContactsInput
  }

  export type EmergencyContactUncheckedCreateInput = {
    id?: number
    resumeId: number
    firstName: string
    lastName: string
    phoneNumber: string
    relation: $Enums.ContactRelation
    relationOther?: string | null
  }

  export type EmergencyContactUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    relation?: EnumContactRelationFieldUpdateOperationsInput | $Enums.ContactRelation
    relationOther?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutEmergencyContactsNestedInput
  }

  export type EmergencyContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    relation?: EnumContactRelationFieldUpdateOperationsInput | $Enums.ContactRelation
    relationOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmergencyContactCreateManyInput = {
    id?: number
    resumeId: number
    firstName: string
    lastName: string
    phoneNumber: string
    relation: $Enums.ContactRelation
    relationOther?: string | null
  }

  export type EmergencyContactUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    relation?: EnumContactRelationFieldUpdateOperationsInput | $Enums.ContactRelation
    relationOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmergencyContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    relation?: EnumContactRelationFieldUpdateOperationsInput | $Enums.ContactRelation
    relationOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BiographyCreateInput = {
    content: string
    resume: UserResumeCreateNestedOneWithoutBiographyInput
  }

  export type BiographyUncheckedCreateInput = {
    id?: number
    resumeId: number
    content: string
  }

  export type BiographyUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    resume?: UserResumeUpdateOneRequiredWithoutBiographyNestedInput
  }

  export type BiographyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type BiographyCreateManyInput = {
    id?: number
    resumeId: number
    content: string
  }

  export type BiographyUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
  }

  export type BiographyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PortfolioCreateInput = {
    externalUrl: string
    title?: string | null
    description?: string | null
    resume: UserResumeCreateNestedOneWithoutPortfolioInput
  }

  export type PortfolioUncheckedCreateInput = {
    id?: number
    resumeId: number
    externalUrl: string
    title?: string | null
    description?: string | null
  }

  export type PortfolioUpdateInput = {
    externalUrl?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutPortfolioNestedInput
  }

  export type PortfolioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    externalUrl?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PortfolioCreateManyInput = {
    id?: number
    resumeId: number
    externalUrl: string
    title?: string | null
    description?: string | null
  }

  export type PortfolioUpdateManyMutationInput = {
    externalUrl?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PortfolioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    externalUrl?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilePhotoCreateInput = {
    fileUrl: string
    type?: string | null
    resume: UserResumeCreateNestedOneWithoutProfilePhotosInput
  }

  export type ProfilePhotoUncheckedCreateInput = {
    id?: number
    resumeId: number
    fileUrl: string
    type?: string | null
  }

  export type ProfilePhotoUpdateInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutProfilePhotosNestedInput
  }

  export type ProfilePhotoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilePhotoCreateManyInput = {
    id?: number
    resumeId: number
    fileUrl: string
    type?: string | null
  }

  export type ProfilePhotoUpdateManyMutationInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilePhotoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResumeVersionCreateInput = {
    snapshot: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    version?: string | null
    note?: string | null
    isCurrent?: boolean
    resume: UserResumeCreateNestedOneWithoutResumeVersionsInput
  }

  export type ResumeVersionUncheckedCreateInput = {
    id?: number
    resumeId: number
    snapshot: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    version?: string | null
    note?: string | null
    isCurrent?: boolean
  }

  export type ResumeVersionUpdateInput = {
    snapshot?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    resume?: UserResumeUpdateOneRequiredWithoutResumeVersionsNestedInput
  }

  export type ResumeVersionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    snapshot?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResumeVersionCreateManyInput = {
    id?: number
    resumeId: number
    snapshot: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    version?: string | null
    note?: string | null
    isCurrent?: boolean
  }

  export type ResumeVersionUpdateManyMutationInput = {
    snapshot?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResumeVersionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    snapshot?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResumeVisibilityCreateInput = {
    isPublic?: boolean
    allowedAudience?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    resume: UserResumeCreateNestedOneWithoutResumeVisibilityInput
  }

  export type ResumeVisibilityUncheckedCreateInput = {
    id?: number
    resumeId: number
    isPublic?: boolean
    allowedAudience?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
  }

  export type ResumeVisibilityUpdateInput = {
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedAudience?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resume?: UserResumeUpdateOneRequiredWithoutResumeVisibilityNestedInput
  }

  export type ResumeVisibilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedAudience?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeVisibilityCreateManyInput = {
    id?: number
    resumeId: number
    isPublic?: boolean
    allowedAudience?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
  }

  export type ResumeVisibilityUpdateManyMutationInput = {
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedAudience?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeVisibilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedAudience?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeReviewStatusCreateInput = {
    viewerId: number
    viewerType: string
    viewedAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutResumeReviewStatusesInput
  }

  export type ResumeReviewStatusUncheckedCreateInput = {
    id?: number
    resumeId: number
    viewerId: number
    viewerType: string
    viewedAt?: Date | string
  }

  export type ResumeReviewStatusUpdateInput = {
    viewerId?: IntFieldUpdateOperationsInput | number
    viewerType?: StringFieldUpdateOperationsInput | string
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutResumeReviewStatusesNestedInput
  }

  export type ResumeReviewStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    viewerId?: IntFieldUpdateOperationsInput | number
    viewerType?: StringFieldUpdateOperationsInput | string
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewStatusCreateManyInput = {
    id?: number
    resumeId: number
    viewerId: number
    viewerType: string
    viewedAt?: Date | string
  }

  export type ResumeReviewStatusUpdateManyMutationInput = {
    viewerId?: IntFieldUpdateOperationsInput | number
    viewerType?: StringFieldUpdateOperationsInput | string
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    viewerId?: IntFieldUpdateOperationsInput | number
    viewerType?: StringFieldUpdateOperationsInput | string
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumePDFCreateInput = {
    fileUrl: string
    template?: string | null
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutResumePDFsInput
  }

  export type ResumePDFUncheckedCreateInput = {
    id?: number
    resumeId: number
    fileUrl: string
    template?: string | null
    createdAt?: Date | string
  }

  export type ResumePDFUpdateInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutResumePDFsNestedInput
  }

  export type ResumePDFUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumePDFCreateManyInput = {
    id?: number
    resumeId: number
    fileUrl: string
    template?: string | null
    createdAt?: Date | string
  }

  export type ResumePDFUpdateManyMutationInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumePDFUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserReviewLogCreateInput = {
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
    targetUser: UserCreateNestedOneWithoutUserReviewsReceivedInput
    reviewer: UserCreateNestedOneWithoutUserReviewsGivenInput
    tags?: UserReviewTagCreateNestedManyWithoutReviewInput
  }

  export type UserReviewLogUncheckedCreateInput = {
    id?: number
    targetUserId: number
    reviewerId: number
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
    tags?: UserReviewTagUncheckedCreateNestedManyWithoutReviewInput
  }

  export type UserReviewLogUpdateInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetUser?: UserUpdateOneRequiredWithoutUserReviewsReceivedNestedInput
    reviewer?: UserUpdateOneRequiredWithoutUserReviewsGivenNestedInput
    tags?: UserReviewTagUpdateManyWithoutReviewNestedInput
  }

  export type UserReviewLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: UserReviewTagUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type UserReviewLogCreateManyInput = {
    id?: number
    targetUserId: number
    reviewerId: number
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
  }

  export type UserReviewLogUpdateManyMutationInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserReviewLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewLogCreateInput = {
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutResumeReviewLogsInput
    reviewer: UserCreateNestedOneWithoutResumeReviewsGivenInput
    tags?: ResumeReviewTagCreateNestedManyWithoutReviewInput
  }

  export type ResumeReviewLogUncheckedCreateInput = {
    id?: number
    resumeId: number
    reviewerId: number
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
    tags?: ResumeReviewTagUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ResumeReviewLogUpdateInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutResumeReviewLogsNestedInput
    reviewer?: UserUpdateOneRequiredWithoutResumeReviewsGivenNestedInput
    tags?: ResumeReviewTagUpdateManyWithoutReviewNestedInput
  }

  export type ResumeReviewLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ResumeReviewTagUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ResumeReviewLogCreateManyInput = {
    id?: number
    resumeId: number
    reviewerId: number
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
  }

  export type ResumeReviewLogUpdateManyMutationInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserReviewTagCreateInput = {
    tag: ReviewTagOptionCreateNestedOneWithoutUserTagsInput
    review: UserReviewLogCreateNestedOneWithoutTagsInput
  }

  export type UserReviewTagUncheckedCreateInput = {
    id?: number
    tagId: number
    reviewId: number
  }

  export type UserReviewTagUpdateInput = {
    tag?: ReviewTagOptionUpdateOneRequiredWithoutUserTagsNestedInput
    review?: UserReviewLogUpdateOneRequiredWithoutTagsNestedInput
  }

  export type UserReviewTagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type UserReviewTagCreateManyInput = {
    id?: number
    tagId: number
    reviewId: number
  }

  export type UserReviewTagUpdateManyMutationInput = {

  }

  export type UserReviewTagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeReviewTagCreateInput = {
    tag: ReviewTagOptionCreateNestedOneWithoutResumeTagsInput
    review: ResumeReviewLogCreateNestedOneWithoutTagsInput
  }

  export type ResumeReviewTagUncheckedCreateInput = {
    id?: number
    tagId: number
    reviewId: number
  }

  export type ResumeReviewTagUpdateInput = {
    tag?: ReviewTagOptionUpdateOneRequiredWithoutResumeTagsNestedInput
    review?: ResumeReviewLogUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ResumeReviewTagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeReviewTagCreateManyInput = {
    id?: number
    tagId: number
    reviewId: number
  }

  export type ResumeReviewTagUpdateManyMutationInput = {

  }

  export type ResumeReviewTagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewTagOptionCreateInput = {
    label: string
    type?: string | null
    isPublic?: boolean
    resumeTags?: ResumeReviewTagCreateNestedManyWithoutTagInput
    userTags?: UserReviewTagCreateNestedManyWithoutTagInput
  }

  export type ReviewTagOptionUncheckedCreateInput = {
    id?: number
    label: string
    type?: string | null
    isPublic?: boolean
    resumeTags?: ResumeReviewTagUncheckedCreateNestedManyWithoutTagInput
    userTags?: UserReviewTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type ReviewTagOptionUpdateInput = {
    label?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    resumeTags?: ResumeReviewTagUpdateManyWithoutTagNestedInput
    userTags?: UserReviewTagUpdateManyWithoutTagNestedInput
  }

  export type ReviewTagOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    resumeTags?: ResumeReviewTagUncheckedUpdateManyWithoutTagNestedInput
    userTags?: UserReviewTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type ReviewTagOptionCreateManyInput = {
    id?: number
    label: string
    type?: string | null
    isPublic?: boolean
  }

  export type ReviewTagOptionUpdateManyMutationInput = {
    label?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReviewTagOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IpRecordCreateInput = {
    ipAddress: string
    location?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutIpRecordsInput
  }

  export type IpRecordUncheckedCreateInput = {
    id?: number
    userId: number
    ipAddress: string
    location?: string | null
    createdAt?: Date | string
  }

  export type IpRecordUpdateInput = {
    ipAddress?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutIpRecordsNestedInput
  }

  export type IpRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    ipAddress?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpRecordCreateManyInput = {
    id?: number
    userId: number
    ipAddress: string
    location?: string | null
    createdAt?: Date | string
  }

  export type IpRecordUpdateManyMutationInput = {
    ipAddress?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    ipAddress?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRecordCreateInput = {
    deviceInfo: string
    platform?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutDeviceRecordsInput
  }

  export type DeviceRecordUncheckedCreateInput = {
    id?: number
    userId: number
    deviceInfo: string
    platform?: string | null
    createdAt?: Date | string
  }

  export type DeviceRecordUpdateInput = {
    deviceInfo?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDeviceRecordsNestedInput
  }

  export type DeviceRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    deviceInfo?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRecordCreateManyInput = {
    id?: number
    userId: number
    deviceInfo: string
    platform?: string | null
    createdAt?: Date | string
  }

  export type DeviceRecordUpdateManyMutationInput = {
    deviceInfo?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    deviceInfo?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountHistoryLogCreateInput = {
    action: string
    note?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAccountActionsReceivedInput
    operatedBy?: UserCreateNestedOneWithoutAccountActionsTakenInput
  }

  export type AccountHistoryLogUncheckedCreateInput = {
    id?: number
    userId: number
    operatorId?: number | null
    action: string
    note?: string | null
    createdAt?: Date | string
  }

  export type AccountHistoryLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountActionsReceivedNestedInput
    operatedBy?: UserUpdateOneWithoutAccountActionsTakenNestedInput
  }

  export type AccountHistoryLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    operatorId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountHistoryLogCreateManyInput = {
    id?: number
    userId: number
    operatorId?: number | null
    action: string
    note?: string | null
    createdAt?: Date | string
  }

  export type AccountHistoryLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountHistoryLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    operatorId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserResumeScalarRelationFilter = {
    is?: UserResumeWhereInput
    isNot?: UserResumeWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ResumeAccessGrantResumeIdGrantedToIdCompoundUniqueInput = {
    resumeId: number
    grantedToId: number
  }

  export type ResumeAccessGrantCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    grantedToId?: SortOrder
    grantedById?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeAccessGrantAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    grantedToId?: SortOrder
    grantedById?: SortOrder
  }

  export type ResumeAccessGrantMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    grantedToId?: SortOrder
    grantedById?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeAccessGrantMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    grantedToId?: SortOrder
    grantedById?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeAccessGrantSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    grantedToId?: SortOrder
    grantedById?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ResumeViewLogCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    userViewedById?: SortOrder
    resumeId?: SortOrder
    viewedAt?: SortOrder
  }

  export type ResumeViewLogAvgOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    userViewedById?: SortOrder
    resumeId?: SortOrder
  }

  export type ResumeViewLogMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    userViewedById?: SortOrder
    resumeId?: SortOrder
    viewedAt?: SortOrder
  }

  export type ResumeViewLogMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    userViewedById?: SortOrder
    resumeId?: SortOrder
    viewedAt?: SortOrder
  }

  export type ResumeViewLogSumOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    userViewedById?: SortOrder
    resumeId?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumCompanyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyType | EnumCompanyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyType[] | ListEnumCompanyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyType[] | ListEnumCompanyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyTypeFilter<$PrismaModel> | $Enums.CompanyType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserResumeListRelationFilter = {
    every?: UserResumeWhereInput
    some?: UserResumeWhereInput
    none?: UserResumeWhereInput
  }

  export type AttendanceLogListRelationFilter = {
    every?: AttendanceLogWhereInput
    some?: AttendanceLogWhereInput
    none?: AttendanceLogWhereInput
  }

  export type ShiftScheduleListRelationFilter = {
    every?: ShiftScheduleWhereInput
    some?: ShiftScheduleWhereInput
    none?: ShiftScheduleWhereInput
  }

  export type PaySlipListRelationFilter = {
    every?: PaySlipWhereInput
    some?: PaySlipWhereInput
    none?: PaySlipWhereInput
  }

  export type JobPostingListRelationFilter = {
    every?: JobPostingWhereInput
    some?: JobPostingWhereInput
    none?: JobPostingWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserResumeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShiftScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaySlipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobPostingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    isActive?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    isActive?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    isActive?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumCompanyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyType | EnumCompanyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyType[] | ListEnumCompanyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyType[] | ListEnumCompanyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyTypeWithAggregatesFilter<$PrismaModel> | $Enums.CompanyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyTypeFilter<$PrismaModel>
    _max?: NestedEnumCompanyTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CompanyScalarRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type ShiftScheduleNullableScalarRelationFilter = {
    is?: ShiftScheduleWhereInput | null
    isNot?: ShiftScheduleWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AttendanceLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
    note?: SortOrder
    scheduleId?: SortOrder
  }

  export type AttendanceLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    scheduleId?: SortOrder
  }

  export type AttendanceLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
    note?: SortOrder
    scheduleId?: SortOrder
  }

  export type AttendanceLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
    note?: SortOrder
    scheduleId?: SortOrder
  }

  export type AttendanceLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    scheduleId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ShiftScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    shiftDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    note?: SortOrder
  }

  export type ShiftScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type ShiftScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    shiftDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    note?: SortOrder
  }

  export type ShiftScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    shiftDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    note?: SortOrder
  }

  export type ShiftScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type PaySlipCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    issuedById?: SortOrder
    companyId?: SortOrder
    month?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type PaySlipAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    issuedById?: SortOrder
    companyId?: SortOrder
    amount?: SortOrder
  }

  export type PaySlipMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    issuedById?: SortOrder
    companyId?: SortOrder
    month?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type PaySlipMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    issuedById?: SortOrder
    companyId?: SortOrder
    month?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type PaySlipSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    issuedById?: SortOrder
    companyId?: SortOrder
    amount?: SortOrder
  }

  export type EnumJobTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.JobTypeEnum | EnumJobTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.JobTypeEnum[] | ListEnumJobTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobTypeEnum[] | ListEnumJobTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeEnumFilter<$PrismaModel> | $Enums.JobTypeEnum
  }

  export type JobApplicationListRelationFilter = {
    every?: JobApplicationWhereInput
    some?: JobApplicationWhereInput
    none?: JobApplicationWhereInput
  }

  export type JobApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobPostingCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    jobType?: SortOrder
    salaryRange?: SortOrder
    isActive?: SortOrder
    postedAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type JobPostingAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
  }

  export type JobPostingMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    jobType?: SortOrder
    salaryRange?: SortOrder
    isActive?: SortOrder
    postedAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type JobPostingMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    jobType?: SortOrder
    salaryRange?: SortOrder
    isActive?: SortOrder
    postedAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type JobPostingSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
  }

  export type EnumJobTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobTypeEnum | EnumJobTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.JobTypeEnum[] | ListEnumJobTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobTypeEnum[] | ListEnumJobTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.JobTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumJobTypeEnumFilter<$PrismaModel>
  }

  export type JobPostingScalarRelationFilter = {
    is?: JobPostingWhereInput
    isNot?: JobPostingWhereInput
  }

  export type JobApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    resumeId?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    note?: SortOrder
  }

  export type JobApplicationAvgOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    resumeId?: SortOrder
  }

  export type JobApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    resumeId?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    note?: SortOrder
  }

  export type JobApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    resumeId?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    note?: SortOrder
  }

  export type JobApplicationSumOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    resumeId?: SortOrder
  }

  export type MessageLogListRelationFilter = {
    every?: MessageLogWhereInput
    some?: MessageLogWhereInput
    none?: MessageLogWhereInput
  }

  export type MessageLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageThreadCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageThreadAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdById?: SortOrder
  }

  export type MessageThreadMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageThreadMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageThreadSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdById?: SortOrder
  }

  export type MessageThreadScalarRelationFilter = {
    is?: MessageThreadWhereInput
    isNot?: MessageThreadWhereInput
  }

  export type MessageLogCountOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
  }

  export type MessageLogAvgOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
  }

  export type MessageLogMaxOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
  }

  export type MessageLogMinOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
  }

  export type MessageLogSumOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type LanguageListRelationFilter = {
    every?: LanguageWhereInput
    some?: LanguageWhereInput
    none?: LanguageWhereInput
  }

  export type EducationListRelationFilter = {
    every?: EducationWhereInput
    some?: EducationWhereInput
    none?: EducationWhereInput
  }

  export type ExperienceListRelationFilter = {
    every?: ExperienceWhereInput
    some?: ExperienceWhereInput
    none?: ExperienceWhereInput
  }

  export type SkillListRelationFilter = {
    every?: SkillWhereInput
    some?: SkillWhereInput
    none?: SkillWhereInput
  }

  export type CertificateListRelationFilter = {
    every?: CertificateWhereInput
    some?: CertificateWhereInput
    none?: CertificateWhereInput
  }

  export type TraitListRelationFilter = {
    every?: TraitWhereInput
    some?: TraitWhereInput
    none?: TraitWhereInput
  }

  export type CommuteListRelationFilter = {
    every?: CommuteWhereInput
    some?: CommuteWhereInput
    none?: CommuteWhereInput
  }

  export type WorkingTimeListRelationFilter = {
    every?: WorkingTimeWhereInput
    some?: WorkingTimeWhereInput
    none?: WorkingTimeWhereInput
  }

  export type WorkIdentityListRelationFilter = {
    every?: WorkIdentityWhereInput
    some?: WorkIdentityWhereInput
    none?: WorkIdentityWhereInput
  }

  export type JobTypeListRelationFilter = {
    every?: JobTypeWhereInput
    some?: JobTypeWhereInput
    none?: JobTypeWhereInput
  }

  export type EmergencyContactListRelationFilter = {
    every?: EmergencyContactWhereInput
    some?: EmergencyContactWhereInput
    none?: EmergencyContactWhereInput
  }

  export type BiographyNullableScalarRelationFilter = {
    is?: BiographyWhereInput | null
    isNot?: BiographyWhereInput | null
  }

  export type PortfolioListRelationFilter = {
    every?: PortfolioWhereInput
    some?: PortfolioWhereInput
    none?: PortfolioWhereInput
  }

  export type ProfilePhotoListRelationFilter = {
    every?: ProfilePhotoWhereInput
    some?: ProfilePhotoWhereInput
    none?: ProfilePhotoWhereInput
  }

  export type ResumeVersionListRelationFilter = {
    every?: ResumeVersionWhereInput
    some?: ResumeVersionWhereInput
    none?: ResumeVersionWhereInput
  }

  export type ResumeVisibilityNullableScalarRelationFilter = {
    is?: ResumeVisibilityWhereInput | null
    isNot?: ResumeVisibilityWhereInput | null
  }

  export type ResumeReviewStatusListRelationFilter = {
    every?: ResumeReviewStatusWhereInput
    some?: ResumeReviewStatusWhereInput
    none?: ResumeReviewStatusWhereInput
  }

  export type ResumeViewLogListRelationFilter = {
    every?: ResumeViewLogWhereInput
    some?: ResumeViewLogWhereInput
    none?: ResumeViewLogWhereInput
  }

  export type ResumePDFListRelationFilter = {
    every?: ResumePDFWhereInput
    some?: ResumePDFWhereInput
    none?: ResumePDFWhereInput
  }

  export type ResumeReviewLogListRelationFilter = {
    every?: ResumeReviewLogWhereInput
    some?: ResumeReviewLogWhereInput
    none?: ResumeReviewLogWhereInput
  }

  export type MessageThreadListRelationFilter = {
    every?: MessageThreadWhereInput
    some?: MessageThreadWhereInput
    none?: MessageThreadWhereInput
  }

  export type ResumeAccessGrantListRelationFilter = {
    every?: ResumeAccessGrantWhereInput
    some?: ResumeAccessGrantWhereInput
    none?: ResumeAccessGrantWhereInput
  }

  export type LanguageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EducationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExperienceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TraitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommuteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkingTimeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkIdentityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmergencyContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PortfolioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfilePhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeReviewStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeViewLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumePDFOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeReviewLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageThreadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeAccessGrantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserResumeUserIdIsPrimaryCompoundUniqueInput = {
    userId: number
    isPrimary: boolean
  }

  export type UserResumeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    isPrimary?: SortOrder
    title?: SortOrder
    companyId?: SortOrder
    identityNumber?: SortOrder
    workPermit?: SortOrder
    passport?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    profilePicture?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    englishName?: SortOrder
    nickname?: SortOrder
    mailCountry?: SortOrder
    mailCity?: SortOrder
    mailDistrict?: SortOrder
    mailAddress?: SortOrder
    residentialCountry?: SortOrder
    residentialCity?: SortOrder
    residentialDistrict?: SortOrder
    residentialAddress?: SortOrder
    isRegistered?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserResumeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type UserResumeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    isPrimary?: SortOrder
    title?: SortOrder
    companyId?: SortOrder
    identityNumber?: SortOrder
    workPermit?: SortOrder
    passport?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    profilePicture?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    englishName?: SortOrder
    nickname?: SortOrder
    mailCountry?: SortOrder
    mailCity?: SortOrder
    mailDistrict?: SortOrder
    mailAddress?: SortOrder
    residentialCountry?: SortOrder
    residentialCity?: SortOrder
    residentialDistrict?: SortOrder
    residentialAddress?: SortOrder
    isRegistered?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserResumeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    isPrimary?: SortOrder
    title?: SortOrder
    companyId?: SortOrder
    identityNumber?: SortOrder
    workPermit?: SortOrder
    passport?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    profilePicture?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    englishName?: SortOrder
    nickname?: SortOrder
    mailCountry?: SortOrder
    mailCity?: SortOrder
    mailDistrict?: SortOrder
    mailAddress?: SortOrder
    residentialCountry?: SortOrder
    residentialCity?: SortOrder
    residentialDistrict?: SortOrder
    residentialAddress?: SortOrder
    isRegistered?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserResumeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type EnumLanguageLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LanguageLevel | EnumLanguageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageLevelFilter<$PrismaModel> | $Enums.LanguageLevel
  }

  export type LanguageCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    level?: SortOrder
    levelOther?: SortOrder
  }

  export type LanguageAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type LanguageMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    level?: SortOrder
    levelOther?: SortOrder
  }

  export type LanguageMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    level?: SortOrder
    levelOther?: SortOrder
  }

  export type LanguageSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumLanguageLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LanguageLevel | EnumLanguageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageLevelWithAggregatesFilter<$PrismaModel> | $Enums.LanguageLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageLevelFilter<$PrismaModel>
    _max?: NestedEnumLanguageLevelFilter<$PrismaModel>
  }

  export type EnumEducationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EducationStatus | EnumEducationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EducationStatus[] | ListEnumEducationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EducationStatus[] | ListEnumEducationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEducationStatusFilter<$PrismaModel> | $Enums.EducationStatus
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    school?: SortOrder
    department?: SortOrder
    status?: SortOrder
    statusOther?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type EducationAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    school?: SortOrder
    department?: SortOrder
    status?: SortOrder
    statusOther?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    school?: SortOrder
    department?: SortOrder
    status?: SortOrder
    statusOther?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type EducationSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumEducationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EducationStatus | EnumEducationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EducationStatus[] | ListEnumEducationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EducationStatus[] | ListEnumEducationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEducationStatusWithAggregatesFilter<$PrismaModel> | $Enums.EducationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEducationStatusFilter<$PrismaModel>
    _max?: NestedEnumEducationStatusFilter<$PrismaModel>
  }

  export type ExperienceCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    company?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
  }

  export type ExperienceAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type ExperienceMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    company?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
  }

  export type ExperienceMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    company?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
  }

  export type ExperienceSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
  }

  export type SkillAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
  }

  export type SkillSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type CertificateCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    expiry?: SortOrder
  }

  export type CertificateAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type CertificateMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    expiry?: SortOrder
  }

  export type CertificateMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    expiry?: SortOrder
  }

  export type CertificateSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type TraitCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    personality?: SortOrder
    interest?: SortOrder
  }

  export type TraitAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type TraitMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    personality?: SortOrder
    interest?: SortOrder
  }

  export type TraitMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    personality?: SortOrder
    interest?: SortOrder
  }

  export type TraitSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumCommuteMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.CommuteMethod | EnumCommuteMethodFieldRefInput<$PrismaModel>
    in?: $Enums.CommuteMethod[] | ListEnumCommuteMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommuteMethod[] | ListEnumCommuteMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumCommuteMethodFilter<$PrismaModel> | $Enums.CommuteMethod
  }

  export type CommuteCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    method?: SortOrder
    methodOther?: SortOrder
  }

  export type CommuteAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type CommuteMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    method?: SortOrder
    methodOther?: SortOrder
  }

  export type CommuteMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    method?: SortOrder
    methodOther?: SortOrder
  }

  export type CommuteSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumCommuteMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommuteMethod | EnumCommuteMethodFieldRefInput<$PrismaModel>
    in?: $Enums.CommuteMethod[] | ListEnumCommuteMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommuteMethod[] | ListEnumCommuteMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumCommuteMethodWithAggregatesFilter<$PrismaModel> | $Enums.CommuteMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommuteMethodFilter<$PrismaModel>
    _max?: NestedEnumCommuteMethodFilter<$PrismaModel>
  }

  export type EnumShiftTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ShiftType | EnumShiftTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ShiftType[] | ListEnumShiftTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShiftType[] | ListEnumShiftTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftTypeFilter<$PrismaModel> | $Enums.ShiftType
  }

  export type WorkingTimeCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shift?: SortOrder
    shiftOther?: SortOrder
    preference?: SortOrder
    expectedStart?: SortOrder
    expectedEnd?: SortOrder
  }

  export type WorkingTimeAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type WorkingTimeMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shift?: SortOrder
    shiftOther?: SortOrder
    preference?: SortOrder
    expectedStart?: SortOrder
    expectedEnd?: SortOrder
  }

  export type WorkingTimeMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shift?: SortOrder
    shiftOther?: SortOrder
    preference?: SortOrder
    expectedStart?: SortOrder
    expectedEnd?: SortOrder
  }

  export type WorkingTimeSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumShiftTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShiftType | EnumShiftTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ShiftType[] | ListEnumShiftTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShiftType[] | ListEnumShiftTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftTypeWithAggregatesFilter<$PrismaModel> | $Enums.ShiftType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShiftTypeFilter<$PrismaModel>
    _max?: NestedEnumShiftTypeFilter<$PrismaModel>
  }

  export type EnumWorkIdentityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkIdentityType | EnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkIdentityType[] | ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkIdentityType[] | ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkIdentityTypeFilter<$PrismaModel> | $Enums.WorkIdentityType
  }

  export type WorkIdentityCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    identity?: SortOrder
    identityOther?: SortOrder
  }

  export type WorkIdentityAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type WorkIdentityMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    identity?: SortOrder
    identityOther?: SortOrder
  }

  export type WorkIdentityMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    identity?: SortOrder
    identityOther?: SortOrder
  }

  export type WorkIdentitySumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumWorkIdentityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkIdentityType | EnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkIdentityType[] | ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkIdentityType[] | ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkIdentityTypeWithAggregatesFilter<$PrismaModel> | $Enums.WorkIdentityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkIdentityTypeFilter<$PrismaModel>
    _max?: NestedEnumWorkIdentityTypeFilter<$PrismaModel>
  }

  export type JobTypeCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    type?: SortOrder
    typeOther?: SortOrder
  }

  export type JobTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type JobTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    type?: SortOrder
    typeOther?: SortOrder
  }

  export type JobTypeMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    type?: SortOrder
    typeOther?: SortOrder
  }

  export type JobTypeSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumContactRelationFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactRelation | EnumContactRelationFieldRefInput<$PrismaModel>
    in?: $Enums.ContactRelation[] | ListEnumContactRelationFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactRelation[] | ListEnumContactRelationFieldRefInput<$PrismaModel>
    not?: NestedEnumContactRelationFilter<$PrismaModel> | $Enums.ContactRelation
  }

  export type EmergencyContactCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    relation?: SortOrder
    relationOther?: SortOrder
  }

  export type EmergencyContactAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EmergencyContactMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    relation?: SortOrder
    relationOther?: SortOrder
  }

  export type EmergencyContactMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    relation?: SortOrder
    relationOther?: SortOrder
  }

  export type EmergencyContactSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumContactRelationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactRelation | EnumContactRelationFieldRefInput<$PrismaModel>
    in?: $Enums.ContactRelation[] | ListEnumContactRelationFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactRelation[] | ListEnumContactRelationFieldRefInput<$PrismaModel>
    not?: NestedEnumContactRelationWithAggregatesFilter<$PrismaModel> | $Enums.ContactRelation
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContactRelationFilter<$PrismaModel>
    _max?: NestedEnumContactRelationFilter<$PrismaModel>
  }

  export type BiographyCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    content?: SortOrder
  }

  export type BiographyAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type BiographyMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    content?: SortOrder
  }

  export type BiographyMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    content?: SortOrder
  }

  export type BiographySumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type PortfolioCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    externalUrl?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type PortfolioAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type PortfolioMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    externalUrl?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type PortfolioMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    externalUrl?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type PortfolioSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type ProfilePhotoCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    type?: SortOrder
  }

  export type ProfilePhotoAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type ProfilePhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    type?: SortOrder
  }

  export type ProfilePhotoMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    type?: SortOrder
  }

  export type ProfilePhotoSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ResumeVersionCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    snapshot?: SortOrder
    createdAt?: SortOrder
    version?: SortOrder
    note?: SortOrder
    isCurrent?: SortOrder
  }

  export type ResumeVersionAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type ResumeVersionMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdAt?: SortOrder
    version?: SortOrder
    note?: SortOrder
    isCurrent?: SortOrder
  }

  export type ResumeVersionMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    createdAt?: SortOrder
    version?: SortOrder
    note?: SortOrder
    isCurrent?: SortOrder
  }

  export type ResumeVersionSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ResumeVisibilityCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    isPublic?: SortOrder
    allowedAudience?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type ResumeVisibilityAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type ResumeVisibilityMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    isPublic?: SortOrder
    allowedAudience?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type ResumeVisibilityMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    isPublic?: SortOrder
    allowedAudience?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type ResumeVisibilitySumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type ResumeReviewStatusResumeIdViewerIdViewerTypeCompoundUniqueInput = {
    resumeId: number
    viewerId: number
    viewerType: string
  }

  export type ResumeReviewStatusCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    viewerId?: SortOrder
    viewerType?: SortOrder
    viewedAt?: SortOrder
  }

  export type ResumeReviewStatusAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    viewerId?: SortOrder
  }

  export type ResumeReviewStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    viewerId?: SortOrder
    viewerType?: SortOrder
    viewedAt?: SortOrder
  }

  export type ResumeReviewStatusMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    viewerId?: SortOrder
    viewerType?: SortOrder
    viewedAt?: SortOrder
  }

  export type ResumeReviewStatusSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    viewerId?: SortOrder
  }

  export type ResumePDFCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    template?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumePDFAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type ResumePDFMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    template?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumePDFMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    fileUrl?: SortOrder
    template?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumePDFSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type UserReviewTagListRelationFilter = {
    every?: UserReviewTagWhereInput
    some?: UserReviewTagWhereInput
    none?: UserReviewTagWhereInput
  }

  export type UserReviewTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserReviewLogCountOrderByAggregateInput = {
    id?: SortOrder
    targetUserId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
    reviewType?: SortOrder
    isBlacklisted?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type UserReviewLogAvgOrderByAggregateInput = {
    id?: SortOrder
    targetUserId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
  }

  export type UserReviewLogMaxOrderByAggregateInput = {
    id?: SortOrder
    targetUserId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
    reviewType?: SortOrder
    isBlacklisted?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type UserReviewLogMinOrderByAggregateInput = {
    id?: SortOrder
    targetUserId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
    reviewType?: SortOrder
    isBlacklisted?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type UserReviewLogSumOrderByAggregateInput = {
    id?: SortOrder
    targetUserId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
  }

  export type EnumReviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewStatusFilter<$PrismaModel> | $Enums.ReviewStatus
  }

  export type ResumeReviewTagListRelationFilter = {
    every?: ResumeReviewTagWhereInput
    some?: ResumeReviewTagWhereInput
    none?: ResumeReviewTagWhereInput
  }

  export type ResumeReviewTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeReviewLogCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeReviewLogAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
  }

  export type ResumeReviewLogMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeReviewLogMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeReviewLogSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    reviewerId?: SortOrder
    score?: SortOrder
  }

  export type EnumReviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewStatusFilter<$PrismaModel>
    _max?: NestedEnumReviewStatusFilter<$PrismaModel>
  }

  export type ReviewTagOptionScalarRelationFilter = {
    is?: ReviewTagOptionWhereInput
    isNot?: ReviewTagOptionWhereInput
  }

  export type UserReviewLogScalarRelationFilter = {
    is?: UserReviewLogWhereInput
    isNot?: UserReviewLogWhereInput
  }

  export type UserReviewTagCountOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type UserReviewTagAvgOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type UserReviewTagMaxOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type UserReviewTagMinOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type UserReviewTagSumOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type ResumeReviewLogScalarRelationFilter = {
    is?: ResumeReviewLogWhereInput
    isNot?: ResumeReviewLogWhereInput
  }

  export type ResumeReviewTagCountOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type ResumeReviewTagAvgOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type ResumeReviewTagMaxOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type ResumeReviewTagMinOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type ResumeReviewTagSumOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    reviewId?: SortOrder
  }

  export type ReviewTagOptionCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrder
    isPublic?: SortOrder
  }

  export type ReviewTagOptionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReviewTagOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrder
    isPublic?: SortOrder
  }

  export type ReviewTagOptionMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrder
    isPublic?: SortOrder
  }

  export type ReviewTagOptionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type CompanyNullableScalarRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type UserResumeNullableScalarRelationFilter = {
    is?: UserResumeWhereInput | null
    isNot?: UserResumeWhereInput | null
  }

  export type IpRecordListRelationFilter = {
    every?: IpRecordWhereInput
    some?: IpRecordWhereInput
    none?: IpRecordWhereInput
  }

  export type DeviceRecordListRelationFilter = {
    every?: DeviceRecordWhereInput
    some?: DeviceRecordWhereInput
    none?: DeviceRecordWhereInput
  }

  export type UserReviewLogListRelationFilter = {
    every?: UserReviewLogWhereInput
    some?: UserReviewLogWhereInput
    none?: UserReviewLogWhereInput
  }

  export type AccountHistoryLogListRelationFilter = {
    every?: AccountHistoryLogWhereInput
    some?: AccountHistoryLogWhereInput
    none?: AccountHistoryLogWhereInput
  }

  export type IpRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserReviewLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountHistoryLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    googleId?: SortOrder
    facebookId?: SortOrder
    lineId?: SortOrder
    lastLogin?: SortOrder
    lastLoginIp?: SortOrder
    skipRegistration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    isAnonymized?: SortOrder
    deletionReason?: SortOrder
    companyId?: SortOrder
    role?: SortOrder
    resumeId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    resumeId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    googleId?: SortOrder
    facebookId?: SortOrder
    lineId?: SortOrder
    lastLogin?: SortOrder
    lastLoginIp?: SortOrder
    skipRegistration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    isAnonymized?: SortOrder
    deletionReason?: SortOrder
    companyId?: SortOrder
    role?: SortOrder
    resumeId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    googleId?: SortOrder
    facebookId?: SortOrder
    lineId?: SortOrder
    lastLogin?: SortOrder
    lastLoginIp?: SortOrder
    skipRegistration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    isAnonymized?: SortOrder
    deletionReason?: SortOrder
    companyId?: SortOrder
    role?: SortOrder
    resumeId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    resumeId?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type IpRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
  }

  export type IpRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IpRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
  }

  export type IpRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
  }

  export type IpRecordSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DeviceRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    deviceInfo?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
  }

  export type DeviceRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DeviceRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    deviceInfo?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
  }

  export type DeviceRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    deviceInfo?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
  }

  export type DeviceRecordSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AccountHistoryLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    operatorId?: SortOrder
    action?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountHistoryLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    operatorId?: SortOrder
  }

  export type AccountHistoryLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    operatorId?: SortOrder
    action?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountHistoryLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    operatorId?: SortOrder
    action?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountHistoryLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    operatorId?: SortOrder
  }

  export type UserResumeCreateNestedOneWithoutAccessGrantsInput = {
    create?: XOR<UserResumeCreateWithoutAccessGrantsInput, UserResumeUncheckedCreateWithoutAccessGrantsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutAccessGrantsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResumesGrantedToMeInput = {
    create?: XOR<UserCreateWithoutResumesGrantedToMeInput, UserUncheckedCreateWithoutResumesGrantedToMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesGrantedToMeInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResumesGrantedByMeInput = {
    create?: XOR<UserCreateWithoutResumesGrantedByMeInput, UserUncheckedCreateWithoutResumesGrantedByMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesGrantedByMeInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserResumeUpdateOneRequiredWithoutAccessGrantsNestedInput = {
    create?: XOR<UserResumeCreateWithoutAccessGrantsInput, UserResumeUncheckedCreateWithoutAccessGrantsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutAccessGrantsInput
    upsert?: UserResumeUpsertWithoutAccessGrantsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutAccessGrantsInput, UserResumeUpdateWithoutAccessGrantsInput>, UserResumeUncheckedUpdateWithoutAccessGrantsInput>
  }

  export type UserUpdateOneRequiredWithoutResumesGrantedToMeNestedInput = {
    create?: XOR<UserCreateWithoutResumesGrantedToMeInput, UserUncheckedCreateWithoutResumesGrantedToMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesGrantedToMeInput
    upsert?: UserUpsertWithoutResumesGrantedToMeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumesGrantedToMeInput, UserUpdateWithoutResumesGrantedToMeInput>, UserUncheckedUpdateWithoutResumesGrantedToMeInput>
  }

  export type UserUpdateOneRequiredWithoutResumesGrantedByMeNestedInput = {
    create?: XOR<UserCreateWithoutResumesGrantedByMeInput, UserUncheckedCreateWithoutResumesGrantedByMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesGrantedByMeInput
    upsert?: UserUpsertWithoutResumesGrantedByMeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumesGrantedByMeInput, UserUpdateWithoutResumesGrantedByMeInput>, UserUncheckedUpdateWithoutResumesGrantedByMeInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutResumeViewLogsInput = {
    create?: XOR<UserCreateWithoutResumeViewLogsInput, UserUncheckedCreateWithoutResumeViewLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeViewLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResumesUserViewedInput = {
    create?: XOR<UserCreateWithoutResumesUserViewedInput, UserUncheckedCreateWithoutResumesUserViewedInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesUserViewedInput
    connect?: UserWhereUniqueInput
  }

  export type UserResumeCreateNestedOneWithoutResumeViewLogsInput = {
    create?: XOR<UserResumeCreateWithoutResumeViewLogsInput, UserResumeUncheckedCreateWithoutResumeViewLogsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeViewLogsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutResumeViewLogsNestedInput = {
    create?: XOR<UserCreateWithoutResumeViewLogsInput, UserUncheckedCreateWithoutResumeViewLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeViewLogsInput
    upsert?: UserUpsertWithoutResumeViewLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumeViewLogsInput, UserUpdateWithoutResumeViewLogsInput>, UserUncheckedUpdateWithoutResumeViewLogsInput>
  }

  export type UserUpdateOneRequiredWithoutResumesUserViewedNestedInput = {
    create?: XOR<UserCreateWithoutResumesUserViewedInput, UserUncheckedCreateWithoutResumesUserViewedInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesUserViewedInput
    upsert?: UserUpsertWithoutResumesUserViewedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumesUserViewedInput, UserUpdateWithoutResumesUserViewedInput>, UserUncheckedUpdateWithoutResumesUserViewedInput>
  }

  export type UserResumeUpdateOneRequiredWithoutResumeViewLogsNestedInput = {
    create?: XOR<UserResumeCreateWithoutResumeViewLogsInput, UserResumeUncheckedCreateWithoutResumeViewLogsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeViewLogsInput
    upsert?: UserResumeUpsertWithoutResumeViewLogsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutResumeViewLogsInput, UserResumeUpdateWithoutResumeViewLogsInput>, UserResumeUncheckedUpdateWithoutResumeViewLogsInput>
  }

  export type UserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserResumeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserResumeCreateWithoutCompanyInput, UserResumeUncheckedCreateWithoutCompanyInput> | UserResumeCreateWithoutCompanyInput[] | UserResumeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserResumeCreateOrConnectWithoutCompanyInput | UserResumeCreateOrConnectWithoutCompanyInput[]
    createMany?: UserResumeCreateManyCompanyInputEnvelope
    connect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
  }

  export type AttendanceLogCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AttendanceLogCreateWithoutCompanyInput, AttendanceLogUncheckedCreateWithoutCompanyInput> | AttendanceLogCreateWithoutCompanyInput[] | AttendanceLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutCompanyInput | AttendanceLogCreateOrConnectWithoutCompanyInput[]
    createMany?: AttendanceLogCreateManyCompanyInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type ShiftScheduleCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ShiftScheduleCreateWithoutCompanyInput, ShiftScheduleUncheckedCreateWithoutCompanyInput> | ShiftScheduleCreateWithoutCompanyInput[] | ShiftScheduleUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutCompanyInput | ShiftScheduleCreateOrConnectWithoutCompanyInput[]
    createMany?: ShiftScheduleCreateManyCompanyInputEnvelope
    connect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
  }

  export type PaySlipCreateNestedManyWithoutIssuedByInput = {
    create?: XOR<PaySlipCreateWithoutIssuedByInput, PaySlipUncheckedCreateWithoutIssuedByInput> | PaySlipCreateWithoutIssuedByInput[] | PaySlipUncheckedCreateWithoutIssuedByInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutIssuedByInput | PaySlipCreateOrConnectWithoutIssuedByInput[]
    createMany?: PaySlipCreateManyIssuedByInputEnvelope
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
  }

  export type JobPostingCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput> | JobPostingCreateWithoutCompanyInput[] | JobPostingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutCompanyInput | JobPostingCreateOrConnectWithoutCompanyInput[]
    createMany?: JobPostingCreateManyCompanyInputEnvelope
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserResumeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserResumeCreateWithoutCompanyInput, UserResumeUncheckedCreateWithoutCompanyInput> | UserResumeCreateWithoutCompanyInput[] | UserResumeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserResumeCreateOrConnectWithoutCompanyInput | UserResumeCreateOrConnectWithoutCompanyInput[]
    createMany?: UserResumeCreateManyCompanyInputEnvelope
    connect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
  }

  export type AttendanceLogUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AttendanceLogCreateWithoutCompanyInput, AttendanceLogUncheckedCreateWithoutCompanyInput> | AttendanceLogCreateWithoutCompanyInput[] | AttendanceLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutCompanyInput | AttendanceLogCreateOrConnectWithoutCompanyInput[]
    createMany?: AttendanceLogCreateManyCompanyInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type ShiftScheduleUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ShiftScheduleCreateWithoutCompanyInput, ShiftScheduleUncheckedCreateWithoutCompanyInput> | ShiftScheduleCreateWithoutCompanyInput[] | ShiftScheduleUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutCompanyInput | ShiftScheduleCreateOrConnectWithoutCompanyInput[]
    createMany?: ShiftScheduleCreateManyCompanyInputEnvelope
    connect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
  }

  export type PaySlipUncheckedCreateNestedManyWithoutIssuedByInput = {
    create?: XOR<PaySlipCreateWithoutIssuedByInput, PaySlipUncheckedCreateWithoutIssuedByInput> | PaySlipCreateWithoutIssuedByInput[] | PaySlipUncheckedCreateWithoutIssuedByInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutIssuedByInput | PaySlipCreateOrConnectWithoutIssuedByInput[]
    createMany?: PaySlipCreateManyIssuedByInputEnvelope
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
  }

  export type JobPostingUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput> | JobPostingCreateWithoutCompanyInput[] | JobPostingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutCompanyInput | JobPostingCreateOrConnectWithoutCompanyInput[]
    createMany?: JobPostingCreateManyCompanyInputEnvelope
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumCompanyTypeFieldUpdateOperationsInput = {
    set?: $Enums.CompanyType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserResumeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserResumeCreateWithoutCompanyInput, UserResumeUncheckedCreateWithoutCompanyInput> | UserResumeCreateWithoutCompanyInput[] | UserResumeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserResumeCreateOrConnectWithoutCompanyInput | UserResumeCreateOrConnectWithoutCompanyInput[]
    upsert?: UserResumeUpsertWithWhereUniqueWithoutCompanyInput | UserResumeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserResumeCreateManyCompanyInputEnvelope
    set?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    disconnect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    delete?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    connect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    update?: UserResumeUpdateWithWhereUniqueWithoutCompanyInput | UserResumeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserResumeUpdateManyWithWhereWithoutCompanyInput | UserResumeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserResumeScalarWhereInput | UserResumeScalarWhereInput[]
  }

  export type AttendanceLogUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutCompanyInput, AttendanceLogUncheckedCreateWithoutCompanyInput> | AttendanceLogCreateWithoutCompanyInput[] | AttendanceLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutCompanyInput | AttendanceLogCreateOrConnectWithoutCompanyInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutCompanyInput | AttendanceLogUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AttendanceLogCreateManyCompanyInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutCompanyInput | AttendanceLogUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutCompanyInput | AttendanceLogUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type ShiftScheduleUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ShiftScheduleCreateWithoutCompanyInput, ShiftScheduleUncheckedCreateWithoutCompanyInput> | ShiftScheduleCreateWithoutCompanyInput[] | ShiftScheduleUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutCompanyInput | ShiftScheduleCreateOrConnectWithoutCompanyInput[]
    upsert?: ShiftScheduleUpsertWithWhereUniqueWithoutCompanyInput | ShiftScheduleUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ShiftScheduleCreateManyCompanyInputEnvelope
    set?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    disconnect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    delete?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    connect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    update?: ShiftScheduleUpdateWithWhereUniqueWithoutCompanyInput | ShiftScheduleUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ShiftScheduleUpdateManyWithWhereWithoutCompanyInput | ShiftScheduleUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ShiftScheduleScalarWhereInput | ShiftScheduleScalarWhereInput[]
  }

  export type PaySlipUpdateManyWithoutIssuedByNestedInput = {
    create?: XOR<PaySlipCreateWithoutIssuedByInput, PaySlipUncheckedCreateWithoutIssuedByInput> | PaySlipCreateWithoutIssuedByInput[] | PaySlipUncheckedCreateWithoutIssuedByInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutIssuedByInput | PaySlipCreateOrConnectWithoutIssuedByInput[]
    upsert?: PaySlipUpsertWithWhereUniqueWithoutIssuedByInput | PaySlipUpsertWithWhereUniqueWithoutIssuedByInput[]
    createMany?: PaySlipCreateManyIssuedByInputEnvelope
    set?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    disconnect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    delete?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    update?: PaySlipUpdateWithWhereUniqueWithoutIssuedByInput | PaySlipUpdateWithWhereUniqueWithoutIssuedByInput[]
    updateMany?: PaySlipUpdateManyWithWhereWithoutIssuedByInput | PaySlipUpdateManyWithWhereWithoutIssuedByInput[]
    deleteMany?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
  }

  export type JobPostingUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput> | JobPostingCreateWithoutCompanyInput[] | JobPostingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutCompanyInput | JobPostingCreateOrConnectWithoutCompanyInput[]
    upsert?: JobPostingUpsertWithWhereUniqueWithoutCompanyInput | JobPostingUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobPostingCreateManyCompanyInputEnvelope
    set?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    disconnect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    delete?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    update?: JobPostingUpdateWithWhereUniqueWithoutCompanyInput | JobPostingUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobPostingUpdateManyWithWhereWithoutCompanyInput | JobPostingUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserResumeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserResumeCreateWithoutCompanyInput, UserResumeUncheckedCreateWithoutCompanyInput> | UserResumeCreateWithoutCompanyInput[] | UserResumeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserResumeCreateOrConnectWithoutCompanyInput | UserResumeCreateOrConnectWithoutCompanyInput[]
    upsert?: UserResumeUpsertWithWhereUniqueWithoutCompanyInput | UserResumeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserResumeCreateManyCompanyInputEnvelope
    set?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    disconnect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    delete?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    connect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    update?: UserResumeUpdateWithWhereUniqueWithoutCompanyInput | UserResumeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserResumeUpdateManyWithWhereWithoutCompanyInput | UserResumeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserResumeScalarWhereInput | UserResumeScalarWhereInput[]
  }

  export type AttendanceLogUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutCompanyInput, AttendanceLogUncheckedCreateWithoutCompanyInput> | AttendanceLogCreateWithoutCompanyInput[] | AttendanceLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutCompanyInput | AttendanceLogCreateOrConnectWithoutCompanyInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutCompanyInput | AttendanceLogUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AttendanceLogCreateManyCompanyInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutCompanyInput | AttendanceLogUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutCompanyInput | AttendanceLogUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type ShiftScheduleUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ShiftScheduleCreateWithoutCompanyInput, ShiftScheduleUncheckedCreateWithoutCompanyInput> | ShiftScheduleCreateWithoutCompanyInput[] | ShiftScheduleUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutCompanyInput | ShiftScheduleCreateOrConnectWithoutCompanyInput[]
    upsert?: ShiftScheduleUpsertWithWhereUniqueWithoutCompanyInput | ShiftScheduleUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ShiftScheduleCreateManyCompanyInputEnvelope
    set?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    disconnect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    delete?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    connect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    update?: ShiftScheduleUpdateWithWhereUniqueWithoutCompanyInput | ShiftScheduleUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ShiftScheduleUpdateManyWithWhereWithoutCompanyInput | ShiftScheduleUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ShiftScheduleScalarWhereInput | ShiftScheduleScalarWhereInput[]
  }

  export type PaySlipUncheckedUpdateManyWithoutIssuedByNestedInput = {
    create?: XOR<PaySlipCreateWithoutIssuedByInput, PaySlipUncheckedCreateWithoutIssuedByInput> | PaySlipCreateWithoutIssuedByInput[] | PaySlipUncheckedCreateWithoutIssuedByInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutIssuedByInput | PaySlipCreateOrConnectWithoutIssuedByInput[]
    upsert?: PaySlipUpsertWithWhereUniqueWithoutIssuedByInput | PaySlipUpsertWithWhereUniqueWithoutIssuedByInput[]
    createMany?: PaySlipCreateManyIssuedByInputEnvelope
    set?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    disconnect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    delete?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    update?: PaySlipUpdateWithWhereUniqueWithoutIssuedByInput | PaySlipUpdateWithWhereUniqueWithoutIssuedByInput[]
    updateMany?: PaySlipUpdateManyWithWhereWithoutIssuedByInput | PaySlipUpdateManyWithWhereWithoutIssuedByInput[]
    deleteMany?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
  }

  export type JobPostingUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput> | JobPostingCreateWithoutCompanyInput[] | JobPostingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutCompanyInput | JobPostingCreateOrConnectWithoutCompanyInput[]
    upsert?: JobPostingUpsertWithWhereUniqueWithoutCompanyInput | JobPostingUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobPostingCreateManyCompanyInputEnvelope
    set?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    disconnect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    delete?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    update?: JobPostingUpdateWithWhereUniqueWithoutCompanyInput | JobPostingUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobPostingUpdateManyWithWhereWithoutCompanyInput | JobPostingUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAttendanceLogsInput = {
    create?: XOR<UserCreateWithoutAttendanceLogsInput, UserUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceLogsInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutAttendanceLogsInput = {
    create?: XOR<CompanyCreateWithoutAttendanceLogsInput, CompanyUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAttendanceLogsInput
    connect?: CompanyWhereUniqueInput
  }

  export type ShiftScheduleCreateNestedOneWithoutAttendanceLogsInput = {
    create?: XOR<ShiftScheduleCreateWithoutAttendanceLogsInput, ShiftScheduleUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutAttendanceLogsInput
    connect?: ShiftScheduleWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutAttendanceLogsNestedInput = {
    create?: XOR<UserCreateWithoutAttendanceLogsInput, UserUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceLogsInput
    upsert?: UserUpsertWithoutAttendanceLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendanceLogsInput, UserUpdateWithoutAttendanceLogsInput>, UserUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type CompanyUpdateOneRequiredWithoutAttendanceLogsNestedInput = {
    create?: XOR<CompanyCreateWithoutAttendanceLogsInput, CompanyUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAttendanceLogsInput
    upsert?: CompanyUpsertWithoutAttendanceLogsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAttendanceLogsInput, CompanyUpdateWithoutAttendanceLogsInput>, CompanyUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type ShiftScheduleUpdateOneWithoutAttendanceLogsNestedInput = {
    create?: XOR<ShiftScheduleCreateWithoutAttendanceLogsInput, ShiftScheduleUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutAttendanceLogsInput
    upsert?: ShiftScheduleUpsertWithoutAttendanceLogsInput
    disconnect?: ShiftScheduleWhereInput | boolean
    delete?: ShiftScheduleWhereInput | boolean
    connect?: ShiftScheduleWhereUniqueInput
    update?: XOR<XOR<ShiftScheduleUpdateToOneWithWhereWithoutAttendanceLogsInput, ShiftScheduleUpdateWithoutAttendanceLogsInput>, ShiftScheduleUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchedulesInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<CompanyCreateWithoutSchedulesInput, CompanyUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSchedulesInput
    connect?: CompanyWhereUniqueInput
  }

  export type AttendanceLogCreateNestedManyWithoutScheduleInput = {
    create?: XOR<AttendanceLogCreateWithoutScheduleInput, AttendanceLogUncheckedCreateWithoutScheduleInput> | AttendanceLogCreateWithoutScheduleInput[] | AttendanceLogUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutScheduleInput | AttendanceLogCreateOrConnectWithoutScheduleInput[]
    createMany?: AttendanceLogCreateManyScheduleInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type AttendanceLogUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<AttendanceLogCreateWithoutScheduleInput, AttendanceLogUncheckedCreateWithoutScheduleInput> | AttendanceLogCreateWithoutScheduleInput[] | AttendanceLogUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutScheduleInput | AttendanceLogCreateOrConnectWithoutScheduleInput[]
    createMany?: AttendanceLogCreateManyScheduleInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchedulesInput
    upsert?: UserUpsertWithoutSchedulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSchedulesInput, UserUpdateWithoutSchedulesInput>, UserUncheckedUpdateWithoutSchedulesInput>
  }

  export type CompanyUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<CompanyCreateWithoutSchedulesInput, CompanyUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSchedulesInput
    upsert?: CompanyUpsertWithoutSchedulesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutSchedulesInput, CompanyUpdateWithoutSchedulesInput>, CompanyUncheckedUpdateWithoutSchedulesInput>
  }

  export type AttendanceLogUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutScheduleInput, AttendanceLogUncheckedCreateWithoutScheduleInput> | AttendanceLogCreateWithoutScheduleInput[] | AttendanceLogUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutScheduleInput | AttendanceLogCreateOrConnectWithoutScheduleInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutScheduleInput | AttendanceLogUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: AttendanceLogCreateManyScheduleInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutScheduleInput | AttendanceLogUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutScheduleInput | AttendanceLogUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type AttendanceLogUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutScheduleInput, AttendanceLogUncheckedCreateWithoutScheduleInput> | AttendanceLogCreateWithoutScheduleInput[] | AttendanceLogUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutScheduleInput | AttendanceLogCreateOrConnectWithoutScheduleInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutScheduleInput | AttendanceLogUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: AttendanceLogCreateManyScheduleInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutScheduleInput | AttendanceLogUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutScheduleInput | AttendanceLogUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPaySlipsInput = {
    create?: XOR<UserCreateWithoutPaySlipsInput, UserUncheckedCreateWithoutPaySlipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaySlipsInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutIssuedPaySlipsInput = {
    create?: XOR<CompanyCreateWithoutIssuedPaySlipsInput, CompanyUncheckedCreateWithoutIssuedPaySlipsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutIssuedPaySlipsInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPaySlipsNestedInput = {
    create?: XOR<UserCreateWithoutPaySlipsInput, UserUncheckedCreateWithoutPaySlipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaySlipsInput
    upsert?: UserUpsertWithoutPaySlipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaySlipsInput, UserUpdateWithoutPaySlipsInput>, UserUncheckedUpdateWithoutPaySlipsInput>
  }

  export type CompanyUpdateOneRequiredWithoutIssuedPaySlipsNestedInput = {
    create?: XOR<CompanyCreateWithoutIssuedPaySlipsInput, CompanyUncheckedCreateWithoutIssuedPaySlipsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutIssuedPaySlipsInput
    upsert?: CompanyUpsertWithoutIssuedPaySlipsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutIssuedPaySlipsInput, CompanyUpdateWithoutIssuedPaySlipsInput>, CompanyUncheckedUpdateWithoutIssuedPaySlipsInput>
  }

  export type CompanyCreateNestedOneWithoutJobPostingInput = {
    create?: XOR<CompanyCreateWithoutJobPostingInput, CompanyUncheckedCreateWithoutJobPostingInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobPostingInput
    connect?: CompanyWhereUniqueInput
  }

  export type JobApplicationCreateNestedManyWithoutJobInput = {
    create?: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput> | JobApplicationCreateWithoutJobInput[] | JobApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutJobInput | JobApplicationCreateOrConnectWithoutJobInput[]
    createMany?: JobApplicationCreateManyJobInputEnvelope
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
  }

  export type JobApplicationUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput> | JobApplicationCreateWithoutJobInput[] | JobApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutJobInput | JobApplicationCreateOrConnectWithoutJobInput[]
    createMany?: JobApplicationCreateManyJobInputEnvelope
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
  }

  export type EnumJobTypeEnumFieldUpdateOperationsInput = {
    set?: $Enums.JobTypeEnum
  }

  export type CompanyUpdateOneRequiredWithoutJobPostingNestedInput = {
    create?: XOR<CompanyCreateWithoutJobPostingInput, CompanyUncheckedCreateWithoutJobPostingInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobPostingInput
    upsert?: CompanyUpsertWithoutJobPostingInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutJobPostingInput, CompanyUpdateWithoutJobPostingInput>, CompanyUncheckedUpdateWithoutJobPostingInput>
  }

  export type JobApplicationUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput> | JobApplicationCreateWithoutJobInput[] | JobApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutJobInput | JobApplicationCreateOrConnectWithoutJobInput[]
    upsert?: JobApplicationUpsertWithWhereUniqueWithoutJobInput | JobApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobApplicationCreateManyJobInputEnvelope
    set?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    disconnect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    delete?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    update?: JobApplicationUpdateWithWhereUniqueWithoutJobInput | JobApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobApplicationUpdateManyWithWhereWithoutJobInput | JobApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
  }

  export type JobApplicationUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput> | JobApplicationCreateWithoutJobInput[] | JobApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutJobInput | JobApplicationCreateOrConnectWithoutJobInput[]
    upsert?: JobApplicationUpsertWithWhereUniqueWithoutJobInput | JobApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobApplicationCreateManyJobInputEnvelope
    set?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    disconnect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    delete?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    update?: JobApplicationUpdateWithWhereUniqueWithoutJobInput | JobApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobApplicationUpdateManyWithWhereWithoutJobInput | JobApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
  }

  export type JobPostingCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobPostingCreateWithoutApplicationsInput, JobPostingUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobPostingCreateOrConnectWithoutApplicationsInput
    connect?: JobPostingWhereUniqueInput
  }

  export type UserResumeCreateNestedOneWithoutJobapplicationInput = {
    create?: XOR<UserResumeCreateWithoutJobapplicationInput, UserResumeUncheckedCreateWithoutJobapplicationInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutJobapplicationInput
    connect?: UserResumeWhereUniqueInput
  }

  export type JobPostingUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobPostingCreateWithoutApplicationsInput, JobPostingUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobPostingCreateOrConnectWithoutApplicationsInput
    upsert?: JobPostingUpsertWithoutApplicationsInput
    connect?: JobPostingWhereUniqueInput
    update?: XOR<XOR<JobPostingUpdateToOneWithWhereWithoutApplicationsInput, JobPostingUpdateWithoutApplicationsInput>, JobPostingUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserResumeUpdateOneRequiredWithoutJobapplicationNestedInput = {
    create?: XOR<UserResumeCreateWithoutJobapplicationInput, UserResumeUncheckedCreateWithoutJobapplicationInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutJobapplicationInput
    upsert?: UserResumeUpsertWithoutJobapplicationInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutJobapplicationInput, UserResumeUpdateWithoutJobapplicationInput>, UserResumeUncheckedUpdateWithoutJobapplicationInput>
  }

  export type UserResumeCreateNestedOneWithoutMessageThreadsInput = {
    create?: XOR<UserResumeCreateWithoutMessageThreadsInput, UserResumeUncheckedCreateWithoutMessageThreadsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutMessageThreadsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedThreadsInput = {
    create?: XOR<UserCreateWithoutCreatedThreadsInput, UserUncheckedCreateWithoutCreatedThreadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedThreadsInput
    connect?: UserWhereUniqueInput
  }

  export type MessageLogCreateNestedManyWithoutThreadInput = {
    create?: XOR<MessageLogCreateWithoutThreadInput, MessageLogUncheckedCreateWithoutThreadInput> | MessageLogCreateWithoutThreadInput[] | MessageLogUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageLogCreateOrConnectWithoutThreadInput | MessageLogCreateOrConnectWithoutThreadInput[]
    createMany?: MessageLogCreateManyThreadInputEnvelope
    connect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
  }

  export type MessageLogUncheckedCreateNestedManyWithoutThreadInput = {
    create?: XOR<MessageLogCreateWithoutThreadInput, MessageLogUncheckedCreateWithoutThreadInput> | MessageLogCreateWithoutThreadInput[] | MessageLogUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageLogCreateOrConnectWithoutThreadInput | MessageLogCreateOrConnectWithoutThreadInput[]
    createMany?: MessageLogCreateManyThreadInputEnvelope
    connect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
  }

  export type UserResumeUpdateOneRequiredWithoutMessageThreadsNestedInput = {
    create?: XOR<UserResumeCreateWithoutMessageThreadsInput, UserResumeUncheckedCreateWithoutMessageThreadsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutMessageThreadsInput
    upsert?: UserResumeUpsertWithoutMessageThreadsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutMessageThreadsInput, UserResumeUpdateWithoutMessageThreadsInput>, UserResumeUncheckedUpdateWithoutMessageThreadsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedThreadsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedThreadsInput, UserUncheckedCreateWithoutCreatedThreadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedThreadsInput
    upsert?: UserUpsertWithoutCreatedThreadsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedThreadsInput, UserUpdateWithoutCreatedThreadsInput>, UserUncheckedUpdateWithoutCreatedThreadsInput>
  }

  export type MessageLogUpdateManyWithoutThreadNestedInput = {
    create?: XOR<MessageLogCreateWithoutThreadInput, MessageLogUncheckedCreateWithoutThreadInput> | MessageLogCreateWithoutThreadInput[] | MessageLogUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageLogCreateOrConnectWithoutThreadInput | MessageLogCreateOrConnectWithoutThreadInput[]
    upsert?: MessageLogUpsertWithWhereUniqueWithoutThreadInput | MessageLogUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: MessageLogCreateManyThreadInputEnvelope
    set?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    disconnect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    delete?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    connect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    update?: MessageLogUpdateWithWhereUniqueWithoutThreadInput | MessageLogUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: MessageLogUpdateManyWithWhereWithoutThreadInput | MessageLogUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: MessageLogScalarWhereInput | MessageLogScalarWhereInput[]
  }

  export type MessageLogUncheckedUpdateManyWithoutThreadNestedInput = {
    create?: XOR<MessageLogCreateWithoutThreadInput, MessageLogUncheckedCreateWithoutThreadInput> | MessageLogCreateWithoutThreadInput[] | MessageLogUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageLogCreateOrConnectWithoutThreadInput | MessageLogCreateOrConnectWithoutThreadInput[]
    upsert?: MessageLogUpsertWithWhereUniqueWithoutThreadInput | MessageLogUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: MessageLogCreateManyThreadInputEnvelope
    set?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    disconnect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    delete?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    connect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    update?: MessageLogUpdateWithWhereUniqueWithoutThreadInput | MessageLogUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: MessageLogUpdateManyWithWhereWithoutThreadInput | MessageLogUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: MessageLogScalarWhereInput | MessageLogScalarWhereInput[]
  }

  export type MessageThreadCreateNestedOneWithoutMessagesInput = {
    create?: XOR<MessageThreadCreateWithoutMessagesInput, MessageThreadUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: MessageThreadCreateOrConnectWithoutMessagesInput
    connect?: MessageThreadWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type MessageThreadUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<MessageThreadCreateWithoutMessagesInput, MessageThreadUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: MessageThreadCreateOrConnectWithoutMessagesInput
    upsert?: MessageThreadUpsertWithoutMessagesInput
    connect?: MessageThreadWhereUniqueInput
    update?: XOR<XOR<MessageThreadUpdateToOneWithWhereWithoutMessagesInput, MessageThreadUpdateWithoutMessagesInput>, MessageThreadUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserCreateNestedOneWithoutResumesInput = {
    create?: XOR<UserCreateWithoutResumesInput, UserUncheckedCreateWithoutResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResumeInput = {
    create?: XOR<UserCreateWithoutResumeInput, UserUncheckedCreateWithoutResumeInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutResumesInput = {
    create?: XOR<CompanyCreateWithoutResumesInput, CompanyUncheckedCreateWithoutResumesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutResumesInput
    connect?: CompanyWhereUniqueInput
  }

  export type LanguageCreateNestedManyWithoutResumeInput = {
    create?: XOR<LanguageCreateWithoutResumeInput, LanguageUncheckedCreateWithoutResumeInput> | LanguageCreateWithoutResumeInput[] | LanguageUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutResumeInput | LanguageCreateOrConnectWithoutResumeInput[]
    createMany?: LanguageCreateManyResumeInputEnvelope
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
  }

  export type EducationCreateNestedManyWithoutResumeInput = {
    create?: XOR<EducationCreateWithoutResumeInput, EducationUncheckedCreateWithoutResumeInput> | EducationCreateWithoutResumeInput[] | EducationUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutResumeInput | EducationCreateOrConnectWithoutResumeInput[]
    createMany?: EducationCreateManyResumeInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type ExperienceCreateNestedManyWithoutResumeInput = {
    create?: XOR<ExperienceCreateWithoutResumeInput, ExperienceUncheckedCreateWithoutResumeInput> | ExperienceCreateWithoutResumeInput[] | ExperienceUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutResumeInput | ExperienceCreateOrConnectWithoutResumeInput[]
    createMany?: ExperienceCreateManyResumeInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type SkillCreateNestedManyWithoutResumeInput = {
    create?: XOR<SkillCreateWithoutResumeInput, SkillUncheckedCreateWithoutResumeInput> | SkillCreateWithoutResumeInput[] | SkillUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutResumeInput | SkillCreateOrConnectWithoutResumeInput[]
    createMany?: SkillCreateManyResumeInputEnvelope
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type CertificateCreateNestedManyWithoutResumeInput = {
    create?: XOR<CertificateCreateWithoutResumeInput, CertificateUncheckedCreateWithoutResumeInput> | CertificateCreateWithoutResumeInput[] | CertificateUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutResumeInput | CertificateCreateOrConnectWithoutResumeInput[]
    createMany?: CertificateCreateManyResumeInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type TraitCreateNestedManyWithoutResumeInput = {
    create?: XOR<TraitCreateWithoutResumeInput, TraitUncheckedCreateWithoutResumeInput> | TraitCreateWithoutResumeInput[] | TraitUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: TraitCreateOrConnectWithoutResumeInput | TraitCreateOrConnectWithoutResumeInput[]
    createMany?: TraitCreateManyResumeInputEnvelope
    connect?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
  }

  export type CommuteCreateNestedManyWithoutResumeInput = {
    create?: XOR<CommuteCreateWithoutResumeInput, CommuteUncheckedCreateWithoutResumeInput> | CommuteCreateWithoutResumeInput[] | CommuteUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: CommuteCreateOrConnectWithoutResumeInput | CommuteCreateOrConnectWithoutResumeInput[]
    createMany?: CommuteCreateManyResumeInputEnvelope
    connect?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
  }

  export type WorkingTimeCreateNestedManyWithoutResumeInput = {
    create?: XOR<WorkingTimeCreateWithoutResumeInput, WorkingTimeUncheckedCreateWithoutResumeInput> | WorkingTimeCreateWithoutResumeInput[] | WorkingTimeUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: WorkingTimeCreateOrConnectWithoutResumeInput | WorkingTimeCreateOrConnectWithoutResumeInput[]
    createMany?: WorkingTimeCreateManyResumeInputEnvelope
    connect?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
  }

  export type WorkIdentityCreateNestedManyWithoutResumeInput = {
    create?: XOR<WorkIdentityCreateWithoutResumeInput, WorkIdentityUncheckedCreateWithoutResumeInput> | WorkIdentityCreateWithoutResumeInput[] | WorkIdentityUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: WorkIdentityCreateOrConnectWithoutResumeInput | WorkIdentityCreateOrConnectWithoutResumeInput[]
    createMany?: WorkIdentityCreateManyResumeInputEnvelope
    connect?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
  }

  export type JobTypeCreateNestedManyWithoutResumeInput = {
    create?: XOR<JobTypeCreateWithoutResumeInput, JobTypeUncheckedCreateWithoutResumeInput> | JobTypeCreateWithoutResumeInput[] | JobTypeUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobTypeCreateOrConnectWithoutResumeInput | JobTypeCreateOrConnectWithoutResumeInput[]
    createMany?: JobTypeCreateManyResumeInputEnvelope
    connect?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
  }

  export type EmergencyContactCreateNestedManyWithoutResumeInput = {
    create?: XOR<EmergencyContactCreateWithoutResumeInput, EmergencyContactUncheckedCreateWithoutResumeInput> | EmergencyContactCreateWithoutResumeInput[] | EmergencyContactUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: EmergencyContactCreateOrConnectWithoutResumeInput | EmergencyContactCreateOrConnectWithoutResumeInput[]
    createMany?: EmergencyContactCreateManyResumeInputEnvelope
    connect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
  }

  export type BiographyCreateNestedOneWithoutResumeInput = {
    create?: XOR<BiographyCreateWithoutResumeInput, BiographyUncheckedCreateWithoutResumeInput>
    connectOrCreate?: BiographyCreateOrConnectWithoutResumeInput
    connect?: BiographyWhereUniqueInput
  }

  export type PortfolioCreateNestedManyWithoutResumeInput = {
    create?: XOR<PortfolioCreateWithoutResumeInput, PortfolioUncheckedCreateWithoutResumeInput> | PortfolioCreateWithoutResumeInput[] | PortfolioUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutResumeInput | PortfolioCreateOrConnectWithoutResumeInput[]
    createMany?: PortfolioCreateManyResumeInputEnvelope
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
  }

  export type ProfilePhotoCreateNestedManyWithoutResumeInput = {
    create?: XOR<ProfilePhotoCreateWithoutResumeInput, ProfilePhotoUncheckedCreateWithoutResumeInput> | ProfilePhotoCreateWithoutResumeInput[] | ProfilePhotoUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ProfilePhotoCreateOrConnectWithoutResumeInput | ProfilePhotoCreateOrConnectWithoutResumeInput[]
    createMany?: ProfilePhotoCreateManyResumeInputEnvelope
    connect?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
  }

  export type ResumeVersionCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeVersionCreateWithoutResumeInput, ResumeVersionUncheckedCreateWithoutResumeInput> | ResumeVersionCreateWithoutResumeInput[] | ResumeVersionUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeVersionCreateOrConnectWithoutResumeInput | ResumeVersionCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeVersionCreateManyResumeInputEnvelope
    connect?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
  }

  export type ResumeVisibilityCreateNestedOneWithoutResumeInput = {
    create?: XOR<ResumeVisibilityCreateWithoutResumeInput, ResumeVisibilityUncheckedCreateWithoutResumeInput>
    connectOrCreate?: ResumeVisibilityCreateOrConnectWithoutResumeInput
    connect?: ResumeVisibilityWhereUniqueInput
  }

  export type ResumeReviewStatusCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeReviewStatusCreateWithoutResumeInput, ResumeReviewStatusUncheckedCreateWithoutResumeInput> | ResumeReviewStatusCreateWithoutResumeInput[] | ResumeReviewStatusUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeReviewStatusCreateOrConnectWithoutResumeInput | ResumeReviewStatusCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeReviewStatusCreateManyResumeInputEnvelope
    connect?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
  }

  export type ResumeViewLogCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeViewLogCreateWithoutResumeInput, ResumeViewLogUncheckedCreateWithoutResumeInput> | ResumeViewLogCreateWithoutResumeInput[] | ResumeViewLogUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutResumeInput | ResumeViewLogCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeViewLogCreateManyResumeInputEnvelope
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
  }

  export type ResumePDFCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumePDFCreateWithoutResumeInput, ResumePDFUncheckedCreateWithoutResumeInput> | ResumePDFCreateWithoutResumeInput[] | ResumePDFUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumePDFCreateOrConnectWithoutResumeInput | ResumePDFCreateOrConnectWithoutResumeInput[]
    createMany?: ResumePDFCreateManyResumeInputEnvelope
    connect?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
  }

  export type ResumeReviewLogCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeReviewLogCreateWithoutResumeInput, ResumeReviewLogUncheckedCreateWithoutResumeInput> | ResumeReviewLogCreateWithoutResumeInput[] | ResumeReviewLogUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutResumeInput | ResumeReviewLogCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeReviewLogCreateManyResumeInputEnvelope
    connect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
  }

  export type MessageThreadCreateNestedManyWithoutResumeInput = {
    create?: XOR<MessageThreadCreateWithoutResumeInput, MessageThreadUncheckedCreateWithoutResumeInput> | MessageThreadCreateWithoutResumeInput[] | MessageThreadUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutResumeInput | MessageThreadCreateOrConnectWithoutResumeInput[]
    createMany?: MessageThreadCreateManyResumeInputEnvelope
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
  }

  export type ResumeAccessGrantCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutResumeInput, ResumeAccessGrantUncheckedCreateWithoutResumeInput> | ResumeAccessGrantCreateWithoutResumeInput[] | ResumeAccessGrantUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutResumeInput | ResumeAccessGrantCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeAccessGrantCreateManyResumeInputEnvelope
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
  }

  export type JobApplicationCreateNestedManyWithoutResumeInput = {
    create?: XOR<JobApplicationCreateWithoutResumeInput, JobApplicationUncheckedCreateWithoutResumeInput> | JobApplicationCreateWithoutResumeInput[] | JobApplicationUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutResumeInput | JobApplicationCreateOrConnectWithoutResumeInput[]
    createMany?: JobApplicationCreateManyResumeInputEnvelope
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutResumeInput = {
    create?: XOR<UserCreateWithoutResumeInput, UserUncheckedCreateWithoutResumeInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeInput
    connect?: UserWhereUniqueInput
  }

  export type LanguageUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<LanguageCreateWithoutResumeInput, LanguageUncheckedCreateWithoutResumeInput> | LanguageCreateWithoutResumeInput[] | LanguageUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutResumeInput | LanguageCreateOrConnectWithoutResumeInput[]
    createMany?: LanguageCreateManyResumeInputEnvelope
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
  }

  export type EducationUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<EducationCreateWithoutResumeInput, EducationUncheckedCreateWithoutResumeInput> | EducationCreateWithoutResumeInput[] | EducationUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutResumeInput | EducationCreateOrConnectWithoutResumeInput[]
    createMany?: EducationCreateManyResumeInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type ExperienceUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ExperienceCreateWithoutResumeInput, ExperienceUncheckedCreateWithoutResumeInput> | ExperienceCreateWithoutResumeInput[] | ExperienceUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutResumeInput | ExperienceCreateOrConnectWithoutResumeInput[]
    createMany?: ExperienceCreateManyResumeInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<SkillCreateWithoutResumeInput, SkillUncheckedCreateWithoutResumeInput> | SkillCreateWithoutResumeInput[] | SkillUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutResumeInput | SkillCreateOrConnectWithoutResumeInput[]
    createMany?: SkillCreateManyResumeInputEnvelope
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type CertificateUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<CertificateCreateWithoutResumeInput, CertificateUncheckedCreateWithoutResumeInput> | CertificateCreateWithoutResumeInput[] | CertificateUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutResumeInput | CertificateCreateOrConnectWithoutResumeInput[]
    createMany?: CertificateCreateManyResumeInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type TraitUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<TraitCreateWithoutResumeInput, TraitUncheckedCreateWithoutResumeInput> | TraitCreateWithoutResumeInput[] | TraitUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: TraitCreateOrConnectWithoutResumeInput | TraitCreateOrConnectWithoutResumeInput[]
    createMany?: TraitCreateManyResumeInputEnvelope
    connect?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
  }

  export type CommuteUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<CommuteCreateWithoutResumeInput, CommuteUncheckedCreateWithoutResumeInput> | CommuteCreateWithoutResumeInput[] | CommuteUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: CommuteCreateOrConnectWithoutResumeInput | CommuteCreateOrConnectWithoutResumeInput[]
    createMany?: CommuteCreateManyResumeInputEnvelope
    connect?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
  }

  export type WorkingTimeUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<WorkingTimeCreateWithoutResumeInput, WorkingTimeUncheckedCreateWithoutResumeInput> | WorkingTimeCreateWithoutResumeInput[] | WorkingTimeUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: WorkingTimeCreateOrConnectWithoutResumeInput | WorkingTimeCreateOrConnectWithoutResumeInput[]
    createMany?: WorkingTimeCreateManyResumeInputEnvelope
    connect?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
  }

  export type WorkIdentityUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<WorkIdentityCreateWithoutResumeInput, WorkIdentityUncheckedCreateWithoutResumeInput> | WorkIdentityCreateWithoutResumeInput[] | WorkIdentityUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: WorkIdentityCreateOrConnectWithoutResumeInput | WorkIdentityCreateOrConnectWithoutResumeInput[]
    createMany?: WorkIdentityCreateManyResumeInputEnvelope
    connect?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
  }

  export type JobTypeUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<JobTypeCreateWithoutResumeInput, JobTypeUncheckedCreateWithoutResumeInput> | JobTypeCreateWithoutResumeInput[] | JobTypeUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobTypeCreateOrConnectWithoutResumeInput | JobTypeCreateOrConnectWithoutResumeInput[]
    createMany?: JobTypeCreateManyResumeInputEnvelope
    connect?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
  }

  export type EmergencyContactUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<EmergencyContactCreateWithoutResumeInput, EmergencyContactUncheckedCreateWithoutResumeInput> | EmergencyContactCreateWithoutResumeInput[] | EmergencyContactUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: EmergencyContactCreateOrConnectWithoutResumeInput | EmergencyContactCreateOrConnectWithoutResumeInput[]
    createMany?: EmergencyContactCreateManyResumeInputEnvelope
    connect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
  }

  export type BiographyUncheckedCreateNestedOneWithoutResumeInput = {
    create?: XOR<BiographyCreateWithoutResumeInput, BiographyUncheckedCreateWithoutResumeInput>
    connectOrCreate?: BiographyCreateOrConnectWithoutResumeInput
    connect?: BiographyWhereUniqueInput
  }

  export type PortfolioUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<PortfolioCreateWithoutResumeInput, PortfolioUncheckedCreateWithoutResumeInput> | PortfolioCreateWithoutResumeInput[] | PortfolioUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutResumeInput | PortfolioCreateOrConnectWithoutResumeInput[]
    createMany?: PortfolioCreateManyResumeInputEnvelope
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
  }

  export type ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ProfilePhotoCreateWithoutResumeInput, ProfilePhotoUncheckedCreateWithoutResumeInput> | ProfilePhotoCreateWithoutResumeInput[] | ProfilePhotoUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ProfilePhotoCreateOrConnectWithoutResumeInput | ProfilePhotoCreateOrConnectWithoutResumeInput[]
    createMany?: ProfilePhotoCreateManyResumeInputEnvelope
    connect?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
  }

  export type ResumeVersionUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeVersionCreateWithoutResumeInput, ResumeVersionUncheckedCreateWithoutResumeInput> | ResumeVersionCreateWithoutResumeInput[] | ResumeVersionUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeVersionCreateOrConnectWithoutResumeInput | ResumeVersionCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeVersionCreateManyResumeInputEnvelope
    connect?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
  }

  export type ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput = {
    create?: XOR<ResumeVisibilityCreateWithoutResumeInput, ResumeVisibilityUncheckedCreateWithoutResumeInput>
    connectOrCreate?: ResumeVisibilityCreateOrConnectWithoutResumeInput
    connect?: ResumeVisibilityWhereUniqueInput
  }

  export type ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeReviewStatusCreateWithoutResumeInput, ResumeReviewStatusUncheckedCreateWithoutResumeInput> | ResumeReviewStatusCreateWithoutResumeInput[] | ResumeReviewStatusUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeReviewStatusCreateOrConnectWithoutResumeInput | ResumeReviewStatusCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeReviewStatusCreateManyResumeInputEnvelope
    connect?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
  }

  export type ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeViewLogCreateWithoutResumeInput, ResumeViewLogUncheckedCreateWithoutResumeInput> | ResumeViewLogCreateWithoutResumeInput[] | ResumeViewLogUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutResumeInput | ResumeViewLogCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeViewLogCreateManyResumeInputEnvelope
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
  }

  export type ResumePDFUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumePDFCreateWithoutResumeInput, ResumePDFUncheckedCreateWithoutResumeInput> | ResumePDFCreateWithoutResumeInput[] | ResumePDFUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumePDFCreateOrConnectWithoutResumeInput | ResumePDFCreateOrConnectWithoutResumeInput[]
    createMany?: ResumePDFCreateManyResumeInputEnvelope
    connect?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
  }

  export type ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeReviewLogCreateWithoutResumeInput, ResumeReviewLogUncheckedCreateWithoutResumeInput> | ResumeReviewLogCreateWithoutResumeInput[] | ResumeReviewLogUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutResumeInput | ResumeReviewLogCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeReviewLogCreateManyResumeInputEnvelope
    connect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
  }

  export type MessageThreadUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<MessageThreadCreateWithoutResumeInput, MessageThreadUncheckedCreateWithoutResumeInput> | MessageThreadCreateWithoutResumeInput[] | MessageThreadUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutResumeInput | MessageThreadCreateOrConnectWithoutResumeInput[]
    createMany?: MessageThreadCreateManyResumeInputEnvelope
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
  }

  export type ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutResumeInput, ResumeAccessGrantUncheckedCreateWithoutResumeInput> | ResumeAccessGrantCreateWithoutResumeInput[] | ResumeAccessGrantUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutResumeInput | ResumeAccessGrantCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeAccessGrantCreateManyResumeInputEnvelope
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
  }

  export type JobApplicationUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<JobApplicationCreateWithoutResumeInput, JobApplicationUncheckedCreateWithoutResumeInput> | JobApplicationCreateWithoutResumeInput[] | JobApplicationUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutResumeInput | JobApplicationCreateOrConnectWithoutResumeInput[]
    createMany?: JobApplicationCreateManyResumeInputEnvelope
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutResumesNestedInput = {
    create?: XOR<UserCreateWithoutResumesInput, UserUncheckedCreateWithoutResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesInput
    upsert?: UserUpsertWithoutResumesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumesInput, UserUpdateWithoutResumesInput>, UserUncheckedUpdateWithoutResumesInput>
  }

  export type UserUpdateOneWithoutResumeNestedInput = {
    create?: XOR<UserCreateWithoutResumeInput, UserUncheckedCreateWithoutResumeInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeInput
    upsert?: UserUpsertWithoutResumeInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumeInput, UserUpdateWithoutResumeInput>, UserUncheckedUpdateWithoutResumeInput>
  }

  export type CompanyUpdateOneRequiredWithoutResumesNestedInput = {
    create?: XOR<CompanyCreateWithoutResumesInput, CompanyUncheckedCreateWithoutResumesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutResumesInput
    upsert?: CompanyUpsertWithoutResumesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutResumesInput, CompanyUpdateWithoutResumesInput>, CompanyUncheckedUpdateWithoutResumesInput>
  }

  export type LanguageUpdateManyWithoutResumeNestedInput = {
    create?: XOR<LanguageCreateWithoutResumeInput, LanguageUncheckedCreateWithoutResumeInput> | LanguageCreateWithoutResumeInput[] | LanguageUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutResumeInput | LanguageCreateOrConnectWithoutResumeInput[]
    upsert?: LanguageUpsertWithWhereUniqueWithoutResumeInput | LanguageUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: LanguageCreateManyResumeInputEnvelope
    set?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    disconnect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    delete?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    update?: LanguageUpdateWithWhereUniqueWithoutResumeInput | LanguageUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: LanguageUpdateManyWithWhereWithoutResumeInput | LanguageUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
  }

  export type EducationUpdateManyWithoutResumeNestedInput = {
    create?: XOR<EducationCreateWithoutResumeInput, EducationUncheckedCreateWithoutResumeInput> | EducationCreateWithoutResumeInput[] | EducationUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutResumeInput | EducationCreateOrConnectWithoutResumeInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutResumeInput | EducationUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: EducationCreateManyResumeInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutResumeInput | EducationUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutResumeInput | EducationUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type ExperienceUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ExperienceCreateWithoutResumeInput, ExperienceUncheckedCreateWithoutResumeInput> | ExperienceCreateWithoutResumeInput[] | ExperienceUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutResumeInput | ExperienceCreateOrConnectWithoutResumeInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutResumeInput | ExperienceUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ExperienceCreateManyResumeInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutResumeInput | ExperienceUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutResumeInput | ExperienceUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type SkillUpdateManyWithoutResumeNestedInput = {
    create?: XOR<SkillCreateWithoutResumeInput, SkillUncheckedCreateWithoutResumeInput> | SkillCreateWithoutResumeInput[] | SkillUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutResumeInput | SkillCreateOrConnectWithoutResumeInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutResumeInput | SkillUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: SkillCreateManyResumeInputEnvelope
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutResumeInput | SkillUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutResumeInput | SkillUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type CertificateUpdateManyWithoutResumeNestedInput = {
    create?: XOR<CertificateCreateWithoutResumeInput, CertificateUncheckedCreateWithoutResumeInput> | CertificateCreateWithoutResumeInput[] | CertificateUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutResumeInput | CertificateCreateOrConnectWithoutResumeInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutResumeInput | CertificateUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: CertificateCreateManyResumeInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutResumeInput | CertificateUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutResumeInput | CertificateUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type TraitUpdateManyWithoutResumeNestedInput = {
    create?: XOR<TraitCreateWithoutResumeInput, TraitUncheckedCreateWithoutResumeInput> | TraitCreateWithoutResumeInput[] | TraitUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: TraitCreateOrConnectWithoutResumeInput | TraitCreateOrConnectWithoutResumeInput[]
    upsert?: TraitUpsertWithWhereUniqueWithoutResumeInput | TraitUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: TraitCreateManyResumeInputEnvelope
    set?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
    disconnect?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
    delete?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
    connect?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
    update?: TraitUpdateWithWhereUniqueWithoutResumeInput | TraitUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: TraitUpdateManyWithWhereWithoutResumeInput | TraitUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: TraitScalarWhereInput | TraitScalarWhereInput[]
  }

  export type CommuteUpdateManyWithoutResumeNestedInput = {
    create?: XOR<CommuteCreateWithoutResumeInput, CommuteUncheckedCreateWithoutResumeInput> | CommuteCreateWithoutResumeInput[] | CommuteUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: CommuteCreateOrConnectWithoutResumeInput | CommuteCreateOrConnectWithoutResumeInput[]
    upsert?: CommuteUpsertWithWhereUniqueWithoutResumeInput | CommuteUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: CommuteCreateManyResumeInputEnvelope
    set?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
    disconnect?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
    delete?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
    connect?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
    update?: CommuteUpdateWithWhereUniqueWithoutResumeInput | CommuteUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: CommuteUpdateManyWithWhereWithoutResumeInput | CommuteUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: CommuteScalarWhereInput | CommuteScalarWhereInput[]
  }

  export type WorkingTimeUpdateManyWithoutResumeNestedInput = {
    create?: XOR<WorkingTimeCreateWithoutResumeInput, WorkingTimeUncheckedCreateWithoutResumeInput> | WorkingTimeCreateWithoutResumeInput[] | WorkingTimeUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: WorkingTimeCreateOrConnectWithoutResumeInput | WorkingTimeCreateOrConnectWithoutResumeInput[]
    upsert?: WorkingTimeUpsertWithWhereUniqueWithoutResumeInput | WorkingTimeUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: WorkingTimeCreateManyResumeInputEnvelope
    set?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
    disconnect?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
    delete?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
    connect?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
    update?: WorkingTimeUpdateWithWhereUniqueWithoutResumeInput | WorkingTimeUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: WorkingTimeUpdateManyWithWhereWithoutResumeInput | WorkingTimeUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: WorkingTimeScalarWhereInput | WorkingTimeScalarWhereInput[]
  }

  export type WorkIdentityUpdateManyWithoutResumeNestedInput = {
    create?: XOR<WorkIdentityCreateWithoutResumeInput, WorkIdentityUncheckedCreateWithoutResumeInput> | WorkIdentityCreateWithoutResumeInput[] | WorkIdentityUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: WorkIdentityCreateOrConnectWithoutResumeInput | WorkIdentityCreateOrConnectWithoutResumeInput[]
    upsert?: WorkIdentityUpsertWithWhereUniqueWithoutResumeInput | WorkIdentityUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: WorkIdentityCreateManyResumeInputEnvelope
    set?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
    disconnect?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
    delete?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
    connect?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
    update?: WorkIdentityUpdateWithWhereUniqueWithoutResumeInput | WorkIdentityUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: WorkIdentityUpdateManyWithWhereWithoutResumeInput | WorkIdentityUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: WorkIdentityScalarWhereInput | WorkIdentityScalarWhereInput[]
  }

  export type JobTypeUpdateManyWithoutResumeNestedInput = {
    create?: XOR<JobTypeCreateWithoutResumeInput, JobTypeUncheckedCreateWithoutResumeInput> | JobTypeCreateWithoutResumeInput[] | JobTypeUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobTypeCreateOrConnectWithoutResumeInput | JobTypeCreateOrConnectWithoutResumeInput[]
    upsert?: JobTypeUpsertWithWhereUniqueWithoutResumeInput | JobTypeUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: JobTypeCreateManyResumeInputEnvelope
    set?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
    disconnect?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
    delete?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
    connect?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
    update?: JobTypeUpdateWithWhereUniqueWithoutResumeInput | JobTypeUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: JobTypeUpdateManyWithWhereWithoutResumeInput | JobTypeUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: JobTypeScalarWhereInput | JobTypeScalarWhereInput[]
  }

  export type EmergencyContactUpdateManyWithoutResumeNestedInput = {
    create?: XOR<EmergencyContactCreateWithoutResumeInput, EmergencyContactUncheckedCreateWithoutResumeInput> | EmergencyContactCreateWithoutResumeInput[] | EmergencyContactUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: EmergencyContactCreateOrConnectWithoutResumeInput | EmergencyContactCreateOrConnectWithoutResumeInput[]
    upsert?: EmergencyContactUpsertWithWhereUniqueWithoutResumeInput | EmergencyContactUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: EmergencyContactCreateManyResumeInputEnvelope
    set?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    disconnect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    delete?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    connect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    update?: EmergencyContactUpdateWithWhereUniqueWithoutResumeInput | EmergencyContactUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: EmergencyContactUpdateManyWithWhereWithoutResumeInput | EmergencyContactUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: EmergencyContactScalarWhereInput | EmergencyContactScalarWhereInput[]
  }

  export type BiographyUpdateOneWithoutResumeNestedInput = {
    create?: XOR<BiographyCreateWithoutResumeInput, BiographyUncheckedCreateWithoutResumeInput>
    connectOrCreate?: BiographyCreateOrConnectWithoutResumeInput
    upsert?: BiographyUpsertWithoutResumeInput
    disconnect?: BiographyWhereInput | boolean
    delete?: BiographyWhereInput | boolean
    connect?: BiographyWhereUniqueInput
    update?: XOR<XOR<BiographyUpdateToOneWithWhereWithoutResumeInput, BiographyUpdateWithoutResumeInput>, BiographyUncheckedUpdateWithoutResumeInput>
  }

  export type PortfolioUpdateManyWithoutResumeNestedInput = {
    create?: XOR<PortfolioCreateWithoutResumeInput, PortfolioUncheckedCreateWithoutResumeInput> | PortfolioCreateWithoutResumeInput[] | PortfolioUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutResumeInput | PortfolioCreateOrConnectWithoutResumeInput[]
    upsert?: PortfolioUpsertWithWhereUniqueWithoutResumeInput | PortfolioUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: PortfolioCreateManyResumeInputEnvelope
    set?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    disconnect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    delete?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    update?: PortfolioUpdateWithWhereUniqueWithoutResumeInput | PortfolioUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: PortfolioUpdateManyWithWhereWithoutResumeInput | PortfolioUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
  }

  export type ProfilePhotoUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ProfilePhotoCreateWithoutResumeInput, ProfilePhotoUncheckedCreateWithoutResumeInput> | ProfilePhotoCreateWithoutResumeInput[] | ProfilePhotoUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ProfilePhotoCreateOrConnectWithoutResumeInput | ProfilePhotoCreateOrConnectWithoutResumeInput[]
    upsert?: ProfilePhotoUpsertWithWhereUniqueWithoutResumeInput | ProfilePhotoUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ProfilePhotoCreateManyResumeInputEnvelope
    set?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
    disconnect?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
    delete?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
    connect?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
    update?: ProfilePhotoUpdateWithWhereUniqueWithoutResumeInput | ProfilePhotoUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ProfilePhotoUpdateManyWithWhereWithoutResumeInput | ProfilePhotoUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ProfilePhotoScalarWhereInput | ProfilePhotoScalarWhereInput[]
  }

  export type ResumeVersionUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeVersionCreateWithoutResumeInput, ResumeVersionUncheckedCreateWithoutResumeInput> | ResumeVersionCreateWithoutResumeInput[] | ResumeVersionUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeVersionCreateOrConnectWithoutResumeInput | ResumeVersionCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeVersionUpsertWithWhereUniqueWithoutResumeInput | ResumeVersionUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeVersionCreateManyResumeInputEnvelope
    set?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
    disconnect?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
    delete?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
    connect?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
    update?: ResumeVersionUpdateWithWhereUniqueWithoutResumeInput | ResumeVersionUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeVersionUpdateManyWithWhereWithoutResumeInput | ResumeVersionUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeVersionScalarWhereInput | ResumeVersionScalarWhereInput[]
  }

  export type ResumeVisibilityUpdateOneWithoutResumeNestedInput = {
    create?: XOR<ResumeVisibilityCreateWithoutResumeInput, ResumeVisibilityUncheckedCreateWithoutResumeInput>
    connectOrCreate?: ResumeVisibilityCreateOrConnectWithoutResumeInput
    upsert?: ResumeVisibilityUpsertWithoutResumeInput
    disconnect?: ResumeVisibilityWhereInput | boolean
    delete?: ResumeVisibilityWhereInput | boolean
    connect?: ResumeVisibilityWhereUniqueInput
    update?: XOR<XOR<ResumeVisibilityUpdateToOneWithWhereWithoutResumeInput, ResumeVisibilityUpdateWithoutResumeInput>, ResumeVisibilityUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeReviewStatusUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeReviewStatusCreateWithoutResumeInput, ResumeReviewStatusUncheckedCreateWithoutResumeInput> | ResumeReviewStatusCreateWithoutResumeInput[] | ResumeReviewStatusUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeReviewStatusCreateOrConnectWithoutResumeInput | ResumeReviewStatusCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeReviewStatusUpsertWithWhereUniqueWithoutResumeInput | ResumeReviewStatusUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeReviewStatusCreateManyResumeInputEnvelope
    set?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
    disconnect?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
    delete?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
    connect?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
    update?: ResumeReviewStatusUpdateWithWhereUniqueWithoutResumeInput | ResumeReviewStatusUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeReviewStatusUpdateManyWithWhereWithoutResumeInput | ResumeReviewStatusUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeReviewStatusScalarWhereInput | ResumeReviewStatusScalarWhereInput[]
  }

  export type ResumeViewLogUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeViewLogCreateWithoutResumeInput, ResumeViewLogUncheckedCreateWithoutResumeInput> | ResumeViewLogCreateWithoutResumeInput[] | ResumeViewLogUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutResumeInput | ResumeViewLogCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeViewLogUpsertWithWhereUniqueWithoutResumeInput | ResumeViewLogUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeViewLogCreateManyResumeInputEnvelope
    set?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    disconnect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    delete?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    update?: ResumeViewLogUpdateWithWhereUniqueWithoutResumeInput | ResumeViewLogUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeViewLogUpdateManyWithWhereWithoutResumeInput | ResumeViewLogUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeViewLogScalarWhereInput | ResumeViewLogScalarWhereInput[]
  }

  export type ResumePDFUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumePDFCreateWithoutResumeInput, ResumePDFUncheckedCreateWithoutResumeInput> | ResumePDFCreateWithoutResumeInput[] | ResumePDFUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumePDFCreateOrConnectWithoutResumeInput | ResumePDFCreateOrConnectWithoutResumeInput[]
    upsert?: ResumePDFUpsertWithWhereUniqueWithoutResumeInput | ResumePDFUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumePDFCreateManyResumeInputEnvelope
    set?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
    disconnect?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
    delete?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
    connect?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
    update?: ResumePDFUpdateWithWhereUniqueWithoutResumeInput | ResumePDFUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumePDFUpdateManyWithWhereWithoutResumeInput | ResumePDFUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumePDFScalarWhereInput | ResumePDFScalarWhereInput[]
  }

  export type ResumeReviewLogUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeReviewLogCreateWithoutResumeInput, ResumeReviewLogUncheckedCreateWithoutResumeInput> | ResumeReviewLogCreateWithoutResumeInput[] | ResumeReviewLogUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutResumeInput | ResumeReviewLogCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeReviewLogUpsertWithWhereUniqueWithoutResumeInput | ResumeReviewLogUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeReviewLogCreateManyResumeInputEnvelope
    set?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    disconnect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    delete?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    connect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    update?: ResumeReviewLogUpdateWithWhereUniqueWithoutResumeInput | ResumeReviewLogUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeReviewLogUpdateManyWithWhereWithoutResumeInput | ResumeReviewLogUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeReviewLogScalarWhereInput | ResumeReviewLogScalarWhereInput[]
  }

  export type MessageThreadUpdateManyWithoutResumeNestedInput = {
    create?: XOR<MessageThreadCreateWithoutResumeInput, MessageThreadUncheckedCreateWithoutResumeInput> | MessageThreadCreateWithoutResumeInput[] | MessageThreadUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutResumeInput | MessageThreadCreateOrConnectWithoutResumeInput[]
    upsert?: MessageThreadUpsertWithWhereUniqueWithoutResumeInput | MessageThreadUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: MessageThreadCreateManyResumeInputEnvelope
    set?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    disconnect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    delete?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    update?: MessageThreadUpdateWithWhereUniqueWithoutResumeInput | MessageThreadUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: MessageThreadUpdateManyWithWhereWithoutResumeInput | MessageThreadUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
  }

  export type ResumeAccessGrantUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutResumeInput, ResumeAccessGrantUncheckedCreateWithoutResumeInput> | ResumeAccessGrantCreateWithoutResumeInput[] | ResumeAccessGrantUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutResumeInput | ResumeAccessGrantCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeAccessGrantUpsertWithWhereUniqueWithoutResumeInput | ResumeAccessGrantUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeAccessGrantCreateManyResumeInputEnvelope
    set?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    disconnect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    delete?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    update?: ResumeAccessGrantUpdateWithWhereUniqueWithoutResumeInput | ResumeAccessGrantUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeAccessGrantUpdateManyWithWhereWithoutResumeInput | ResumeAccessGrantUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeAccessGrantScalarWhereInput | ResumeAccessGrantScalarWhereInput[]
  }

  export type JobApplicationUpdateManyWithoutResumeNestedInput = {
    create?: XOR<JobApplicationCreateWithoutResumeInput, JobApplicationUncheckedCreateWithoutResumeInput> | JobApplicationCreateWithoutResumeInput[] | JobApplicationUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutResumeInput | JobApplicationCreateOrConnectWithoutResumeInput[]
    upsert?: JobApplicationUpsertWithWhereUniqueWithoutResumeInput | JobApplicationUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: JobApplicationCreateManyResumeInputEnvelope
    set?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    disconnect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    delete?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    update?: JobApplicationUpdateWithWhereUniqueWithoutResumeInput | JobApplicationUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: JobApplicationUpdateManyWithWhereWithoutResumeInput | JobApplicationUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutResumeNestedInput = {
    create?: XOR<UserCreateWithoutResumeInput, UserUncheckedCreateWithoutResumeInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeInput
    upsert?: UserUpsertWithoutResumeInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumeInput, UserUpdateWithoutResumeInput>, UserUncheckedUpdateWithoutResumeInput>
  }

  export type LanguageUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<LanguageCreateWithoutResumeInput, LanguageUncheckedCreateWithoutResumeInput> | LanguageCreateWithoutResumeInput[] | LanguageUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutResumeInput | LanguageCreateOrConnectWithoutResumeInput[]
    upsert?: LanguageUpsertWithWhereUniqueWithoutResumeInput | LanguageUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: LanguageCreateManyResumeInputEnvelope
    set?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    disconnect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    delete?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    update?: LanguageUpdateWithWhereUniqueWithoutResumeInput | LanguageUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: LanguageUpdateManyWithWhereWithoutResumeInput | LanguageUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
  }

  export type EducationUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<EducationCreateWithoutResumeInput, EducationUncheckedCreateWithoutResumeInput> | EducationCreateWithoutResumeInput[] | EducationUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutResumeInput | EducationCreateOrConnectWithoutResumeInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutResumeInput | EducationUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: EducationCreateManyResumeInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutResumeInput | EducationUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutResumeInput | EducationUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type ExperienceUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ExperienceCreateWithoutResumeInput, ExperienceUncheckedCreateWithoutResumeInput> | ExperienceCreateWithoutResumeInput[] | ExperienceUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutResumeInput | ExperienceCreateOrConnectWithoutResumeInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutResumeInput | ExperienceUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ExperienceCreateManyResumeInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutResumeInput | ExperienceUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutResumeInput | ExperienceUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<SkillCreateWithoutResumeInput, SkillUncheckedCreateWithoutResumeInput> | SkillCreateWithoutResumeInput[] | SkillUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutResumeInput | SkillCreateOrConnectWithoutResumeInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutResumeInput | SkillUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: SkillCreateManyResumeInputEnvelope
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutResumeInput | SkillUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutResumeInput | SkillUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type CertificateUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<CertificateCreateWithoutResumeInput, CertificateUncheckedCreateWithoutResumeInput> | CertificateCreateWithoutResumeInput[] | CertificateUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutResumeInput | CertificateCreateOrConnectWithoutResumeInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutResumeInput | CertificateUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: CertificateCreateManyResumeInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutResumeInput | CertificateUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutResumeInput | CertificateUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type TraitUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<TraitCreateWithoutResumeInput, TraitUncheckedCreateWithoutResumeInput> | TraitCreateWithoutResumeInput[] | TraitUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: TraitCreateOrConnectWithoutResumeInput | TraitCreateOrConnectWithoutResumeInput[]
    upsert?: TraitUpsertWithWhereUniqueWithoutResumeInput | TraitUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: TraitCreateManyResumeInputEnvelope
    set?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
    disconnect?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
    delete?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
    connect?: TraitWhereUniqueInput | TraitWhereUniqueInput[]
    update?: TraitUpdateWithWhereUniqueWithoutResumeInput | TraitUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: TraitUpdateManyWithWhereWithoutResumeInput | TraitUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: TraitScalarWhereInput | TraitScalarWhereInput[]
  }

  export type CommuteUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<CommuteCreateWithoutResumeInput, CommuteUncheckedCreateWithoutResumeInput> | CommuteCreateWithoutResumeInput[] | CommuteUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: CommuteCreateOrConnectWithoutResumeInput | CommuteCreateOrConnectWithoutResumeInput[]
    upsert?: CommuteUpsertWithWhereUniqueWithoutResumeInput | CommuteUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: CommuteCreateManyResumeInputEnvelope
    set?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
    disconnect?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
    delete?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
    connect?: CommuteWhereUniqueInput | CommuteWhereUniqueInput[]
    update?: CommuteUpdateWithWhereUniqueWithoutResumeInput | CommuteUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: CommuteUpdateManyWithWhereWithoutResumeInput | CommuteUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: CommuteScalarWhereInput | CommuteScalarWhereInput[]
  }

  export type WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<WorkingTimeCreateWithoutResumeInput, WorkingTimeUncheckedCreateWithoutResumeInput> | WorkingTimeCreateWithoutResumeInput[] | WorkingTimeUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: WorkingTimeCreateOrConnectWithoutResumeInput | WorkingTimeCreateOrConnectWithoutResumeInput[]
    upsert?: WorkingTimeUpsertWithWhereUniqueWithoutResumeInput | WorkingTimeUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: WorkingTimeCreateManyResumeInputEnvelope
    set?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
    disconnect?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
    delete?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
    connect?: WorkingTimeWhereUniqueInput | WorkingTimeWhereUniqueInput[]
    update?: WorkingTimeUpdateWithWhereUniqueWithoutResumeInput | WorkingTimeUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: WorkingTimeUpdateManyWithWhereWithoutResumeInput | WorkingTimeUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: WorkingTimeScalarWhereInput | WorkingTimeScalarWhereInput[]
  }

  export type WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<WorkIdentityCreateWithoutResumeInput, WorkIdentityUncheckedCreateWithoutResumeInput> | WorkIdentityCreateWithoutResumeInput[] | WorkIdentityUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: WorkIdentityCreateOrConnectWithoutResumeInput | WorkIdentityCreateOrConnectWithoutResumeInput[]
    upsert?: WorkIdentityUpsertWithWhereUniqueWithoutResumeInput | WorkIdentityUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: WorkIdentityCreateManyResumeInputEnvelope
    set?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
    disconnect?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
    delete?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
    connect?: WorkIdentityWhereUniqueInput | WorkIdentityWhereUniqueInput[]
    update?: WorkIdentityUpdateWithWhereUniqueWithoutResumeInput | WorkIdentityUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: WorkIdentityUpdateManyWithWhereWithoutResumeInput | WorkIdentityUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: WorkIdentityScalarWhereInput | WorkIdentityScalarWhereInput[]
  }

  export type JobTypeUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<JobTypeCreateWithoutResumeInput, JobTypeUncheckedCreateWithoutResumeInput> | JobTypeCreateWithoutResumeInput[] | JobTypeUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobTypeCreateOrConnectWithoutResumeInput | JobTypeCreateOrConnectWithoutResumeInput[]
    upsert?: JobTypeUpsertWithWhereUniqueWithoutResumeInput | JobTypeUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: JobTypeCreateManyResumeInputEnvelope
    set?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
    disconnect?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
    delete?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
    connect?: JobTypeWhereUniqueInput | JobTypeWhereUniqueInput[]
    update?: JobTypeUpdateWithWhereUniqueWithoutResumeInput | JobTypeUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: JobTypeUpdateManyWithWhereWithoutResumeInput | JobTypeUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: JobTypeScalarWhereInput | JobTypeScalarWhereInput[]
  }

  export type EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<EmergencyContactCreateWithoutResumeInput, EmergencyContactUncheckedCreateWithoutResumeInput> | EmergencyContactCreateWithoutResumeInput[] | EmergencyContactUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: EmergencyContactCreateOrConnectWithoutResumeInput | EmergencyContactCreateOrConnectWithoutResumeInput[]
    upsert?: EmergencyContactUpsertWithWhereUniqueWithoutResumeInput | EmergencyContactUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: EmergencyContactCreateManyResumeInputEnvelope
    set?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    disconnect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    delete?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    connect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    update?: EmergencyContactUpdateWithWhereUniqueWithoutResumeInput | EmergencyContactUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: EmergencyContactUpdateManyWithWhereWithoutResumeInput | EmergencyContactUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: EmergencyContactScalarWhereInput | EmergencyContactScalarWhereInput[]
  }

  export type BiographyUncheckedUpdateOneWithoutResumeNestedInput = {
    create?: XOR<BiographyCreateWithoutResumeInput, BiographyUncheckedCreateWithoutResumeInput>
    connectOrCreate?: BiographyCreateOrConnectWithoutResumeInput
    upsert?: BiographyUpsertWithoutResumeInput
    disconnect?: BiographyWhereInput | boolean
    delete?: BiographyWhereInput | boolean
    connect?: BiographyWhereUniqueInput
    update?: XOR<XOR<BiographyUpdateToOneWithWhereWithoutResumeInput, BiographyUpdateWithoutResumeInput>, BiographyUncheckedUpdateWithoutResumeInput>
  }

  export type PortfolioUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<PortfolioCreateWithoutResumeInput, PortfolioUncheckedCreateWithoutResumeInput> | PortfolioCreateWithoutResumeInput[] | PortfolioUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutResumeInput | PortfolioCreateOrConnectWithoutResumeInput[]
    upsert?: PortfolioUpsertWithWhereUniqueWithoutResumeInput | PortfolioUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: PortfolioCreateManyResumeInputEnvelope
    set?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    disconnect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    delete?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    update?: PortfolioUpdateWithWhereUniqueWithoutResumeInput | PortfolioUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: PortfolioUpdateManyWithWhereWithoutResumeInput | PortfolioUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
  }

  export type ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ProfilePhotoCreateWithoutResumeInput, ProfilePhotoUncheckedCreateWithoutResumeInput> | ProfilePhotoCreateWithoutResumeInput[] | ProfilePhotoUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ProfilePhotoCreateOrConnectWithoutResumeInput | ProfilePhotoCreateOrConnectWithoutResumeInput[]
    upsert?: ProfilePhotoUpsertWithWhereUniqueWithoutResumeInput | ProfilePhotoUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ProfilePhotoCreateManyResumeInputEnvelope
    set?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
    disconnect?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
    delete?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
    connect?: ProfilePhotoWhereUniqueInput | ProfilePhotoWhereUniqueInput[]
    update?: ProfilePhotoUpdateWithWhereUniqueWithoutResumeInput | ProfilePhotoUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ProfilePhotoUpdateManyWithWhereWithoutResumeInput | ProfilePhotoUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ProfilePhotoScalarWhereInput | ProfilePhotoScalarWhereInput[]
  }

  export type ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeVersionCreateWithoutResumeInput, ResumeVersionUncheckedCreateWithoutResumeInput> | ResumeVersionCreateWithoutResumeInput[] | ResumeVersionUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeVersionCreateOrConnectWithoutResumeInput | ResumeVersionCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeVersionUpsertWithWhereUniqueWithoutResumeInput | ResumeVersionUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeVersionCreateManyResumeInputEnvelope
    set?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
    disconnect?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
    delete?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
    connect?: ResumeVersionWhereUniqueInput | ResumeVersionWhereUniqueInput[]
    update?: ResumeVersionUpdateWithWhereUniqueWithoutResumeInput | ResumeVersionUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeVersionUpdateManyWithWhereWithoutResumeInput | ResumeVersionUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeVersionScalarWhereInput | ResumeVersionScalarWhereInput[]
  }

  export type ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput = {
    create?: XOR<ResumeVisibilityCreateWithoutResumeInput, ResumeVisibilityUncheckedCreateWithoutResumeInput>
    connectOrCreate?: ResumeVisibilityCreateOrConnectWithoutResumeInput
    upsert?: ResumeVisibilityUpsertWithoutResumeInput
    disconnect?: ResumeVisibilityWhereInput | boolean
    delete?: ResumeVisibilityWhereInput | boolean
    connect?: ResumeVisibilityWhereUniqueInput
    update?: XOR<XOR<ResumeVisibilityUpdateToOneWithWhereWithoutResumeInput, ResumeVisibilityUpdateWithoutResumeInput>, ResumeVisibilityUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeReviewStatusCreateWithoutResumeInput, ResumeReviewStatusUncheckedCreateWithoutResumeInput> | ResumeReviewStatusCreateWithoutResumeInput[] | ResumeReviewStatusUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeReviewStatusCreateOrConnectWithoutResumeInput | ResumeReviewStatusCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeReviewStatusUpsertWithWhereUniqueWithoutResumeInput | ResumeReviewStatusUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeReviewStatusCreateManyResumeInputEnvelope
    set?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
    disconnect?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
    delete?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
    connect?: ResumeReviewStatusWhereUniqueInput | ResumeReviewStatusWhereUniqueInput[]
    update?: ResumeReviewStatusUpdateWithWhereUniqueWithoutResumeInput | ResumeReviewStatusUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeReviewStatusUpdateManyWithWhereWithoutResumeInput | ResumeReviewStatusUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeReviewStatusScalarWhereInput | ResumeReviewStatusScalarWhereInput[]
  }

  export type ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeViewLogCreateWithoutResumeInput, ResumeViewLogUncheckedCreateWithoutResumeInput> | ResumeViewLogCreateWithoutResumeInput[] | ResumeViewLogUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutResumeInput | ResumeViewLogCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeViewLogUpsertWithWhereUniqueWithoutResumeInput | ResumeViewLogUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeViewLogCreateManyResumeInputEnvelope
    set?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    disconnect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    delete?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    update?: ResumeViewLogUpdateWithWhereUniqueWithoutResumeInput | ResumeViewLogUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeViewLogUpdateManyWithWhereWithoutResumeInput | ResumeViewLogUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeViewLogScalarWhereInput | ResumeViewLogScalarWhereInput[]
  }

  export type ResumePDFUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumePDFCreateWithoutResumeInput, ResumePDFUncheckedCreateWithoutResumeInput> | ResumePDFCreateWithoutResumeInput[] | ResumePDFUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumePDFCreateOrConnectWithoutResumeInput | ResumePDFCreateOrConnectWithoutResumeInput[]
    upsert?: ResumePDFUpsertWithWhereUniqueWithoutResumeInput | ResumePDFUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumePDFCreateManyResumeInputEnvelope
    set?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
    disconnect?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
    delete?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
    connect?: ResumePDFWhereUniqueInput | ResumePDFWhereUniqueInput[]
    update?: ResumePDFUpdateWithWhereUniqueWithoutResumeInput | ResumePDFUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumePDFUpdateManyWithWhereWithoutResumeInput | ResumePDFUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumePDFScalarWhereInput | ResumePDFScalarWhereInput[]
  }

  export type ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeReviewLogCreateWithoutResumeInput, ResumeReviewLogUncheckedCreateWithoutResumeInput> | ResumeReviewLogCreateWithoutResumeInput[] | ResumeReviewLogUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutResumeInput | ResumeReviewLogCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeReviewLogUpsertWithWhereUniqueWithoutResumeInput | ResumeReviewLogUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeReviewLogCreateManyResumeInputEnvelope
    set?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    disconnect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    delete?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    connect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    update?: ResumeReviewLogUpdateWithWhereUniqueWithoutResumeInput | ResumeReviewLogUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeReviewLogUpdateManyWithWhereWithoutResumeInput | ResumeReviewLogUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeReviewLogScalarWhereInput | ResumeReviewLogScalarWhereInput[]
  }

  export type MessageThreadUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<MessageThreadCreateWithoutResumeInput, MessageThreadUncheckedCreateWithoutResumeInput> | MessageThreadCreateWithoutResumeInput[] | MessageThreadUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutResumeInput | MessageThreadCreateOrConnectWithoutResumeInput[]
    upsert?: MessageThreadUpsertWithWhereUniqueWithoutResumeInput | MessageThreadUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: MessageThreadCreateManyResumeInputEnvelope
    set?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    disconnect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    delete?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    update?: MessageThreadUpdateWithWhereUniqueWithoutResumeInput | MessageThreadUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: MessageThreadUpdateManyWithWhereWithoutResumeInput | MessageThreadUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
  }

  export type ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutResumeInput, ResumeAccessGrantUncheckedCreateWithoutResumeInput> | ResumeAccessGrantCreateWithoutResumeInput[] | ResumeAccessGrantUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutResumeInput | ResumeAccessGrantCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeAccessGrantUpsertWithWhereUniqueWithoutResumeInput | ResumeAccessGrantUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeAccessGrantCreateManyResumeInputEnvelope
    set?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    disconnect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    delete?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    update?: ResumeAccessGrantUpdateWithWhereUniqueWithoutResumeInput | ResumeAccessGrantUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeAccessGrantUpdateManyWithWhereWithoutResumeInput | ResumeAccessGrantUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeAccessGrantScalarWhereInput | ResumeAccessGrantScalarWhereInput[]
  }

  export type JobApplicationUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<JobApplicationCreateWithoutResumeInput, JobApplicationUncheckedCreateWithoutResumeInput> | JobApplicationCreateWithoutResumeInput[] | JobApplicationUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutResumeInput | JobApplicationCreateOrConnectWithoutResumeInput[]
    upsert?: JobApplicationUpsertWithWhereUniqueWithoutResumeInput | JobApplicationUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: JobApplicationCreateManyResumeInputEnvelope
    set?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    disconnect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    delete?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    update?: JobApplicationUpdateWithWhereUniqueWithoutResumeInput | JobApplicationUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: JobApplicationUpdateManyWithWhereWithoutResumeInput | JobApplicationUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
  }

  export type UserResumeCreateNestedOneWithoutLanguagesInput = {
    create?: XOR<UserResumeCreateWithoutLanguagesInput, UserResumeUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutLanguagesInput
    connect?: UserResumeWhereUniqueInput
  }

  export type EnumLanguageLevelFieldUpdateOperationsInput = {
    set?: $Enums.LanguageLevel
  }

  export type UserResumeUpdateOneRequiredWithoutLanguagesNestedInput = {
    create?: XOR<UserResumeCreateWithoutLanguagesInput, UserResumeUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutLanguagesInput
    upsert?: UserResumeUpsertWithoutLanguagesInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutLanguagesInput, UserResumeUpdateWithoutLanguagesInput>, UserResumeUncheckedUpdateWithoutLanguagesInput>
  }

  export type UserResumeCreateNestedOneWithoutEducationsInput = {
    create?: XOR<UserResumeCreateWithoutEducationsInput, UserResumeUncheckedCreateWithoutEducationsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutEducationsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type EnumEducationStatusFieldUpdateOperationsInput = {
    set?: $Enums.EducationStatus
  }

  export type UserResumeUpdateOneRequiredWithoutEducationsNestedInput = {
    create?: XOR<UserResumeCreateWithoutEducationsInput, UserResumeUncheckedCreateWithoutEducationsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutEducationsInput
    upsert?: UserResumeUpsertWithoutEducationsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutEducationsInput, UserResumeUpdateWithoutEducationsInput>, UserResumeUncheckedUpdateWithoutEducationsInput>
  }

  export type UserResumeCreateNestedOneWithoutExperiencesInput = {
    create?: XOR<UserResumeCreateWithoutExperiencesInput, UserResumeUncheckedCreateWithoutExperiencesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutExperiencesInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutExperiencesNestedInput = {
    create?: XOR<UserResumeCreateWithoutExperiencesInput, UserResumeUncheckedCreateWithoutExperiencesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutExperiencesInput
    upsert?: UserResumeUpsertWithoutExperiencesInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutExperiencesInput, UserResumeUpdateWithoutExperiencesInput>, UserResumeUncheckedUpdateWithoutExperiencesInput>
  }

  export type UserResumeCreateNestedOneWithoutSkillsInput = {
    create?: XOR<UserResumeCreateWithoutSkillsInput, UserResumeUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutSkillsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutSkillsNestedInput = {
    create?: XOR<UserResumeCreateWithoutSkillsInput, UserResumeUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutSkillsInput
    upsert?: UserResumeUpsertWithoutSkillsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutSkillsInput, UserResumeUpdateWithoutSkillsInput>, UserResumeUncheckedUpdateWithoutSkillsInput>
  }

  export type UserResumeCreateNestedOneWithoutCertificatesInput = {
    create?: XOR<UserResumeCreateWithoutCertificatesInput, UserResumeUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutCertificatesInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutCertificatesNestedInput = {
    create?: XOR<UserResumeCreateWithoutCertificatesInput, UserResumeUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutCertificatesInput
    upsert?: UserResumeUpsertWithoutCertificatesInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutCertificatesInput, UserResumeUpdateWithoutCertificatesInput>, UserResumeUncheckedUpdateWithoutCertificatesInput>
  }

  export type UserResumeCreateNestedOneWithoutTraitsInput = {
    create?: XOR<UserResumeCreateWithoutTraitsInput, UserResumeUncheckedCreateWithoutTraitsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutTraitsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutTraitsNestedInput = {
    create?: XOR<UserResumeCreateWithoutTraitsInput, UserResumeUncheckedCreateWithoutTraitsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutTraitsInput
    upsert?: UserResumeUpsertWithoutTraitsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutTraitsInput, UserResumeUpdateWithoutTraitsInput>, UserResumeUncheckedUpdateWithoutTraitsInput>
  }

  export type UserResumeCreateNestedOneWithoutCommuteOptionsInput = {
    create?: XOR<UserResumeCreateWithoutCommuteOptionsInput, UserResumeUncheckedCreateWithoutCommuteOptionsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutCommuteOptionsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type EnumCommuteMethodFieldUpdateOperationsInput = {
    set?: $Enums.CommuteMethod
  }

  export type UserResumeUpdateOneRequiredWithoutCommuteOptionsNestedInput = {
    create?: XOR<UserResumeCreateWithoutCommuteOptionsInput, UserResumeUncheckedCreateWithoutCommuteOptionsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutCommuteOptionsInput
    upsert?: UserResumeUpsertWithoutCommuteOptionsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutCommuteOptionsInput, UserResumeUpdateWithoutCommuteOptionsInput>, UserResumeUncheckedUpdateWithoutCommuteOptionsInput>
  }

  export type UserResumeCreateNestedOneWithoutWorkingTimesInput = {
    create?: XOR<UserResumeCreateWithoutWorkingTimesInput, UserResumeUncheckedCreateWithoutWorkingTimesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutWorkingTimesInput
    connect?: UserResumeWhereUniqueInput
  }

  export type EnumShiftTypeFieldUpdateOperationsInput = {
    set?: $Enums.ShiftType
  }

  export type UserResumeUpdateOneRequiredWithoutWorkingTimesNestedInput = {
    create?: XOR<UserResumeCreateWithoutWorkingTimesInput, UserResumeUncheckedCreateWithoutWorkingTimesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutWorkingTimesInput
    upsert?: UserResumeUpsertWithoutWorkingTimesInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutWorkingTimesInput, UserResumeUpdateWithoutWorkingTimesInput>, UserResumeUncheckedUpdateWithoutWorkingTimesInput>
  }

  export type UserResumeCreateNestedOneWithoutWorkIdentitiesInput = {
    create?: XOR<UserResumeCreateWithoutWorkIdentitiesInput, UserResumeUncheckedCreateWithoutWorkIdentitiesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutWorkIdentitiesInput
    connect?: UserResumeWhereUniqueInput
  }

  export type EnumWorkIdentityTypeFieldUpdateOperationsInput = {
    set?: $Enums.WorkIdentityType
  }

  export type UserResumeUpdateOneRequiredWithoutWorkIdentitiesNestedInput = {
    create?: XOR<UserResumeCreateWithoutWorkIdentitiesInput, UserResumeUncheckedCreateWithoutWorkIdentitiesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutWorkIdentitiesInput
    upsert?: UserResumeUpsertWithoutWorkIdentitiesInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutWorkIdentitiesInput, UserResumeUpdateWithoutWorkIdentitiesInput>, UserResumeUncheckedUpdateWithoutWorkIdentitiesInput>
  }

  export type UserResumeCreateNestedOneWithoutJobPreferencesInput = {
    create?: XOR<UserResumeCreateWithoutJobPreferencesInput, UserResumeUncheckedCreateWithoutJobPreferencesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutJobPreferencesInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutJobPreferencesNestedInput = {
    create?: XOR<UserResumeCreateWithoutJobPreferencesInput, UserResumeUncheckedCreateWithoutJobPreferencesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutJobPreferencesInput
    upsert?: UserResumeUpsertWithoutJobPreferencesInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutJobPreferencesInput, UserResumeUpdateWithoutJobPreferencesInput>, UserResumeUncheckedUpdateWithoutJobPreferencesInput>
  }

  export type UserResumeCreateNestedOneWithoutEmergencyContactsInput = {
    create?: XOR<UserResumeCreateWithoutEmergencyContactsInput, UserResumeUncheckedCreateWithoutEmergencyContactsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutEmergencyContactsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type EnumContactRelationFieldUpdateOperationsInput = {
    set?: $Enums.ContactRelation
  }

  export type UserResumeUpdateOneRequiredWithoutEmergencyContactsNestedInput = {
    create?: XOR<UserResumeCreateWithoutEmergencyContactsInput, UserResumeUncheckedCreateWithoutEmergencyContactsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutEmergencyContactsInput
    upsert?: UserResumeUpsertWithoutEmergencyContactsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutEmergencyContactsInput, UserResumeUpdateWithoutEmergencyContactsInput>, UserResumeUncheckedUpdateWithoutEmergencyContactsInput>
  }

  export type UserResumeCreateNestedOneWithoutBiographyInput = {
    create?: XOR<UserResumeCreateWithoutBiographyInput, UserResumeUncheckedCreateWithoutBiographyInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutBiographyInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutBiographyNestedInput = {
    create?: XOR<UserResumeCreateWithoutBiographyInput, UserResumeUncheckedCreateWithoutBiographyInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutBiographyInput
    upsert?: UserResumeUpsertWithoutBiographyInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutBiographyInput, UserResumeUpdateWithoutBiographyInput>, UserResumeUncheckedUpdateWithoutBiographyInput>
  }

  export type UserResumeCreateNestedOneWithoutPortfolioInput = {
    create?: XOR<UserResumeCreateWithoutPortfolioInput, UserResumeUncheckedCreateWithoutPortfolioInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutPortfolioInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutPortfolioNestedInput = {
    create?: XOR<UserResumeCreateWithoutPortfolioInput, UserResumeUncheckedCreateWithoutPortfolioInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutPortfolioInput
    upsert?: UserResumeUpsertWithoutPortfolioInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutPortfolioInput, UserResumeUpdateWithoutPortfolioInput>, UserResumeUncheckedUpdateWithoutPortfolioInput>
  }

  export type UserResumeCreateNestedOneWithoutProfilePhotosInput = {
    create?: XOR<UserResumeCreateWithoutProfilePhotosInput, UserResumeUncheckedCreateWithoutProfilePhotosInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutProfilePhotosInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutProfilePhotosNestedInput = {
    create?: XOR<UserResumeCreateWithoutProfilePhotosInput, UserResumeUncheckedCreateWithoutProfilePhotosInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutProfilePhotosInput
    upsert?: UserResumeUpsertWithoutProfilePhotosInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutProfilePhotosInput, UserResumeUpdateWithoutProfilePhotosInput>, UserResumeUncheckedUpdateWithoutProfilePhotosInput>
  }

  export type UserResumeCreateNestedOneWithoutResumeVersionsInput = {
    create?: XOR<UserResumeCreateWithoutResumeVersionsInput, UserResumeUncheckedCreateWithoutResumeVersionsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeVersionsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutResumeVersionsNestedInput = {
    create?: XOR<UserResumeCreateWithoutResumeVersionsInput, UserResumeUncheckedCreateWithoutResumeVersionsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeVersionsInput
    upsert?: UserResumeUpsertWithoutResumeVersionsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutResumeVersionsInput, UserResumeUpdateWithoutResumeVersionsInput>, UserResumeUncheckedUpdateWithoutResumeVersionsInput>
  }

  export type UserResumeCreateNestedOneWithoutResumeVisibilityInput = {
    create?: XOR<UserResumeCreateWithoutResumeVisibilityInput, UserResumeUncheckedCreateWithoutResumeVisibilityInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeVisibilityInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutResumeVisibilityNestedInput = {
    create?: XOR<UserResumeCreateWithoutResumeVisibilityInput, UserResumeUncheckedCreateWithoutResumeVisibilityInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeVisibilityInput
    upsert?: UserResumeUpsertWithoutResumeVisibilityInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutResumeVisibilityInput, UserResumeUpdateWithoutResumeVisibilityInput>, UserResumeUncheckedUpdateWithoutResumeVisibilityInput>
  }

  export type UserResumeCreateNestedOneWithoutResumeReviewStatusesInput = {
    create?: XOR<UserResumeCreateWithoutResumeReviewStatusesInput, UserResumeUncheckedCreateWithoutResumeReviewStatusesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeReviewStatusesInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutResumeReviewStatusesNestedInput = {
    create?: XOR<UserResumeCreateWithoutResumeReviewStatusesInput, UserResumeUncheckedCreateWithoutResumeReviewStatusesInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeReviewStatusesInput
    upsert?: UserResumeUpsertWithoutResumeReviewStatusesInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutResumeReviewStatusesInput, UserResumeUpdateWithoutResumeReviewStatusesInput>, UserResumeUncheckedUpdateWithoutResumeReviewStatusesInput>
  }

  export type UserResumeCreateNestedOneWithoutResumePDFsInput = {
    create?: XOR<UserResumeCreateWithoutResumePDFsInput, UserResumeUncheckedCreateWithoutResumePDFsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumePDFsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeUpdateOneRequiredWithoutResumePDFsNestedInput = {
    create?: XOR<UserResumeCreateWithoutResumePDFsInput, UserResumeUncheckedCreateWithoutResumePDFsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumePDFsInput
    upsert?: UserResumeUpsertWithoutResumePDFsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutResumePDFsInput, UserResumeUpdateWithoutResumePDFsInput>, UserResumeUncheckedUpdateWithoutResumePDFsInput>
  }

  export type UserCreateNestedOneWithoutUserReviewsReceivedInput = {
    create?: XOR<UserCreateWithoutUserReviewsReceivedInput, UserUncheckedCreateWithoutUserReviewsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserReviewsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserReviewsGivenInput = {
    create?: XOR<UserCreateWithoutUserReviewsGivenInput, UserUncheckedCreateWithoutUserReviewsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserReviewsGivenInput
    connect?: UserWhereUniqueInput
  }

  export type UserReviewTagCreateNestedManyWithoutReviewInput = {
    create?: XOR<UserReviewTagCreateWithoutReviewInput, UserReviewTagUncheckedCreateWithoutReviewInput> | UserReviewTagCreateWithoutReviewInput[] | UserReviewTagUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: UserReviewTagCreateOrConnectWithoutReviewInput | UserReviewTagCreateOrConnectWithoutReviewInput[]
    createMany?: UserReviewTagCreateManyReviewInputEnvelope
    connect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
  }

  export type UserReviewTagUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<UserReviewTagCreateWithoutReviewInput, UserReviewTagUncheckedCreateWithoutReviewInput> | UserReviewTagCreateWithoutReviewInput[] | UserReviewTagUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: UserReviewTagCreateOrConnectWithoutReviewInput | UserReviewTagCreateOrConnectWithoutReviewInput[]
    createMany?: UserReviewTagCreateManyReviewInputEnvelope
    connect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutUserReviewsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutUserReviewsReceivedInput, UserUncheckedCreateWithoutUserReviewsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserReviewsReceivedInput
    upsert?: UserUpsertWithoutUserReviewsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserReviewsReceivedInput, UserUpdateWithoutUserReviewsReceivedInput>, UserUncheckedUpdateWithoutUserReviewsReceivedInput>
  }

  export type UserUpdateOneRequiredWithoutUserReviewsGivenNestedInput = {
    create?: XOR<UserCreateWithoutUserReviewsGivenInput, UserUncheckedCreateWithoutUserReviewsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserReviewsGivenInput
    upsert?: UserUpsertWithoutUserReviewsGivenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserReviewsGivenInput, UserUpdateWithoutUserReviewsGivenInput>, UserUncheckedUpdateWithoutUserReviewsGivenInput>
  }

  export type UserReviewTagUpdateManyWithoutReviewNestedInput = {
    create?: XOR<UserReviewTagCreateWithoutReviewInput, UserReviewTagUncheckedCreateWithoutReviewInput> | UserReviewTagCreateWithoutReviewInput[] | UserReviewTagUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: UserReviewTagCreateOrConnectWithoutReviewInput | UserReviewTagCreateOrConnectWithoutReviewInput[]
    upsert?: UserReviewTagUpsertWithWhereUniqueWithoutReviewInput | UserReviewTagUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: UserReviewTagCreateManyReviewInputEnvelope
    set?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    disconnect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    delete?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    connect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    update?: UserReviewTagUpdateWithWhereUniqueWithoutReviewInput | UserReviewTagUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: UserReviewTagUpdateManyWithWhereWithoutReviewInput | UserReviewTagUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: UserReviewTagScalarWhereInput | UserReviewTagScalarWhereInput[]
  }

  export type UserReviewTagUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<UserReviewTagCreateWithoutReviewInput, UserReviewTagUncheckedCreateWithoutReviewInput> | UserReviewTagCreateWithoutReviewInput[] | UserReviewTagUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: UserReviewTagCreateOrConnectWithoutReviewInput | UserReviewTagCreateOrConnectWithoutReviewInput[]
    upsert?: UserReviewTagUpsertWithWhereUniqueWithoutReviewInput | UserReviewTagUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: UserReviewTagCreateManyReviewInputEnvelope
    set?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    disconnect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    delete?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    connect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    update?: UserReviewTagUpdateWithWhereUniqueWithoutReviewInput | UserReviewTagUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: UserReviewTagUpdateManyWithWhereWithoutReviewInput | UserReviewTagUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: UserReviewTagScalarWhereInput | UserReviewTagScalarWhereInput[]
  }

  export type UserResumeCreateNestedOneWithoutResumeReviewLogsInput = {
    create?: XOR<UserResumeCreateWithoutResumeReviewLogsInput, UserResumeUncheckedCreateWithoutResumeReviewLogsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeReviewLogsInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResumeReviewsGivenInput = {
    create?: XOR<UserCreateWithoutResumeReviewsGivenInput, UserUncheckedCreateWithoutResumeReviewsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeReviewsGivenInput
    connect?: UserWhereUniqueInput
  }

  export type ResumeReviewTagCreateNestedManyWithoutReviewInput = {
    create?: XOR<ResumeReviewTagCreateWithoutReviewInput, ResumeReviewTagUncheckedCreateWithoutReviewInput> | ResumeReviewTagCreateWithoutReviewInput[] | ResumeReviewTagUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ResumeReviewTagCreateOrConnectWithoutReviewInput | ResumeReviewTagCreateOrConnectWithoutReviewInput[]
    createMany?: ResumeReviewTagCreateManyReviewInputEnvelope
    connect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
  }

  export type ResumeReviewTagUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ResumeReviewTagCreateWithoutReviewInput, ResumeReviewTagUncheckedCreateWithoutReviewInput> | ResumeReviewTagCreateWithoutReviewInput[] | ResumeReviewTagUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ResumeReviewTagCreateOrConnectWithoutReviewInput | ResumeReviewTagCreateOrConnectWithoutReviewInput[]
    createMany?: ResumeReviewTagCreateManyReviewInputEnvelope
    connect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
  }

  export type EnumReviewStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReviewStatus
  }

  export type UserResumeUpdateOneRequiredWithoutResumeReviewLogsNestedInput = {
    create?: XOR<UserResumeCreateWithoutResumeReviewLogsInput, UserResumeUncheckedCreateWithoutResumeReviewLogsInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutResumeReviewLogsInput
    upsert?: UserResumeUpsertWithoutResumeReviewLogsInput
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutResumeReviewLogsInput, UserResumeUpdateWithoutResumeReviewLogsInput>, UserResumeUncheckedUpdateWithoutResumeReviewLogsInput>
  }

  export type UserUpdateOneRequiredWithoutResumeReviewsGivenNestedInput = {
    create?: XOR<UserCreateWithoutResumeReviewsGivenInput, UserUncheckedCreateWithoutResumeReviewsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeReviewsGivenInput
    upsert?: UserUpsertWithoutResumeReviewsGivenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumeReviewsGivenInput, UserUpdateWithoutResumeReviewsGivenInput>, UserUncheckedUpdateWithoutResumeReviewsGivenInput>
  }

  export type ResumeReviewTagUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ResumeReviewTagCreateWithoutReviewInput, ResumeReviewTagUncheckedCreateWithoutReviewInput> | ResumeReviewTagCreateWithoutReviewInput[] | ResumeReviewTagUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ResumeReviewTagCreateOrConnectWithoutReviewInput | ResumeReviewTagCreateOrConnectWithoutReviewInput[]
    upsert?: ResumeReviewTagUpsertWithWhereUniqueWithoutReviewInput | ResumeReviewTagUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ResumeReviewTagCreateManyReviewInputEnvelope
    set?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    disconnect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    delete?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    connect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    update?: ResumeReviewTagUpdateWithWhereUniqueWithoutReviewInput | ResumeReviewTagUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ResumeReviewTagUpdateManyWithWhereWithoutReviewInput | ResumeReviewTagUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ResumeReviewTagScalarWhereInput | ResumeReviewTagScalarWhereInput[]
  }

  export type ResumeReviewTagUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ResumeReviewTagCreateWithoutReviewInput, ResumeReviewTagUncheckedCreateWithoutReviewInput> | ResumeReviewTagCreateWithoutReviewInput[] | ResumeReviewTagUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ResumeReviewTagCreateOrConnectWithoutReviewInput | ResumeReviewTagCreateOrConnectWithoutReviewInput[]
    upsert?: ResumeReviewTagUpsertWithWhereUniqueWithoutReviewInput | ResumeReviewTagUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ResumeReviewTagCreateManyReviewInputEnvelope
    set?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    disconnect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    delete?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    connect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    update?: ResumeReviewTagUpdateWithWhereUniqueWithoutReviewInput | ResumeReviewTagUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ResumeReviewTagUpdateManyWithWhereWithoutReviewInput | ResumeReviewTagUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ResumeReviewTagScalarWhereInput | ResumeReviewTagScalarWhereInput[]
  }

  export type ReviewTagOptionCreateNestedOneWithoutUserTagsInput = {
    create?: XOR<ReviewTagOptionCreateWithoutUserTagsInput, ReviewTagOptionUncheckedCreateWithoutUserTagsInput>
    connectOrCreate?: ReviewTagOptionCreateOrConnectWithoutUserTagsInput
    connect?: ReviewTagOptionWhereUniqueInput
  }

  export type UserReviewLogCreateNestedOneWithoutTagsInput = {
    create?: XOR<UserReviewLogCreateWithoutTagsInput, UserReviewLogUncheckedCreateWithoutTagsInput>
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutTagsInput
    connect?: UserReviewLogWhereUniqueInput
  }

  export type ReviewTagOptionUpdateOneRequiredWithoutUserTagsNestedInput = {
    create?: XOR<ReviewTagOptionCreateWithoutUserTagsInput, ReviewTagOptionUncheckedCreateWithoutUserTagsInput>
    connectOrCreate?: ReviewTagOptionCreateOrConnectWithoutUserTagsInput
    upsert?: ReviewTagOptionUpsertWithoutUserTagsInput
    connect?: ReviewTagOptionWhereUniqueInput
    update?: XOR<XOR<ReviewTagOptionUpdateToOneWithWhereWithoutUserTagsInput, ReviewTagOptionUpdateWithoutUserTagsInput>, ReviewTagOptionUncheckedUpdateWithoutUserTagsInput>
  }

  export type UserReviewLogUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<UserReviewLogCreateWithoutTagsInput, UserReviewLogUncheckedCreateWithoutTagsInput>
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutTagsInput
    upsert?: UserReviewLogUpsertWithoutTagsInput
    connect?: UserReviewLogWhereUniqueInput
    update?: XOR<XOR<UserReviewLogUpdateToOneWithWhereWithoutTagsInput, UserReviewLogUpdateWithoutTagsInput>, UserReviewLogUncheckedUpdateWithoutTagsInput>
  }

  export type ReviewTagOptionCreateNestedOneWithoutResumeTagsInput = {
    create?: XOR<ReviewTagOptionCreateWithoutResumeTagsInput, ReviewTagOptionUncheckedCreateWithoutResumeTagsInput>
    connectOrCreate?: ReviewTagOptionCreateOrConnectWithoutResumeTagsInput
    connect?: ReviewTagOptionWhereUniqueInput
  }

  export type ResumeReviewLogCreateNestedOneWithoutTagsInput = {
    create?: XOR<ResumeReviewLogCreateWithoutTagsInput, ResumeReviewLogUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutTagsInput
    connect?: ResumeReviewLogWhereUniqueInput
  }

  export type ReviewTagOptionUpdateOneRequiredWithoutResumeTagsNestedInput = {
    create?: XOR<ReviewTagOptionCreateWithoutResumeTagsInput, ReviewTagOptionUncheckedCreateWithoutResumeTagsInput>
    connectOrCreate?: ReviewTagOptionCreateOrConnectWithoutResumeTagsInput
    upsert?: ReviewTagOptionUpsertWithoutResumeTagsInput
    connect?: ReviewTagOptionWhereUniqueInput
    update?: XOR<XOR<ReviewTagOptionUpdateToOneWithWhereWithoutResumeTagsInput, ReviewTagOptionUpdateWithoutResumeTagsInput>, ReviewTagOptionUncheckedUpdateWithoutResumeTagsInput>
  }

  export type ResumeReviewLogUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ResumeReviewLogCreateWithoutTagsInput, ResumeReviewLogUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutTagsInput
    upsert?: ResumeReviewLogUpsertWithoutTagsInput
    connect?: ResumeReviewLogWhereUniqueInput
    update?: XOR<XOR<ResumeReviewLogUpdateToOneWithWhereWithoutTagsInput, ResumeReviewLogUpdateWithoutTagsInput>, ResumeReviewLogUncheckedUpdateWithoutTagsInput>
  }

  export type ResumeReviewTagCreateNestedManyWithoutTagInput = {
    create?: XOR<ResumeReviewTagCreateWithoutTagInput, ResumeReviewTagUncheckedCreateWithoutTagInput> | ResumeReviewTagCreateWithoutTagInput[] | ResumeReviewTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ResumeReviewTagCreateOrConnectWithoutTagInput | ResumeReviewTagCreateOrConnectWithoutTagInput[]
    createMany?: ResumeReviewTagCreateManyTagInputEnvelope
    connect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
  }

  export type UserReviewTagCreateNestedManyWithoutTagInput = {
    create?: XOR<UserReviewTagCreateWithoutTagInput, UserReviewTagUncheckedCreateWithoutTagInput> | UserReviewTagCreateWithoutTagInput[] | UserReviewTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: UserReviewTagCreateOrConnectWithoutTagInput | UserReviewTagCreateOrConnectWithoutTagInput[]
    createMany?: UserReviewTagCreateManyTagInputEnvelope
    connect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
  }

  export type ResumeReviewTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<ResumeReviewTagCreateWithoutTagInput, ResumeReviewTagUncheckedCreateWithoutTagInput> | ResumeReviewTagCreateWithoutTagInput[] | ResumeReviewTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ResumeReviewTagCreateOrConnectWithoutTagInput | ResumeReviewTagCreateOrConnectWithoutTagInput[]
    createMany?: ResumeReviewTagCreateManyTagInputEnvelope
    connect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
  }

  export type UserReviewTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<UserReviewTagCreateWithoutTagInput, UserReviewTagUncheckedCreateWithoutTagInput> | UserReviewTagCreateWithoutTagInput[] | UserReviewTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: UserReviewTagCreateOrConnectWithoutTagInput | UserReviewTagCreateOrConnectWithoutTagInput[]
    createMany?: UserReviewTagCreateManyTagInputEnvelope
    connect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
  }

  export type ResumeReviewTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<ResumeReviewTagCreateWithoutTagInput, ResumeReviewTagUncheckedCreateWithoutTagInput> | ResumeReviewTagCreateWithoutTagInput[] | ResumeReviewTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ResumeReviewTagCreateOrConnectWithoutTagInput | ResumeReviewTagCreateOrConnectWithoutTagInput[]
    upsert?: ResumeReviewTagUpsertWithWhereUniqueWithoutTagInput | ResumeReviewTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: ResumeReviewTagCreateManyTagInputEnvelope
    set?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    disconnect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    delete?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    connect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    update?: ResumeReviewTagUpdateWithWhereUniqueWithoutTagInput | ResumeReviewTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: ResumeReviewTagUpdateManyWithWhereWithoutTagInput | ResumeReviewTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: ResumeReviewTagScalarWhereInput | ResumeReviewTagScalarWhereInput[]
  }

  export type UserReviewTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<UserReviewTagCreateWithoutTagInput, UserReviewTagUncheckedCreateWithoutTagInput> | UserReviewTagCreateWithoutTagInput[] | UserReviewTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: UserReviewTagCreateOrConnectWithoutTagInput | UserReviewTagCreateOrConnectWithoutTagInput[]
    upsert?: UserReviewTagUpsertWithWhereUniqueWithoutTagInput | UserReviewTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: UserReviewTagCreateManyTagInputEnvelope
    set?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    disconnect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    delete?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    connect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    update?: UserReviewTagUpdateWithWhereUniqueWithoutTagInput | UserReviewTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: UserReviewTagUpdateManyWithWhereWithoutTagInput | UserReviewTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: UserReviewTagScalarWhereInput | UserReviewTagScalarWhereInput[]
  }

  export type ResumeReviewTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<ResumeReviewTagCreateWithoutTagInput, ResumeReviewTagUncheckedCreateWithoutTagInput> | ResumeReviewTagCreateWithoutTagInput[] | ResumeReviewTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ResumeReviewTagCreateOrConnectWithoutTagInput | ResumeReviewTagCreateOrConnectWithoutTagInput[]
    upsert?: ResumeReviewTagUpsertWithWhereUniqueWithoutTagInput | ResumeReviewTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: ResumeReviewTagCreateManyTagInputEnvelope
    set?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    disconnect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    delete?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    connect?: ResumeReviewTagWhereUniqueInput | ResumeReviewTagWhereUniqueInput[]
    update?: ResumeReviewTagUpdateWithWhereUniqueWithoutTagInput | ResumeReviewTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: ResumeReviewTagUpdateManyWithWhereWithoutTagInput | ResumeReviewTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: ResumeReviewTagScalarWhereInput | ResumeReviewTagScalarWhereInput[]
  }

  export type UserReviewTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<UserReviewTagCreateWithoutTagInput, UserReviewTagUncheckedCreateWithoutTagInput> | UserReviewTagCreateWithoutTagInput[] | UserReviewTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: UserReviewTagCreateOrConnectWithoutTagInput | UserReviewTagCreateOrConnectWithoutTagInput[]
    upsert?: UserReviewTagUpsertWithWhereUniqueWithoutTagInput | UserReviewTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: UserReviewTagCreateManyTagInputEnvelope
    set?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    disconnect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    delete?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    connect?: UserReviewTagWhereUniqueInput | UserReviewTagWhereUniqueInput[]
    update?: UserReviewTagUpdateWithWhereUniqueWithoutTagInput | UserReviewTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: UserReviewTagUpdateManyWithWhereWithoutTagInput | UserReviewTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: UserReviewTagScalarWhereInput | UserReviewTagScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutUsersInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserResumeCreateNestedOneWithoutPrimaryOfInput = {
    create?: XOR<UserResumeCreateWithoutPrimaryOfInput, UserResumeUncheckedCreateWithoutPrimaryOfInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutPrimaryOfInput
    connect?: UserResumeWhereUniqueInput
  }

  export type UserResumeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserResumeCreateWithoutUserInput, UserResumeUncheckedCreateWithoutUserInput> | UserResumeCreateWithoutUserInput[] | UserResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserResumeCreateOrConnectWithoutUserInput | UserResumeCreateOrConnectWithoutUserInput[]
    createMany?: UserResumeCreateManyUserInputEnvelope
    connect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
  }

  export type IpRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<IpRecordCreateWithoutUserInput, IpRecordUncheckedCreateWithoutUserInput> | IpRecordCreateWithoutUserInput[] | IpRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: IpRecordCreateOrConnectWithoutUserInput | IpRecordCreateOrConnectWithoutUserInput[]
    createMany?: IpRecordCreateManyUserInputEnvelope
    connect?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
  }

  export type DeviceRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<DeviceRecordCreateWithoutUserInput, DeviceRecordUncheckedCreateWithoutUserInput> | DeviceRecordCreateWithoutUserInput[] | DeviceRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeviceRecordCreateOrConnectWithoutUserInput | DeviceRecordCreateOrConnectWithoutUserInput[]
    createMany?: DeviceRecordCreateManyUserInputEnvelope
    connect?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
  }

  export type ResumeViewLogCreateNestedManyWithoutAdminInput = {
    create?: XOR<ResumeViewLogCreateWithoutAdminInput, ResumeViewLogUncheckedCreateWithoutAdminInput> | ResumeViewLogCreateWithoutAdminInput[] | ResumeViewLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutAdminInput | ResumeViewLogCreateOrConnectWithoutAdminInput[]
    createMany?: ResumeViewLogCreateManyAdminInputEnvelope
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
  }

  export type ResumeViewLogCreateNestedManyWithoutUserViewedByInput = {
    create?: XOR<ResumeViewLogCreateWithoutUserViewedByInput, ResumeViewLogUncheckedCreateWithoutUserViewedByInput> | ResumeViewLogCreateWithoutUserViewedByInput[] | ResumeViewLogUncheckedCreateWithoutUserViewedByInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutUserViewedByInput | ResumeViewLogCreateOrConnectWithoutUserViewedByInput[]
    createMany?: ResumeViewLogCreateManyUserViewedByInputEnvelope
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
  }

  export type ResumeReviewLogCreateNestedManyWithoutReviewerInput = {
    create?: XOR<ResumeReviewLogCreateWithoutReviewerInput, ResumeReviewLogUncheckedCreateWithoutReviewerInput> | ResumeReviewLogCreateWithoutReviewerInput[] | ResumeReviewLogUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutReviewerInput | ResumeReviewLogCreateOrConnectWithoutReviewerInput[]
    createMany?: ResumeReviewLogCreateManyReviewerInputEnvelope
    connect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
  }

  export type UserReviewLogCreateNestedManyWithoutReviewerInput = {
    create?: XOR<UserReviewLogCreateWithoutReviewerInput, UserReviewLogUncheckedCreateWithoutReviewerInput> | UserReviewLogCreateWithoutReviewerInput[] | UserReviewLogUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutReviewerInput | UserReviewLogCreateOrConnectWithoutReviewerInput[]
    createMany?: UserReviewLogCreateManyReviewerInputEnvelope
    connect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
  }

  export type UserReviewLogCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<UserReviewLogCreateWithoutTargetUserInput, UserReviewLogUncheckedCreateWithoutTargetUserInput> | UserReviewLogCreateWithoutTargetUserInput[] | UserReviewLogUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutTargetUserInput | UserReviewLogCreateOrConnectWithoutTargetUserInput[]
    createMany?: UserReviewLogCreateManyTargetUserInputEnvelope
    connect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
  }

  export type AccountHistoryLogCreateNestedManyWithoutOperatedByInput = {
    create?: XOR<AccountHistoryLogCreateWithoutOperatedByInput, AccountHistoryLogUncheckedCreateWithoutOperatedByInput> | AccountHistoryLogCreateWithoutOperatedByInput[] | AccountHistoryLogUncheckedCreateWithoutOperatedByInput[]
    connectOrCreate?: AccountHistoryLogCreateOrConnectWithoutOperatedByInput | AccountHistoryLogCreateOrConnectWithoutOperatedByInput[]
    createMany?: AccountHistoryLogCreateManyOperatedByInputEnvelope
    connect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
  }

  export type AccountHistoryLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountHistoryLogCreateWithoutUserInput, AccountHistoryLogUncheckedCreateWithoutUserInput> | AccountHistoryLogCreateWithoutUserInput[] | AccountHistoryLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountHistoryLogCreateOrConnectWithoutUserInput | AccountHistoryLogCreateOrConnectWithoutUserInput[]
    createMany?: AccountHistoryLogCreateManyUserInputEnvelope
    connect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
  }

  export type ResumeAccessGrantCreateNestedManyWithoutGrantedByInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutGrantedByInput, ResumeAccessGrantUncheckedCreateWithoutGrantedByInput> | ResumeAccessGrantCreateWithoutGrantedByInput[] | ResumeAccessGrantUncheckedCreateWithoutGrantedByInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutGrantedByInput | ResumeAccessGrantCreateOrConnectWithoutGrantedByInput[]
    createMany?: ResumeAccessGrantCreateManyGrantedByInputEnvelope
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
  }

  export type ResumeAccessGrantCreateNestedManyWithoutGrantedToInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutGrantedToInput, ResumeAccessGrantUncheckedCreateWithoutGrantedToInput> | ResumeAccessGrantCreateWithoutGrantedToInput[] | ResumeAccessGrantUncheckedCreateWithoutGrantedToInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutGrantedToInput | ResumeAccessGrantCreateOrConnectWithoutGrantedToInput[]
    createMany?: ResumeAccessGrantCreateManyGrantedToInputEnvelope
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
  }

  export type AttendanceLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput> | AttendanceLogCreateWithoutUserInput[] | AttendanceLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutUserInput | AttendanceLogCreateOrConnectWithoutUserInput[]
    createMany?: AttendanceLogCreateManyUserInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type ShiftScheduleCreateNestedManyWithoutUserInput = {
    create?: XOR<ShiftScheduleCreateWithoutUserInput, ShiftScheduleUncheckedCreateWithoutUserInput> | ShiftScheduleCreateWithoutUserInput[] | ShiftScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutUserInput | ShiftScheduleCreateOrConnectWithoutUserInput[]
    createMany?: ShiftScheduleCreateManyUserInputEnvelope
    connect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
  }

  export type PaySlipCreateNestedManyWithoutUserInput = {
    create?: XOR<PaySlipCreateWithoutUserInput, PaySlipUncheckedCreateWithoutUserInput> | PaySlipCreateWithoutUserInput[] | PaySlipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutUserInput | PaySlipCreateOrConnectWithoutUserInput[]
    createMany?: PaySlipCreateManyUserInputEnvelope
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
  }

  export type MessageLogCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageLogCreateWithoutSenderInput, MessageLogUncheckedCreateWithoutSenderInput> | MessageLogCreateWithoutSenderInput[] | MessageLogUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageLogCreateOrConnectWithoutSenderInput | MessageLogCreateOrConnectWithoutSenderInput[]
    createMany?: MessageLogCreateManySenderInputEnvelope
    connect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
  }

  export type MessageThreadCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MessageThreadCreateWithoutCreatedByInput, MessageThreadUncheckedCreateWithoutCreatedByInput> | MessageThreadCreateWithoutCreatedByInput[] | MessageThreadUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutCreatedByInput | MessageThreadCreateOrConnectWithoutCreatedByInput[]
    createMany?: MessageThreadCreateManyCreatedByInputEnvelope
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
  }

  export type UserResumeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserResumeCreateWithoutUserInput, UserResumeUncheckedCreateWithoutUserInput> | UserResumeCreateWithoutUserInput[] | UserResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserResumeCreateOrConnectWithoutUserInput | UserResumeCreateOrConnectWithoutUserInput[]
    createMany?: UserResumeCreateManyUserInputEnvelope
    connect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
  }

  export type IpRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<IpRecordCreateWithoutUserInput, IpRecordUncheckedCreateWithoutUserInput> | IpRecordCreateWithoutUserInput[] | IpRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: IpRecordCreateOrConnectWithoutUserInput | IpRecordCreateOrConnectWithoutUserInput[]
    createMany?: IpRecordCreateManyUserInputEnvelope
    connect?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
  }

  export type DeviceRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DeviceRecordCreateWithoutUserInput, DeviceRecordUncheckedCreateWithoutUserInput> | DeviceRecordCreateWithoutUserInput[] | DeviceRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeviceRecordCreateOrConnectWithoutUserInput | DeviceRecordCreateOrConnectWithoutUserInput[]
    createMany?: DeviceRecordCreateManyUserInputEnvelope
    connect?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
  }

  export type ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<ResumeViewLogCreateWithoutAdminInput, ResumeViewLogUncheckedCreateWithoutAdminInput> | ResumeViewLogCreateWithoutAdminInput[] | ResumeViewLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutAdminInput | ResumeViewLogCreateOrConnectWithoutAdminInput[]
    createMany?: ResumeViewLogCreateManyAdminInputEnvelope
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
  }

  export type ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput = {
    create?: XOR<ResumeViewLogCreateWithoutUserViewedByInput, ResumeViewLogUncheckedCreateWithoutUserViewedByInput> | ResumeViewLogCreateWithoutUserViewedByInput[] | ResumeViewLogUncheckedCreateWithoutUserViewedByInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutUserViewedByInput | ResumeViewLogCreateOrConnectWithoutUserViewedByInput[]
    createMany?: ResumeViewLogCreateManyUserViewedByInputEnvelope
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
  }

  export type ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<ResumeReviewLogCreateWithoutReviewerInput, ResumeReviewLogUncheckedCreateWithoutReviewerInput> | ResumeReviewLogCreateWithoutReviewerInput[] | ResumeReviewLogUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutReviewerInput | ResumeReviewLogCreateOrConnectWithoutReviewerInput[]
    createMany?: ResumeReviewLogCreateManyReviewerInputEnvelope
    connect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
  }

  export type UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<UserReviewLogCreateWithoutReviewerInput, UserReviewLogUncheckedCreateWithoutReviewerInput> | UserReviewLogCreateWithoutReviewerInput[] | UserReviewLogUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutReviewerInput | UserReviewLogCreateOrConnectWithoutReviewerInput[]
    createMany?: UserReviewLogCreateManyReviewerInputEnvelope
    connect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
  }

  export type UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<UserReviewLogCreateWithoutTargetUserInput, UserReviewLogUncheckedCreateWithoutTargetUserInput> | UserReviewLogCreateWithoutTargetUserInput[] | UserReviewLogUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutTargetUserInput | UserReviewLogCreateOrConnectWithoutTargetUserInput[]
    createMany?: UserReviewLogCreateManyTargetUserInputEnvelope
    connect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
  }

  export type AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput = {
    create?: XOR<AccountHistoryLogCreateWithoutOperatedByInput, AccountHistoryLogUncheckedCreateWithoutOperatedByInput> | AccountHistoryLogCreateWithoutOperatedByInput[] | AccountHistoryLogUncheckedCreateWithoutOperatedByInput[]
    connectOrCreate?: AccountHistoryLogCreateOrConnectWithoutOperatedByInput | AccountHistoryLogCreateOrConnectWithoutOperatedByInput[]
    createMany?: AccountHistoryLogCreateManyOperatedByInputEnvelope
    connect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
  }

  export type AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountHistoryLogCreateWithoutUserInput, AccountHistoryLogUncheckedCreateWithoutUserInput> | AccountHistoryLogCreateWithoutUserInput[] | AccountHistoryLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountHistoryLogCreateOrConnectWithoutUserInput | AccountHistoryLogCreateOrConnectWithoutUserInput[]
    createMany?: AccountHistoryLogCreateManyUserInputEnvelope
    connect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
  }

  export type ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutGrantedByInput, ResumeAccessGrantUncheckedCreateWithoutGrantedByInput> | ResumeAccessGrantCreateWithoutGrantedByInput[] | ResumeAccessGrantUncheckedCreateWithoutGrantedByInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutGrantedByInput | ResumeAccessGrantCreateOrConnectWithoutGrantedByInput[]
    createMany?: ResumeAccessGrantCreateManyGrantedByInputEnvelope
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
  }

  export type ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutGrantedToInput, ResumeAccessGrantUncheckedCreateWithoutGrantedToInput> | ResumeAccessGrantCreateWithoutGrantedToInput[] | ResumeAccessGrantUncheckedCreateWithoutGrantedToInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutGrantedToInput | ResumeAccessGrantCreateOrConnectWithoutGrantedToInput[]
    createMany?: ResumeAccessGrantCreateManyGrantedToInputEnvelope
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
  }

  export type AttendanceLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput> | AttendanceLogCreateWithoutUserInput[] | AttendanceLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutUserInput | AttendanceLogCreateOrConnectWithoutUserInput[]
    createMany?: AttendanceLogCreateManyUserInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type ShiftScheduleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShiftScheduleCreateWithoutUserInput, ShiftScheduleUncheckedCreateWithoutUserInput> | ShiftScheduleCreateWithoutUserInput[] | ShiftScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutUserInput | ShiftScheduleCreateOrConnectWithoutUserInput[]
    createMany?: ShiftScheduleCreateManyUserInputEnvelope
    connect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
  }

  export type PaySlipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaySlipCreateWithoutUserInput, PaySlipUncheckedCreateWithoutUserInput> | PaySlipCreateWithoutUserInput[] | PaySlipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutUserInput | PaySlipCreateOrConnectWithoutUserInput[]
    createMany?: PaySlipCreateManyUserInputEnvelope
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
  }

  export type MessageLogUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageLogCreateWithoutSenderInput, MessageLogUncheckedCreateWithoutSenderInput> | MessageLogCreateWithoutSenderInput[] | MessageLogUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageLogCreateOrConnectWithoutSenderInput | MessageLogCreateOrConnectWithoutSenderInput[]
    createMany?: MessageLogCreateManySenderInputEnvelope
    connect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
  }

  export type MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MessageThreadCreateWithoutCreatedByInput, MessageThreadUncheckedCreateWithoutCreatedByInput> | MessageThreadCreateWithoutCreatedByInput[] | MessageThreadUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutCreatedByInput | MessageThreadCreateOrConnectWithoutCreatedByInput[]
    createMany?: MessageThreadCreateManyCreatedByInputEnvelope
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type CompanyUpdateOneWithoutUsersNestedInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    upsert?: CompanyUpsertWithoutUsersInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUsersInput, CompanyUpdateWithoutUsersInput>, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type UserResumeUpdateOneWithoutPrimaryOfNestedInput = {
    create?: XOR<UserResumeCreateWithoutPrimaryOfInput, UserResumeUncheckedCreateWithoutPrimaryOfInput>
    connectOrCreate?: UserResumeCreateOrConnectWithoutPrimaryOfInput
    upsert?: UserResumeUpsertWithoutPrimaryOfInput
    disconnect?: UserResumeWhereInput | boolean
    delete?: UserResumeWhereInput | boolean
    connect?: UserResumeWhereUniqueInput
    update?: XOR<XOR<UserResumeUpdateToOneWithWhereWithoutPrimaryOfInput, UserResumeUpdateWithoutPrimaryOfInput>, UserResumeUncheckedUpdateWithoutPrimaryOfInput>
  }

  export type UserResumeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserResumeCreateWithoutUserInput, UserResumeUncheckedCreateWithoutUserInput> | UserResumeCreateWithoutUserInput[] | UserResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserResumeCreateOrConnectWithoutUserInput | UserResumeCreateOrConnectWithoutUserInput[]
    upsert?: UserResumeUpsertWithWhereUniqueWithoutUserInput | UserResumeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserResumeCreateManyUserInputEnvelope
    set?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    disconnect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    delete?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    connect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    update?: UserResumeUpdateWithWhereUniqueWithoutUserInput | UserResumeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserResumeUpdateManyWithWhereWithoutUserInput | UserResumeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserResumeScalarWhereInput | UserResumeScalarWhereInput[]
  }

  export type IpRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<IpRecordCreateWithoutUserInput, IpRecordUncheckedCreateWithoutUserInput> | IpRecordCreateWithoutUserInput[] | IpRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: IpRecordCreateOrConnectWithoutUserInput | IpRecordCreateOrConnectWithoutUserInput[]
    upsert?: IpRecordUpsertWithWhereUniqueWithoutUserInput | IpRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: IpRecordCreateManyUserInputEnvelope
    set?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
    disconnect?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
    delete?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
    connect?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
    update?: IpRecordUpdateWithWhereUniqueWithoutUserInput | IpRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: IpRecordUpdateManyWithWhereWithoutUserInput | IpRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: IpRecordScalarWhereInput | IpRecordScalarWhereInput[]
  }

  export type DeviceRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<DeviceRecordCreateWithoutUserInput, DeviceRecordUncheckedCreateWithoutUserInput> | DeviceRecordCreateWithoutUserInput[] | DeviceRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeviceRecordCreateOrConnectWithoutUserInput | DeviceRecordCreateOrConnectWithoutUserInput[]
    upsert?: DeviceRecordUpsertWithWhereUniqueWithoutUserInput | DeviceRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DeviceRecordCreateManyUserInputEnvelope
    set?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
    disconnect?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
    delete?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
    connect?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
    update?: DeviceRecordUpdateWithWhereUniqueWithoutUserInput | DeviceRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DeviceRecordUpdateManyWithWhereWithoutUserInput | DeviceRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DeviceRecordScalarWhereInput | DeviceRecordScalarWhereInput[]
  }

  export type ResumeViewLogUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ResumeViewLogCreateWithoutAdminInput, ResumeViewLogUncheckedCreateWithoutAdminInput> | ResumeViewLogCreateWithoutAdminInput[] | ResumeViewLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutAdminInput | ResumeViewLogCreateOrConnectWithoutAdminInput[]
    upsert?: ResumeViewLogUpsertWithWhereUniqueWithoutAdminInput | ResumeViewLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ResumeViewLogCreateManyAdminInputEnvelope
    set?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    disconnect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    delete?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    update?: ResumeViewLogUpdateWithWhereUniqueWithoutAdminInput | ResumeViewLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ResumeViewLogUpdateManyWithWhereWithoutAdminInput | ResumeViewLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ResumeViewLogScalarWhereInput | ResumeViewLogScalarWhereInput[]
  }

  export type ResumeViewLogUpdateManyWithoutUserViewedByNestedInput = {
    create?: XOR<ResumeViewLogCreateWithoutUserViewedByInput, ResumeViewLogUncheckedCreateWithoutUserViewedByInput> | ResumeViewLogCreateWithoutUserViewedByInput[] | ResumeViewLogUncheckedCreateWithoutUserViewedByInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutUserViewedByInput | ResumeViewLogCreateOrConnectWithoutUserViewedByInput[]
    upsert?: ResumeViewLogUpsertWithWhereUniqueWithoutUserViewedByInput | ResumeViewLogUpsertWithWhereUniqueWithoutUserViewedByInput[]
    createMany?: ResumeViewLogCreateManyUserViewedByInputEnvelope
    set?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    disconnect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    delete?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    update?: ResumeViewLogUpdateWithWhereUniqueWithoutUserViewedByInput | ResumeViewLogUpdateWithWhereUniqueWithoutUserViewedByInput[]
    updateMany?: ResumeViewLogUpdateManyWithWhereWithoutUserViewedByInput | ResumeViewLogUpdateManyWithWhereWithoutUserViewedByInput[]
    deleteMany?: ResumeViewLogScalarWhereInput | ResumeViewLogScalarWhereInput[]
  }

  export type ResumeReviewLogUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<ResumeReviewLogCreateWithoutReviewerInput, ResumeReviewLogUncheckedCreateWithoutReviewerInput> | ResumeReviewLogCreateWithoutReviewerInput[] | ResumeReviewLogUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutReviewerInput | ResumeReviewLogCreateOrConnectWithoutReviewerInput[]
    upsert?: ResumeReviewLogUpsertWithWhereUniqueWithoutReviewerInput | ResumeReviewLogUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: ResumeReviewLogCreateManyReviewerInputEnvelope
    set?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    disconnect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    delete?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    connect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    update?: ResumeReviewLogUpdateWithWhereUniqueWithoutReviewerInput | ResumeReviewLogUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: ResumeReviewLogUpdateManyWithWhereWithoutReviewerInput | ResumeReviewLogUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: ResumeReviewLogScalarWhereInput | ResumeReviewLogScalarWhereInput[]
  }

  export type UserReviewLogUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<UserReviewLogCreateWithoutReviewerInput, UserReviewLogUncheckedCreateWithoutReviewerInput> | UserReviewLogCreateWithoutReviewerInput[] | UserReviewLogUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutReviewerInput | UserReviewLogCreateOrConnectWithoutReviewerInput[]
    upsert?: UserReviewLogUpsertWithWhereUniqueWithoutReviewerInput | UserReviewLogUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: UserReviewLogCreateManyReviewerInputEnvelope
    set?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    disconnect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    delete?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    connect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    update?: UserReviewLogUpdateWithWhereUniqueWithoutReviewerInput | UserReviewLogUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: UserReviewLogUpdateManyWithWhereWithoutReviewerInput | UserReviewLogUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: UserReviewLogScalarWhereInput | UserReviewLogScalarWhereInput[]
  }

  export type UserReviewLogUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<UserReviewLogCreateWithoutTargetUserInput, UserReviewLogUncheckedCreateWithoutTargetUserInput> | UserReviewLogCreateWithoutTargetUserInput[] | UserReviewLogUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutTargetUserInput | UserReviewLogCreateOrConnectWithoutTargetUserInput[]
    upsert?: UserReviewLogUpsertWithWhereUniqueWithoutTargetUserInput | UserReviewLogUpsertWithWhereUniqueWithoutTargetUserInput[]
    createMany?: UserReviewLogCreateManyTargetUserInputEnvelope
    set?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    disconnect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    delete?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    connect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    update?: UserReviewLogUpdateWithWhereUniqueWithoutTargetUserInput | UserReviewLogUpdateWithWhereUniqueWithoutTargetUserInput[]
    updateMany?: UserReviewLogUpdateManyWithWhereWithoutTargetUserInput | UserReviewLogUpdateManyWithWhereWithoutTargetUserInput[]
    deleteMany?: UserReviewLogScalarWhereInput | UserReviewLogScalarWhereInput[]
  }

  export type AccountHistoryLogUpdateManyWithoutOperatedByNestedInput = {
    create?: XOR<AccountHistoryLogCreateWithoutOperatedByInput, AccountHistoryLogUncheckedCreateWithoutOperatedByInput> | AccountHistoryLogCreateWithoutOperatedByInput[] | AccountHistoryLogUncheckedCreateWithoutOperatedByInput[]
    connectOrCreate?: AccountHistoryLogCreateOrConnectWithoutOperatedByInput | AccountHistoryLogCreateOrConnectWithoutOperatedByInput[]
    upsert?: AccountHistoryLogUpsertWithWhereUniqueWithoutOperatedByInput | AccountHistoryLogUpsertWithWhereUniqueWithoutOperatedByInput[]
    createMany?: AccountHistoryLogCreateManyOperatedByInputEnvelope
    set?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    disconnect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    delete?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    connect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    update?: AccountHistoryLogUpdateWithWhereUniqueWithoutOperatedByInput | AccountHistoryLogUpdateWithWhereUniqueWithoutOperatedByInput[]
    updateMany?: AccountHistoryLogUpdateManyWithWhereWithoutOperatedByInput | AccountHistoryLogUpdateManyWithWhereWithoutOperatedByInput[]
    deleteMany?: AccountHistoryLogScalarWhereInput | AccountHistoryLogScalarWhereInput[]
  }

  export type AccountHistoryLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountHistoryLogCreateWithoutUserInput, AccountHistoryLogUncheckedCreateWithoutUserInput> | AccountHistoryLogCreateWithoutUserInput[] | AccountHistoryLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountHistoryLogCreateOrConnectWithoutUserInput | AccountHistoryLogCreateOrConnectWithoutUserInput[]
    upsert?: AccountHistoryLogUpsertWithWhereUniqueWithoutUserInput | AccountHistoryLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountHistoryLogCreateManyUserInputEnvelope
    set?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    disconnect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    delete?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    connect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    update?: AccountHistoryLogUpdateWithWhereUniqueWithoutUserInput | AccountHistoryLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountHistoryLogUpdateManyWithWhereWithoutUserInput | AccountHistoryLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountHistoryLogScalarWhereInput | AccountHistoryLogScalarWhereInput[]
  }

  export type ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutGrantedByInput, ResumeAccessGrantUncheckedCreateWithoutGrantedByInput> | ResumeAccessGrantCreateWithoutGrantedByInput[] | ResumeAccessGrantUncheckedCreateWithoutGrantedByInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutGrantedByInput | ResumeAccessGrantCreateOrConnectWithoutGrantedByInput[]
    upsert?: ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedByInput | ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedByInput[]
    createMany?: ResumeAccessGrantCreateManyGrantedByInputEnvelope
    set?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    disconnect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    delete?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    update?: ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedByInput | ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedByInput[]
    updateMany?: ResumeAccessGrantUpdateManyWithWhereWithoutGrantedByInput | ResumeAccessGrantUpdateManyWithWhereWithoutGrantedByInput[]
    deleteMany?: ResumeAccessGrantScalarWhereInput | ResumeAccessGrantScalarWhereInput[]
  }

  export type ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutGrantedToInput, ResumeAccessGrantUncheckedCreateWithoutGrantedToInput> | ResumeAccessGrantCreateWithoutGrantedToInput[] | ResumeAccessGrantUncheckedCreateWithoutGrantedToInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutGrantedToInput | ResumeAccessGrantCreateOrConnectWithoutGrantedToInput[]
    upsert?: ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedToInput | ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedToInput[]
    createMany?: ResumeAccessGrantCreateManyGrantedToInputEnvelope
    set?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    disconnect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    delete?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    update?: ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedToInput | ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedToInput[]
    updateMany?: ResumeAccessGrantUpdateManyWithWhereWithoutGrantedToInput | ResumeAccessGrantUpdateManyWithWhereWithoutGrantedToInput[]
    deleteMany?: ResumeAccessGrantScalarWhereInput | ResumeAccessGrantScalarWhereInput[]
  }

  export type AttendanceLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput> | AttendanceLogCreateWithoutUserInput[] | AttendanceLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutUserInput | AttendanceLogCreateOrConnectWithoutUserInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutUserInput | AttendanceLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendanceLogCreateManyUserInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutUserInput | AttendanceLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutUserInput | AttendanceLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type ShiftScheduleUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShiftScheduleCreateWithoutUserInput, ShiftScheduleUncheckedCreateWithoutUserInput> | ShiftScheduleCreateWithoutUserInput[] | ShiftScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutUserInput | ShiftScheduleCreateOrConnectWithoutUserInput[]
    upsert?: ShiftScheduleUpsertWithWhereUniqueWithoutUserInput | ShiftScheduleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShiftScheduleCreateManyUserInputEnvelope
    set?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    disconnect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    delete?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    connect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    update?: ShiftScheduleUpdateWithWhereUniqueWithoutUserInput | ShiftScheduleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShiftScheduleUpdateManyWithWhereWithoutUserInput | ShiftScheduleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShiftScheduleScalarWhereInput | ShiftScheduleScalarWhereInput[]
  }

  export type PaySlipUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaySlipCreateWithoutUserInput, PaySlipUncheckedCreateWithoutUserInput> | PaySlipCreateWithoutUserInput[] | PaySlipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutUserInput | PaySlipCreateOrConnectWithoutUserInput[]
    upsert?: PaySlipUpsertWithWhereUniqueWithoutUserInput | PaySlipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaySlipCreateManyUserInputEnvelope
    set?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    disconnect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    delete?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    update?: PaySlipUpdateWithWhereUniqueWithoutUserInput | PaySlipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaySlipUpdateManyWithWhereWithoutUserInput | PaySlipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
  }

  export type MessageLogUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageLogCreateWithoutSenderInput, MessageLogUncheckedCreateWithoutSenderInput> | MessageLogCreateWithoutSenderInput[] | MessageLogUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageLogCreateOrConnectWithoutSenderInput | MessageLogCreateOrConnectWithoutSenderInput[]
    upsert?: MessageLogUpsertWithWhereUniqueWithoutSenderInput | MessageLogUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageLogCreateManySenderInputEnvelope
    set?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    disconnect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    delete?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    connect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    update?: MessageLogUpdateWithWhereUniqueWithoutSenderInput | MessageLogUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageLogUpdateManyWithWhereWithoutSenderInput | MessageLogUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageLogScalarWhereInput | MessageLogScalarWhereInput[]
  }

  export type MessageThreadUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MessageThreadCreateWithoutCreatedByInput, MessageThreadUncheckedCreateWithoutCreatedByInput> | MessageThreadCreateWithoutCreatedByInput[] | MessageThreadUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutCreatedByInput | MessageThreadCreateOrConnectWithoutCreatedByInput[]
    upsert?: MessageThreadUpsertWithWhereUniqueWithoutCreatedByInput | MessageThreadUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MessageThreadCreateManyCreatedByInputEnvelope
    set?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    disconnect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    delete?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    update?: MessageThreadUpdateWithWhereUniqueWithoutCreatedByInput | MessageThreadUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MessageThreadUpdateManyWithWhereWithoutCreatedByInput | MessageThreadUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
  }

  export type UserResumeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserResumeCreateWithoutUserInput, UserResumeUncheckedCreateWithoutUserInput> | UserResumeCreateWithoutUserInput[] | UserResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserResumeCreateOrConnectWithoutUserInput | UserResumeCreateOrConnectWithoutUserInput[]
    upsert?: UserResumeUpsertWithWhereUniqueWithoutUserInput | UserResumeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserResumeCreateManyUserInputEnvelope
    set?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    disconnect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    delete?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    connect?: UserResumeWhereUniqueInput | UserResumeWhereUniqueInput[]
    update?: UserResumeUpdateWithWhereUniqueWithoutUserInput | UserResumeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserResumeUpdateManyWithWhereWithoutUserInput | UserResumeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserResumeScalarWhereInput | UserResumeScalarWhereInput[]
  }

  export type IpRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<IpRecordCreateWithoutUserInput, IpRecordUncheckedCreateWithoutUserInput> | IpRecordCreateWithoutUserInput[] | IpRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: IpRecordCreateOrConnectWithoutUserInput | IpRecordCreateOrConnectWithoutUserInput[]
    upsert?: IpRecordUpsertWithWhereUniqueWithoutUserInput | IpRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: IpRecordCreateManyUserInputEnvelope
    set?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
    disconnect?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
    delete?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
    connect?: IpRecordWhereUniqueInput | IpRecordWhereUniqueInput[]
    update?: IpRecordUpdateWithWhereUniqueWithoutUserInput | IpRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: IpRecordUpdateManyWithWhereWithoutUserInput | IpRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: IpRecordScalarWhereInput | IpRecordScalarWhereInput[]
  }

  export type DeviceRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DeviceRecordCreateWithoutUserInput, DeviceRecordUncheckedCreateWithoutUserInput> | DeviceRecordCreateWithoutUserInput[] | DeviceRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeviceRecordCreateOrConnectWithoutUserInput | DeviceRecordCreateOrConnectWithoutUserInput[]
    upsert?: DeviceRecordUpsertWithWhereUniqueWithoutUserInput | DeviceRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DeviceRecordCreateManyUserInputEnvelope
    set?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
    disconnect?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
    delete?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
    connect?: DeviceRecordWhereUniqueInput | DeviceRecordWhereUniqueInput[]
    update?: DeviceRecordUpdateWithWhereUniqueWithoutUserInput | DeviceRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DeviceRecordUpdateManyWithWhereWithoutUserInput | DeviceRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DeviceRecordScalarWhereInput | DeviceRecordScalarWhereInput[]
  }

  export type ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ResumeViewLogCreateWithoutAdminInput, ResumeViewLogUncheckedCreateWithoutAdminInput> | ResumeViewLogCreateWithoutAdminInput[] | ResumeViewLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutAdminInput | ResumeViewLogCreateOrConnectWithoutAdminInput[]
    upsert?: ResumeViewLogUpsertWithWhereUniqueWithoutAdminInput | ResumeViewLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ResumeViewLogCreateManyAdminInputEnvelope
    set?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    disconnect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    delete?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    update?: ResumeViewLogUpdateWithWhereUniqueWithoutAdminInput | ResumeViewLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ResumeViewLogUpdateManyWithWhereWithoutAdminInput | ResumeViewLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ResumeViewLogScalarWhereInput | ResumeViewLogScalarWhereInput[]
  }

  export type ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput = {
    create?: XOR<ResumeViewLogCreateWithoutUserViewedByInput, ResumeViewLogUncheckedCreateWithoutUserViewedByInput> | ResumeViewLogCreateWithoutUserViewedByInput[] | ResumeViewLogUncheckedCreateWithoutUserViewedByInput[]
    connectOrCreate?: ResumeViewLogCreateOrConnectWithoutUserViewedByInput | ResumeViewLogCreateOrConnectWithoutUserViewedByInput[]
    upsert?: ResumeViewLogUpsertWithWhereUniqueWithoutUserViewedByInput | ResumeViewLogUpsertWithWhereUniqueWithoutUserViewedByInput[]
    createMany?: ResumeViewLogCreateManyUserViewedByInputEnvelope
    set?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    disconnect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    delete?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    connect?: ResumeViewLogWhereUniqueInput | ResumeViewLogWhereUniqueInput[]
    update?: ResumeViewLogUpdateWithWhereUniqueWithoutUserViewedByInput | ResumeViewLogUpdateWithWhereUniqueWithoutUserViewedByInput[]
    updateMany?: ResumeViewLogUpdateManyWithWhereWithoutUserViewedByInput | ResumeViewLogUpdateManyWithWhereWithoutUserViewedByInput[]
    deleteMany?: ResumeViewLogScalarWhereInput | ResumeViewLogScalarWhereInput[]
  }

  export type ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<ResumeReviewLogCreateWithoutReviewerInput, ResumeReviewLogUncheckedCreateWithoutReviewerInput> | ResumeReviewLogCreateWithoutReviewerInput[] | ResumeReviewLogUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: ResumeReviewLogCreateOrConnectWithoutReviewerInput | ResumeReviewLogCreateOrConnectWithoutReviewerInput[]
    upsert?: ResumeReviewLogUpsertWithWhereUniqueWithoutReviewerInput | ResumeReviewLogUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: ResumeReviewLogCreateManyReviewerInputEnvelope
    set?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    disconnect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    delete?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    connect?: ResumeReviewLogWhereUniqueInput | ResumeReviewLogWhereUniqueInput[]
    update?: ResumeReviewLogUpdateWithWhereUniqueWithoutReviewerInput | ResumeReviewLogUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: ResumeReviewLogUpdateManyWithWhereWithoutReviewerInput | ResumeReviewLogUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: ResumeReviewLogScalarWhereInput | ResumeReviewLogScalarWhereInput[]
  }

  export type UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<UserReviewLogCreateWithoutReviewerInput, UserReviewLogUncheckedCreateWithoutReviewerInput> | UserReviewLogCreateWithoutReviewerInput[] | UserReviewLogUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutReviewerInput | UserReviewLogCreateOrConnectWithoutReviewerInput[]
    upsert?: UserReviewLogUpsertWithWhereUniqueWithoutReviewerInput | UserReviewLogUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: UserReviewLogCreateManyReviewerInputEnvelope
    set?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    disconnect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    delete?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    connect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    update?: UserReviewLogUpdateWithWhereUniqueWithoutReviewerInput | UserReviewLogUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: UserReviewLogUpdateManyWithWhereWithoutReviewerInput | UserReviewLogUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: UserReviewLogScalarWhereInput | UserReviewLogScalarWhereInput[]
  }

  export type UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<UserReviewLogCreateWithoutTargetUserInput, UserReviewLogUncheckedCreateWithoutTargetUserInput> | UserReviewLogCreateWithoutTargetUserInput[] | UserReviewLogUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: UserReviewLogCreateOrConnectWithoutTargetUserInput | UserReviewLogCreateOrConnectWithoutTargetUserInput[]
    upsert?: UserReviewLogUpsertWithWhereUniqueWithoutTargetUserInput | UserReviewLogUpsertWithWhereUniqueWithoutTargetUserInput[]
    createMany?: UserReviewLogCreateManyTargetUserInputEnvelope
    set?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    disconnect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    delete?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    connect?: UserReviewLogWhereUniqueInput | UserReviewLogWhereUniqueInput[]
    update?: UserReviewLogUpdateWithWhereUniqueWithoutTargetUserInput | UserReviewLogUpdateWithWhereUniqueWithoutTargetUserInput[]
    updateMany?: UserReviewLogUpdateManyWithWhereWithoutTargetUserInput | UserReviewLogUpdateManyWithWhereWithoutTargetUserInput[]
    deleteMany?: UserReviewLogScalarWhereInput | UserReviewLogScalarWhereInput[]
  }

  export type AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput = {
    create?: XOR<AccountHistoryLogCreateWithoutOperatedByInput, AccountHistoryLogUncheckedCreateWithoutOperatedByInput> | AccountHistoryLogCreateWithoutOperatedByInput[] | AccountHistoryLogUncheckedCreateWithoutOperatedByInput[]
    connectOrCreate?: AccountHistoryLogCreateOrConnectWithoutOperatedByInput | AccountHistoryLogCreateOrConnectWithoutOperatedByInput[]
    upsert?: AccountHistoryLogUpsertWithWhereUniqueWithoutOperatedByInput | AccountHistoryLogUpsertWithWhereUniqueWithoutOperatedByInput[]
    createMany?: AccountHistoryLogCreateManyOperatedByInputEnvelope
    set?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    disconnect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    delete?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    connect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    update?: AccountHistoryLogUpdateWithWhereUniqueWithoutOperatedByInput | AccountHistoryLogUpdateWithWhereUniqueWithoutOperatedByInput[]
    updateMany?: AccountHistoryLogUpdateManyWithWhereWithoutOperatedByInput | AccountHistoryLogUpdateManyWithWhereWithoutOperatedByInput[]
    deleteMany?: AccountHistoryLogScalarWhereInput | AccountHistoryLogScalarWhereInput[]
  }

  export type AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountHistoryLogCreateWithoutUserInput, AccountHistoryLogUncheckedCreateWithoutUserInput> | AccountHistoryLogCreateWithoutUserInput[] | AccountHistoryLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountHistoryLogCreateOrConnectWithoutUserInput | AccountHistoryLogCreateOrConnectWithoutUserInput[]
    upsert?: AccountHistoryLogUpsertWithWhereUniqueWithoutUserInput | AccountHistoryLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountHistoryLogCreateManyUserInputEnvelope
    set?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    disconnect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    delete?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    connect?: AccountHistoryLogWhereUniqueInput | AccountHistoryLogWhereUniqueInput[]
    update?: AccountHistoryLogUpdateWithWhereUniqueWithoutUserInput | AccountHistoryLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountHistoryLogUpdateManyWithWhereWithoutUserInput | AccountHistoryLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountHistoryLogScalarWhereInput | AccountHistoryLogScalarWhereInput[]
  }

  export type ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutGrantedByInput, ResumeAccessGrantUncheckedCreateWithoutGrantedByInput> | ResumeAccessGrantCreateWithoutGrantedByInput[] | ResumeAccessGrantUncheckedCreateWithoutGrantedByInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutGrantedByInput | ResumeAccessGrantCreateOrConnectWithoutGrantedByInput[]
    upsert?: ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedByInput | ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedByInput[]
    createMany?: ResumeAccessGrantCreateManyGrantedByInputEnvelope
    set?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    disconnect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    delete?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    update?: ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedByInput | ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedByInput[]
    updateMany?: ResumeAccessGrantUpdateManyWithWhereWithoutGrantedByInput | ResumeAccessGrantUpdateManyWithWhereWithoutGrantedByInput[]
    deleteMany?: ResumeAccessGrantScalarWhereInput | ResumeAccessGrantScalarWhereInput[]
  }

  export type ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput = {
    create?: XOR<ResumeAccessGrantCreateWithoutGrantedToInput, ResumeAccessGrantUncheckedCreateWithoutGrantedToInput> | ResumeAccessGrantCreateWithoutGrantedToInput[] | ResumeAccessGrantUncheckedCreateWithoutGrantedToInput[]
    connectOrCreate?: ResumeAccessGrantCreateOrConnectWithoutGrantedToInput | ResumeAccessGrantCreateOrConnectWithoutGrantedToInput[]
    upsert?: ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedToInput | ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedToInput[]
    createMany?: ResumeAccessGrantCreateManyGrantedToInputEnvelope
    set?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    disconnect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    delete?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    connect?: ResumeAccessGrantWhereUniqueInput | ResumeAccessGrantWhereUniqueInput[]
    update?: ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedToInput | ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedToInput[]
    updateMany?: ResumeAccessGrantUpdateManyWithWhereWithoutGrantedToInput | ResumeAccessGrantUpdateManyWithWhereWithoutGrantedToInput[]
    deleteMany?: ResumeAccessGrantScalarWhereInput | ResumeAccessGrantScalarWhereInput[]
  }

  export type AttendanceLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput> | AttendanceLogCreateWithoutUserInput[] | AttendanceLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutUserInput | AttendanceLogCreateOrConnectWithoutUserInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutUserInput | AttendanceLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendanceLogCreateManyUserInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutUserInput | AttendanceLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutUserInput | AttendanceLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShiftScheduleCreateWithoutUserInput, ShiftScheduleUncheckedCreateWithoutUserInput> | ShiftScheduleCreateWithoutUserInput[] | ShiftScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftScheduleCreateOrConnectWithoutUserInput | ShiftScheduleCreateOrConnectWithoutUserInput[]
    upsert?: ShiftScheduleUpsertWithWhereUniqueWithoutUserInput | ShiftScheduleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShiftScheduleCreateManyUserInputEnvelope
    set?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    disconnect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    delete?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    connect?: ShiftScheduleWhereUniqueInput | ShiftScheduleWhereUniqueInput[]
    update?: ShiftScheduleUpdateWithWhereUniqueWithoutUserInput | ShiftScheduleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShiftScheduleUpdateManyWithWhereWithoutUserInput | ShiftScheduleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShiftScheduleScalarWhereInput | ShiftScheduleScalarWhereInput[]
  }

  export type PaySlipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaySlipCreateWithoutUserInput, PaySlipUncheckedCreateWithoutUserInput> | PaySlipCreateWithoutUserInput[] | PaySlipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutUserInput | PaySlipCreateOrConnectWithoutUserInput[]
    upsert?: PaySlipUpsertWithWhereUniqueWithoutUserInput | PaySlipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaySlipCreateManyUserInputEnvelope
    set?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    disconnect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    delete?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    update?: PaySlipUpdateWithWhereUniqueWithoutUserInput | PaySlipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaySlipUpdateManyWithWhereWithoutUserInput | PaySlipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
  }

  export type MessageLogUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageLogCreateWithoutSenderInput, MessageLogUncheckedCreateWithoutSenderInput> | MessageLogCreateWithoutSenderInput[] | MessageLogUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageLogCreateOrConnectWithoutSenderInput | MessageLogCreateOrConnectWithoutSenderInput[]
    upsert?: MessageLogUpsertWithWhereUniqueWithoutSenderInput | MessageLogUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageLogCreateManySenderInputEnvelope
    set?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    disconnect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    delete?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    connect?: MessageLogWhereUniqueInput | MessageLogWhereUniqueInput[]
    update?: MessageLogUpdateWithWhereUniqueWithoutSenderInput | MessageLogUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageLogUpdateManyWithWhereWithoutSenderInput | MessageLogUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageLogScalarWhereInput | MessageLogScalarWhereInput[]
  }

  export type MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MessageThreadCreateWithoutCreatedByInput, MessageThreadUncheckedCreateWithoutCreatedByInput> | MessageThreadCreateWithoutCreatedByInput[] | MessageThreadUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutCreatedByInput | MessageThreadCreateOrConnectWithoutCreatedByInput[]
    upsert?: MessageThreadUpsertWithWhereUniqueWithoutCreatedByInput | MessageThreadUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MessageThreadCreateManyCreatedByInputEnvelope
    set?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    disconnect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    delete?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    update?: MessageThreadUpdateWithWhereUniqueWithoutCreatedByInput | MessageThreadUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MessageThreadUpdateManyWithWhereWithoutCreatedByInput | MessageThreadUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutIpRecordsInput = {
    create?: XOR<UserCreateWithoutIpRecordsInput, UserUncheckedCreateWithoutIpRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutIpRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutIpRecordsNestedInput = {
    create?: XOR<UserCreateWithoutIpRecordsInput, UserUncheckedCreateWithoutIpRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutIpRecordsInput
    upsert?: UserUpsertWithoutIpRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutIpRecordsInput, UserUpdateWithoutIpRecordsInput>, UserUncheckedUpdateWithoutIpRecordsInput>
  }

  export type UserCreateNestedOneWithoutDeviceRecordsInput = {
    create?: XOR<UserCreateWithoutDeviceRecordsInput, UserUncheckedCreateWithoutDeviceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeviceRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDeviceRecordsNestedInput = {
    create?: XOR<UserCreateWithoutDeviceRecordsInput, UserUncheckedCreateWithoutDeviceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeviceRecordsInput
    upsert?: UserUpsertWithoutDeviceRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDeviceRecordsInput, UserUpdateWithoutDeviceRecordsInput>, UserUncheckedUpdateWithoutDeviceRecordsInput>
  }

  export type UserCreateNestedOneWithoutAccountActionsReceivedInput = {
    create?: XOR<UserCreateWithoutAccountActionsReceivedInput, UserUncheckedCreateWithoutAccountActionsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountActionsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAccountActionsTakenInput = {
    create?: XOR<UserCreateWithoutAccountActionsTakenInput, UserUncheckedCreateWithoutAccountActionsTakenInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountActionsTakenInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountActionsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutAccountActionsReceivedInput, UserUncheckedCreateWithoutAccountActionsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountActionsReceivedInput
    upsert?: UserUpsertWithoutAccountActionsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountActionsReceivedInput, UserUpdateWithoutAccountActionsReceivedInput>, UserUncheckedUpdateWithoutAccountActionsReceivedInput>
  }

  export type UserUpdateOneWithoutAccountActionsTakenNestedInput = {
    create?: XOR<UserCreateWithoutAccountActionsTakenInput, UserUncheckedCreateWithoutAccountActionsTakenInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountActionsTakenInput
    upsert?: UserUpsertWithoutAccountActionsTakenInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountActionsTakenInput, UserUpdateWithoutAccountActionsTakenInput>, UserUncheckedUpdateWithoutAccountActionsTakenInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumCompanyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyType | EnumCompanyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyType[] | ListEnumCompanyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyType[] | ListEnumCompanyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyTypeFilter<$PrismaModel> | $Enums.CompanyType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumCompanyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyType | EnumCompanyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyType[] | ListEnumCompanyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyType[] | ListEnumCompanyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyTypeWithAggregatesFilter<$PrismaModel> | $Enums.CompanyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyTypeFilter<$PrismaModel>
    _max?: NestedEnumCompanyTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumJobTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.JobTypeEnum | EnumJobTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.JobTypeEnum[] | ListEnumJobTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobTypeEnum[] | ListEnumJobTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeEnumFilter<$PrismaModel> | $Enums.JobTypeEnum
  }

  export type NestedEnumJobTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobTypeEnum | EnumJobTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.JobTypeEnum[] | ListEnumJobTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobTypeEnum[] | ListEnumJobTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.JobTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumJobTypeEnumFilter<$PrismaModel>
  }

  export type NestedEnumLanguageLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LanguageLevel | EnumLanguageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageLevelFilter<$PrismaModel> | $Enums.LanguageLevel
  }

  export type NestedEnumLanguageLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LanguageLevel | EnumLanguageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageLevelWithAggregatesFilter<$PrismaModel> | $Enums.LanguageLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageLevelFilter<$PrismaModel>
    _max?: NestedEnumLanguageLevelFilter<$PrismaModel>
  }

  export type NestedEnumEducationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EducationStatus | EnumEducationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EducationStatus[] | ListEnumEducationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EducationStatus[] | ListEnumEducationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEducationStatusFilter<$PrismaModel> | $Enums.EducationStatus
  }

  export type NestedEnumEducationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EducationStatus | EnumEducationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EducationStatus[] | ListEnumEducationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EducationStatus[] | ListEnumEducationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEducationStatusWithAggregatesFilter<$PrismaModel> | $Enums.EducationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEducationStatusFilter<$PrismaModel>
    _max?: NestedEnumEducationStatusFilter<$PrismaModel>
  }

  export type NestedEnumCommuteMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.CommuteMethod | EnumCommuteMethodFieldRefInput<$PrismaModel>
    in?: $Enums.CommuteMethod[] | ListEnumCommuteMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommuteMethod[] | ListEnumCommuteMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumCommuteMethodFilter<$PrismaModel> | $Enums.CommuteMethod
  }

  export type NestedEnumCommuteMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommuteMethod | EnumCommuteMethodFieldRefInput<$PrismaModel>
    in?: $Enums.CommuteMethod[] | ListEnumCommuteMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommuteMethod[] | ListEnumCommuteMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumCommuteMethodWithAggregatesFilter<$PrismaModel> | $Enums.CommuteMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommuteMethodFilter<$PrismaModel>
    _max?: NestedEnumCommuteMethodFilter<$PrismaModel>
  }

  export type NestedEnumShiftTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ShiftType | EnumShiftTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ShiftType[] | ListEnumShiftTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShiftType[] | ListEnumShiftTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftTypeFilter<$PrismaModel> | $Enums.ShiftType
  }

  export type NestedEnumShiftTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShiftType | EnumShiftTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ShiftType[] | ListEnumShiftTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShiftType[] | ListEnumShiftTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftTypeWithAggregatesFilter<$PrismaModel> | $Enums.ShiftType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShiftTypeFilter<$PrismaModel>
    _max?: NestedEnumShiftTypeFilter<$PrismaModel>
  }

  export type NestedEnumWorkIdentityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkIdentityType | EnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkIdentityType[] | ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkIdentityType[] | ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkIdentityTypeFilter<$PrismaModel> | $Enums.WorkIdentityType
  }

  export type NestedEnumWorkIdentityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkIdentityType | EnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkIdentityType[] | ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkIdentityType[] | ListEnumWorkIdentityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkIdentityTypeWithAggregatesFilter<$PrismaModel> | $Enums.WorkIdentityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkIdentityTypeFilter<$PrismaModel>
    _max?: NestedEnumWorkIdentityTypeFilter<$PrismaModel>
  }

  export type NestedEnumContactRelationFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactRelation | EnumContactRelationFieldRefInput<$PrismaModel>
    in?: $Enums.ContactRelation[] | ListEnumContactRelationFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactRelation[] | ListEnumContactRelationFieldRefInput<$PrismaModel>
    not?: NestedEnumContactRelationFilter<$PrismaModel> | $Enums.ContactRelation
  }

  export type NestedEnumContactRelationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactRelation | EnumContactRelationFieldRefInput<$PrismaModel>
    in?: $Enums.ContactRelation[] | ListEnumContactRelationFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactRelation[] | ListEnumContactRelationFieldRefInput<$PrismaModel>
    not?: NestedEnumContactRelationWithAggregatesFilter<$PrismaModel> | $Enums.ContactRelation
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContactRelationFilter<$PrismaModel>
    _max?: NestedEnumContactRelationFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumReviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewStatusFilter<$PrismaModel> | $Enums.ReviewStatus
  }

  export type NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewStatusFilter<$PrismaModel>
    _max?: NestedEnumReviewStatusFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type UserResumeCreateWithoutAccessGrantsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutAccessGrantsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutAccessGrantsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutAccessGrantsInput, UserResumeUncheckedCreateWithoutAccessGrantsInput>
  }

  export type UserCreateWithoutResumesGrantedToMeInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutResumesGrantedToMeInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutResumesGrantedToMeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumesGrantedToMeInput, UserUncheckedCreateWithoutResumesGrantedToMeInput>
  }

  export type UserCreateWithoutResumesGrantedByMeInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutResumesGrantedByMeInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutResumesGrantedByMeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumesGrantedByMeInput, UserUncheckedCreateWithoutResumesGrantedByMeInput>
  }

  export type UserResumeUpsertWithoutAccessGrantsInput = {
    update: XOR<UserResumeUpdateWithoutAccessGrantsInput, UserResumeUncheckedUpdateWithoutAccessGrantsInput>
    create: XOR<UserResumeCreateWithoutAccessGrantsInput, UserResumeUncheckedCreateWithoutAccessGrantsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutAccessGrantsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutAccessGrantsInput, UserResumeUncheckedUpdateWithoutAccessGrantsInput>
  }

  export type UserResumeUpdateWithoutAccessGrantsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutAccessGrantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserUpsertWithoutResumesGrantedToMeInput = {
    update: XOR<UserUpdateWithoutResumesGrantedToMeInput, UserUncheckedUpdateWithoutResumesGrantedToMeInput>
    create: XOR<UserCreateWithoutResumesGrantedToMeInput, UserUncheckedCreateWithoutResumesGrantedToMeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumesGrantedToMeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumesGrantedToMeInput, UserUncheckedUpdateWithoutResumesGrantedToMeInput>
  }

  export type UserUpdateWithoutResumesGrantedToMeInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutResumesGrantedToMeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutResumesGrantedByMeInput = {
    update: XOR<UserUpdateWithoutResumesGrantedByMeInput, UserUncheckedUpdateWithoutResumesGrantedByMeInput>
    create: XOR<UserCreateWithoutResumesGrantedByMeInput, UserUncheckedCreateWithoutResumesGrantedByMeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumesGrantedByMeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumesGrantedByMeInput, UserUncheckedUpdateWithoutResumesGrantedByMeInput>
  }

  export type UserUpdateWithoutResumesGrantedByMeInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutResumesGrantedByMeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutResumeViewLogsInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutResumeViewLogsInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutResumeViewLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumeViewLogsInput, UserUncheckedCreateWithoutResumeViewLogsInput>
  }

  export type UserCreateWithoutResumesUserViewedInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutResumesUserViewedInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutResumesUserViewedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumesUserViewedInput, UserUncheckedCreateWithoutResumesUserViewedInput>
  }

  export type UserResumeCreateWithoutResumeViewLogsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutResumeViewLogsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutResumeViewLogsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutResumeViewLogsInput, UserResumeUncheckedCreateWithoutResumeViewLogsInput>
  }

  export type UserUpsertWithoutResumeViewLogsInput = {
    update: XOR<UserUpdateWithoutResumeViewLogsInput, UserUncheckedUpdateWithoutResumeViewLogsInput>
    create: XOR<UserCreateWithoutResumeViewLogsInput, UserUncheckedCreateWithoutResumeViewLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumeViewLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumeViewLogsInput, UserUncheckedUpdateWithoutResumeViewLogsInput>
  }

  export type UserUpdateWithoutResumeViewLogsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutResumeViewLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutResumesUserViewedInput = {
    update: XOR<UserUpdateWithoutResumesUserViewedInput, UserUncheckedUpdateWithoutResumesUserViewedInput>
    create: XOR<UserCreateWithoutResumesUserViewedInput, UserUncheckedCreateWithoutResumesUserViewedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumesUserViewedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumesUserViewedInput, UserUncheckedUpdateWithoutResumesUserViewedInput>
  }

  export type UserUpdateWithoutResumesUserViewedInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutResumesUserViewedInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserResumeUpsertWithoutResumeViewLogsInput = {
    update: XOR<UserResumeUpdateWithoutResumeViewLogsInput, UserResumeUncheckedUpdateWithoutResumeViewLogsInput>
    create: XOR<UserResumeCreateWithoutResumeViewLogsInput, UserResumeUncheckedCreateWithoutResumeViewLogsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutResumeViewLogsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutResumeViewLogsInput, UserResumeUncheckedUpdateWithoutResumeViewLogsInput>
  }

  export type UserResumeUpdateWithoutResumeViewLogsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutResumeViewLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserCreateWithoutCompanyInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserCreateManyCompanyInputEnvelope = {
    data: UserCreateManyCompanyInput | UserCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserResumeCreateWithoutCompanyInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutCompanyInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutCompanyInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutCompanyInput, UserResumeUncheckedCreateWithoutCompanyInput>
  }

  export type UserResumeCreateManyCompanyInputEnvelope = {
    data: UserResumeCreateManyCompanyInput | UserResumeCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceLogCreateWithoutCompanyInput = {
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    user: UserCreateNestedOneWithoutAttendanceLogsInput
    schedule?: ShiftScheduleCreateNestedOneWithoutAttendanceLogsInput
  }

  export type AttendanceLogUncheckedCreateWithoutCompanyInput = {
    id?: number
    userId: number
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    scheduleId?: number | null
  }

  export type AttendanceLogCreateOrConnectWithoutCompanyInput = {
    where: AttendanceLogWhereUniqueInput
    create: XOR<AttendanceLogCreateWithoutCompanyInput, AttendanceLogUncheckedCreateWithoutCompanyInput>
  }

  export type AttendanceLogCreateManyCompanyInputEnvelope = {
    data: AttendanceLogCreateManyCompanyInput | AttendanceLogCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type ShiftScheduleCreateWithoutCompanyInput = {
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
    user: UserCreateNestedOneWithoutSchedulesInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutScheduleInput
  }

  export type ShiftScheduleUncheckedCreateWithoutCompanyInput = {
    id?: number
    userId: number
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ShiftScheduleCreateOrConnectWithoutCompanyInput = {
    where: ShiftScheduleWhereUniqueInput
    create: XOR<ShiftScheduleCreateWithoutCompanyInput, ShiftScheduleUncheckedCreateWithoutCompanyInput>
  }

  export type ShiftScheduleCreateManyCompanyInputEnvelope = {
    data: ShiftScheduleCreateManyCompanyInput | ShiftScheduleCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type PaySlipCreateWithoutIssuedByInput = {
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPaySlipsInput
  }

  export type PaySlipUncheckedCreateWithoutIssuedByInput = {
    id?: number
    userId: number
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type PaySlipCreateOrConnectWithoutIssuedByInput = {
    where: PaySlipWhereUniqueInput
    create: XOR<PaySlipCreateWithoutIssuedByInput, PaySlipUncheckedCreateWithoutIssuedByInput>
  }

  export type PaySlipCreateManyIssuedByInputEnvelope = {
    data: PaySlipCreateManyIssuedByInput | PaySlipCreateManyIssuedByInput[]
    skipDuplicates?: boolean
  }

  export type JobPostingCreateWithoutCompanyInput = {
    title: string
    description: string
    location?: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange?: string | null
    isActive?: boolean
    postedAt?: Date | string
    expiredAt?: Date | string | null
    applications?: JobApplicationCreateNestedManyWithoutJobInput
  }

  export type JobPostingUncheckedCreateWithoutCompanyInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange?: string | null
    isActive?: boolean
    postedAt?: Date | string
    expiredAt?: Date | string | null
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobPostingCreateOrConnectWithoutCompanyInput = {
    where: JobPostingWhereUniqueInput
    create: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput>
  }

  export type JobPostingCreateManyCompanyInputEnvelope = {
    data: JobPostingCreateManyCompanyInput | JobPostingCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateManyWithWhereWithoutCompanyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    facebookId?: StringNullableFilter<"User"> | string | null
    lineId?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginIp?: StringNullableFilter<"User"> | string | null
    skipRegistration?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isDeleted?: BoolFilter<"User"> | boolean
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    isAnonymized?: BoolFilter<"User"> | boolean
    deletionReason?: StringNullableFilter<"User"> | string | null
    companyId?: IntNullableFilter<"User"> | number | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    resumeId?: IntNullableFilter<"User"> | number | null
  }

  export type UserResumeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserResumeWhereUniqueInput
    update: XOR<UserResumeUpdateWithoutCompanyInput, UserResumeUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserResumeCreateWithoutCompanyInput, UserResumeUncheckedCreateWithoutCompanyInput>
  }

  export type UserResumeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserResumeWhereUniqueInput
    data: XOR<UserResumeUpdateWithoutCompanyInput, UserResumeUncheckedUpdateWithoutCompanyInput>
  }

  export type UserResumeUpdateManyWithWhereWithoutCompanyInput = {
    where: UserResumeScalarWhereInput
    data: XOR<UserResumeUpdateManyMutationInput, UserResumeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserResumeScalarWhereInput = {
    AND?: UserResumeScalarWhereInput | UserResumeScalarWhereInput[]
    OR?: UserResumeScalarWhereInput[]
    NOT?: UserResumeScalarWhereInput | UserResumeScalarWhereInput[]
    id?: IntFilter<"UserResume"> | number
    userId?: IntFilter<"UserResume"> | number
    isPrimary?: BoolFilter<"UserResume"> | boolean
    title?: StringNullableFilter<"UserResume"> | string | null
    companyId?: IntFilter<"UserResume"> | number
    identityNumber?: StringNullableFilter<"UserResume"> | string | null
    workPermit?: StringNullableFilter<"UserResume"> | string | null
    passport?: StringNullableFilter<"UserResume"> | string | null
    email?: StringNullableFilter<"UserResume"> | string | null
    emailVerified?: BoolFilter<"UserResume"> | boolean
    phoneNumber?: StringNullableFilter<"UserResume"> | string | null
    phoneVerified?: BoolFilter<"UserResume"> | boolean
    profilePicture?: StringNullableFilter<"UserResume"> | string | null
    firstName?: StringFilter<"UserResume"> | string
    lastName?: StringFilter<"UserResume"> | string
    englishName?: StringNullableFilter<"UserResume"> | string | null
    nickname?: StringNullableFilter<"UserResume"> | string | null
    mailCountry?: StringNullableFilter<"UserResume"> | string | null
    mailCity?: StringNullableFilter<"UserResume"> | string | null
    mailDistrict?: StringNullableFilter<"UserResume"> | string | null
    mailAddress?: StringNullableFilter<"UserResume"> | string | null
    residentialCountry?: StringNullableFilter<"UserResume"> | string | null
    residentialCity?: StringNullableFilter<"UserResume"> | string | null
    residentialDistrict?: StringNullableFilter<"UserResume"> | string | null
    residentialAddress?: StringNullableFilter<"UserResume"> | string | null
    isRegistered?: BoolFilter<"UserResume"> | boolean
    isDeleted?: BoolFilter<"UserResume"> | boolean
    deletedAt?: DateTimeNullableFilter<"UserResume"> | Date | string | null
    createdAt?: DateTimeFilter<"UserResume"> | Date | string
    updatedAt?: DateTimeFilter<"UserResume"> | Date | string
  }

  export type AttendanceLogUpsertWithWhereUniqueWithoutCompanyInput = {
    where: AttendanceLogWhereUniqueInput
    update: XOR<AttendanceLogUpdateWithoutCompanyInput, AttendanceLogUncheckedUpdateWithoutCompanyInput>
    create: XOR<AttendanceLogCreateWithoutCompanyInput, AttendanceLogUncheckedCreateWithoutCompanyInput>
  }

  export type AttendanceLogUpdateWithWhereUniqueWithoutCompanyInput = {
    where: AttendanceLogWhereUniqueInput
    data: XOR<AttendanceLogUpdateWithoutCompanyInput, AttendanceLogUncheckedUpdateWithoutCompanyInput>
  }

  export type AttendanceLogUpdateManyWithWhereWithoutCompanyInput = {
    where: AttendanceLogScalarWhereInput
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AttendanceLogScalarWhereInput = {
    AND?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
    OR?: AttendanceLogScalarWhereInput[]
    NOT?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
    id?: IntFilter<"AttendanceLog"> | number
    userId?: IntFilter<"AttendanceLog"> | number
    companyId?: IntFilter<"AttendanceLog"> | number
    clockIn?: DateTimeFilter<"AttendanceLog"> | Date | string
    clockOut?: DateTimeNullableFilter<"AttendanceLog"> | Date | string | null
    note?: StringNullableFilter<"AttendanceLog"> | string | null
    scheduleId?: IntNullableFilter<"AttendanceLog"> | number | null
  }

  export type ShiftScheduleUpsertWithWhereUniqueWithoutCompanyInput = {
    where: ShiftScheduleWhereUniqueInput
    update: XOR<ShiftScheduleUpdateWithoutCompanyInput, ShiftScheduleUncheckedUpdateWithoutCompanyInput>
    create: XOR<ShiftScheduleCreateWithoutCompanyInput, ShiftScheduleUncheckedCreateWithoutCompanyInput>
  }

  export type ShiftScheduleUpdateWithWhereUniqueWithoutCompanyInput = {
    where: ShiftScheduleWhereUniqueInput
    data: XOR<ShiftScheduleUpdateWithoutCompanyInput, ShiftScheduleUncheckedUpdateWithoutCompanyInput>
  }

  export type ShiftScheduleUpdateManyWithWhereWithoutCompanyInput = {
    where: ShiftScheduleScalarWhereInput
    data: XOR<ShiftScheduleUpdateManyMutationInput, ShiftScheduleUncheckedUpdateManyWithoutCompanyInput>
  }

  export type ShiftScheduleScalarWhereInput = {
    AND?: ShiftScheduleScalarWhereInput | ShiftScheduleScalarWhereInput[]
    OR?: ShiftScheduleScalarWhereInput[]
    NOT?: ShiftScheduleScalarWhereInput | ShiftScheduleScalarWhereInput[]
    id?: IntFilter<"ShiftSchedule"> | number
    userId?: IntFilter<"ShiftSchedule"> | number
    companyId?: IntFilter<"ShiftSchedule"> | number
    shiftDate?: DateTimeFilter<"ShiftSchedule"> | Date | string
    startTime?: DateTimeFilter<"ShiftSchedule"> | Date | string
    endTime?: DateTimeFilter<"ShiftSchedule"> | Date | string
    note?: StringNullableFilter<"ShiftSchedule"> | string | null
  }

  export type PaySlipUpsertWithWhereUniqueWithoutIssuedByInput = {
    where: PaySlipWhereUniqueInput
    update: XOR<PaySlipUpdateWithoutIssuedByInput, PaySlipUncheckedUpdateWithoutIssuedByInput>
    create: XOR<PaySlipCreateWithoutIssuedByInput, PaySlipUncheckedCreateWithoutIssuedByInput>
  }

  export type PaySlipUpdateWithWhereUniqueWithoutIssuedByInput = {
    where: PaySlipWhereUniqueInput
    data: XOR<PaySlipUpdateWithoutIssuedByInput, PaySlipUncheckedUpdateWithoutIssuedByInput>
  }

  export type PaySlipUpdateManyWithWhereWithoutIssuedByInput = {
    where: PaySlipScalarWhereInput
    data: XOR<PaySlipUpdateManyMutationInput, PaySlipUncheckedUpdateManyWithoutIssuedByInput>
  }

  export type PaySlipScalarWhereInput = {
    AND?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
    OR?: PaySlipScalarWhereInput[]
    NOT?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
    id?: IntFilter<"PaySlip"> | number
    userId?: IntFilter<"PaySlip"> | number
    issuedById?: IntFilter<"PaySlip"> | number
    companyId?: IntFilter<"PaySlip"> | number
    month?: DateTimeFilter<"PaySlip"> | Date | string
    amount?: IntFilter<"PaySlip"> | number
    note?: StringNullableFilter<"PaySlip"> | string | null
    fileUrl?: StringNullableFilter<"PaySlip"> | string | null
    createdAt?: DateTimeFilter<"PaySlip"> | Date | string
  }

  export type JobPostingUpsertWithWhereUniqueWithoutCompanyInput = {
    where: JobPostingWhereUniqueInput
    update: XOR<JobPostingUpdateWithoutCompanyInput, JobPostingUncheckedUpdateWithoutCompanyInput>
    create: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput>
  }

  export type JobPostingUpdateWithWhereUniqueWithoutCompanyInput = {
    where: JobPostingWhereUniqueInput
    data: XOR<JobPostingUpdateWithoutCompanyInput, JobPostingUncheckedUpdateWithoutCompanyInput>
  }

  export type JobPostingUpdateManyWithWhereWithoutCompanyInput = {
    where: JobPostingScalarWhereInput
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyWithoutCompanyInput>
  }

  export type JobPostingScalarWhereInput = {
    AND?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
    OR?: JobPostingScalarWhereInput[]
    NOT?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
    id?: IntFilter<"JobPosting"> | number
    companyId?: IntFilter<"JobPosting"> | number
    title?: StringFilter<"JobPosting"> | string
    description?: StringFilter<"JobPosting"> | string
    location?: StringNullableFilter<"JobPosting"> | string | null
    jobType?: EnumJobTypeEnumFilter<"JobPosting"> | $Enums.JobTypeEnum
    salaryRange?: StringNullableFilter<"JobPosting"> | string | null
    isActive?: BoolFilter<"JobPosting"> | boolean
    postedAt?: DateTimeFilter<"JobPosting"> | Date | string
    expiredAt?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
  }

  export type UserCreateWithoutAttendanceLogsInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAttendanceLogsInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAttendanceLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendanceLogsInput, UserUncheckedCreateWithoutAttendanceLogsInput>
  }

  export type CompanyCreateWithoutAttendanceLogsInput = {
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAttendanceLogsInput = {
    id?: number
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeUncheckedCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipUncheckedCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAttendanceLogsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAttendanceLogsInput, CompanyUncheckedCreateWithoutAttendanceLogsInput>
  }

  export type ShiftScheduleCreateWithoutAttendanceLogsInput = {
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
    user: UserCreateNestedOneWithoutSchedulesInput
    company: CompanyCreateNestedOneWithoutSchedulesInput
  }

  export type ShiftScheduleUncheckedCreateWithoutAttendanceLogsInput = {
    id?: number
    userId: number
    companyId: number
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
  }

  export type ShiftScheduleCreateOrConnectWithoutAttendanceLogsInput = {
    where: ShiftScheduleWhereUniqueInput
    create: XOR<ShiftScheduleCreateWithoutAttendanceLogsInput, ShiftScheduleUncheckedCreateWithoutAttendanceLogsInput>
  }

  export type UserUpsertWithoutAttendanceLogsInput = {
    update: XOR<UserUpdateWithoutAttendanceLogsInput, UserUncheckedUpdateWithoutAttendanceLogsInput>
    create: XOR<UserCreateWithoutAttendanceLogsInput, UserUncheckedCreateWithoutAttendanceLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendanceLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendanceLogsInput, UserUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type UserUpdateWithoutAttendanceLogsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendanceLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CompanyUpsertWithoutAttendanceLogsInput = {
    update: XOR<CompanyUpdateWithoutAttendanceLogsInput, CompanyUncheckedUpdateWithoutAttendanceLogsInput>
    create: XOR<CompanyCreateWithoutAttendanceLogsInput, CompanyUncheckedCreateWithoutAttendanceLogsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAttendanceLogsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAttendanceLogsInput, CompanyUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type CompanyUpdateWithoutAttendanceLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAttendanceLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUncheckedUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUncheckedUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type ShiftScheduleUpsertWithoutAttendanceLogsInput = {
    update: XOR<ShiftScheduleUpdateWithoutAttendanceLogsInput, ShiftScheduleUncheckedUpdateWithoutAttendanceLogsInput>
    create: XOR<ShiftScheduleCreateWithoutAttendanceLogsInput, ShiftScheduleUncheckedCreateWithoutAttendanceLogsInput>
    where?: ShiftScheduleWhereInput
  }

  export type ShiftScheduleUpdateToOneWithWhereWithoutAttendanceLogsInput = {
    where?: ShiftScheduleWhereInput
    data: XOR<ShiftScheduleUpdateWithoutAttendanceLogsInput, ShiftScheduleUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type ShiftScheduleUpdateWithoutAttendanceLogsInput = {
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSchedulesNestedInput
    company?: CompanyUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type ShiftScheduleUncheckedUpdateWithoutAttendanceLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutSchedulesInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutSchedulesInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutSchedulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
  }

  export type CompanyCreateWithoutSchedulesInput = {
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutSchedulesInput = {
    id?: number
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeUncheckedCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipUncheckedCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutSchedulesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSchedulesInput, CompanyUncheckedCreateWithoutSchedulesInput>
  }

  export type AttendanceLogCreateWithoutScheduleInput = {
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    user: UserCreateNestedOneWithoutAttendanceLogsInput
    company: CompanyCreateNestedOneWithoutAttendanceLogsInput
  }

  export type AttendanceLogUncheckedCreateWithoutScheduleInput = {
    id?: number
    userId: number
    companyId: number
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
  }

  export type AttendanceLogCreateOrConnectWithoutScheduleInput = {
    where: AttendanceLogWhereUniqueInput
    create: XOR<AttendanceLogCreateWithoutScheduleInput, AttendanceLogUncheckedCreateWithoutScheduleInput>
  }

  export type AttendanceLogCreateManyScheduleInputEnvelope = {
    data: AttendanceLogCreateManyScheduleInput | AttendanceLogCreateManyScheduleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSchedulesInput = {
    update: XOR<UserUpdateWithoutSchedulesInput, UserUncheckedUpdateWithoutSchedulesInput>
    create: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSchedulesInput, UserUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserUpdateWithoutSchedulesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CompanyUpsertWithoutSchedulesInput = {
    update: XOR<CompanyUpdateWithoutSchedulesInput, CompanyUncheckedUpdateWithoutSchedulesInput>
    create: XOR<CompanyCreateWithoutSchedulesInput, CompanyUncheckedCreateWithoutSchedulesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutSchedulesInput, CompanyUncheckedUpdateWithoutSchedulesInput>
  }

  export type CompanyUpdateWithoutSchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUncheckedUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUncheckedUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type AttendanceLogUpsertWithWhereUniqueWithoutScheduleInput = {
    where: AttendanceLogWhereUniqueInput
    update: XOR<AttendanceLogUpdateWithoutScheduleInput, AttendanceLogUncheckedUpdateWithoutScheduleInput>
    create: XOR<AttendanceLogCreateWithoutScheduleInput, AttendanceLogUncheckedCreateWithoutScheduleInput>
  }

  export type AttendanceLogUpdateWithWhereUniqueWithoutScheduleInput = {
    where: AttendanceLogWhereUniqueInput
    data: XOR<AttendanceLogUpdateWithoutScheduleInput, AttendanceLogUncheckedUpdateWithoutScheduleInput>
  }

  export type AttendanceLogUpdateManyWithWhereWithoutScheduleInput = {
    where: AttendanceLogScalarWhereInput
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyWithoutScheduleInput>
  }

  export type UserCreateWithoutPaySlipsInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutPaySlipsInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutPaySlipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaySlipsInput, UserUncheckedCreateWithoutPaySlipsInput>
  }

  export type CompanyCreateWithoutIssuedPaySlipsInput = {
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleCreateNestedManyWithoutCompanyInput
    jobPosting?: JobPostingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutIssuedPaySlipsInput = {
    id?: number
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeUncheckedCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutCompanyInput
    jobPosting?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutIssuedPaySlipsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutIssuedPaySlipsInput, CompanyUncheckedCreateWithoutIssuedPaySlipsInput>
  }

  export type UserUpsertWithoutPaySlipsInput = {
    update: XOR<UserUpdateWithoutPaySlipsInput, UserUncheckedUpdateWithoutPaySlipsInput>
    create: XOR<UserCreateWithoutPaySlipsInput, UserUncheckedCreateWithoutPaySlipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaySlipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaySlipsInput, UserUncheckedUpdateWithoutPaySlipsInput>
  }

  export type UserUpdateWithoutPaySlipsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutPaySlipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CompanyUpsertWithoutIssuedPaySlipsInput = {
    update: XOR<CompanyUpdateWithoutIssuedPaySlipsInput, CompanyUncheckedUpdateWithoutIssuedPaySlipsInput>
    create: XOR<CompanyCreateWithoutIssuedPaySlipsInput, CompanyUncheckedCreateWithoutIssuedPaySlipsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutIssuedPaySlipsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutIssuedPaySlipsInput, CompanyUncheckedUpdateWithoutIssuedPaySlipsInput>
  }

  export type CompanyUpdateWithoutIssuedPaySlipsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutCompanyNestedInput
    jobPosting?: JobPostingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutIssuedPaySlipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUncheckedUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutCompanyNestedInput
    jobPosting?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutJobPostingInput = {
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipCreateNestedManyWithoutIssuedByInput
  }

  export type CompanyUncheckedCreateWithoutJobPostingInput = {
    id?: number
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    resumes?: UserResumeUncheckedCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipUncheckedCreateNestedManyWithoutIssuedByInput
  }

  export type CompanyCreateOrConnectWithoutJobPostingInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutJobPostingInput, CompanyUncheckedCreateWithoutJobPostingInput>
  }

  export type JobApplicationCreateWithoutJobInput = {
    status: string
    appliedAt?: Date | string
    note?: string | null
    resume: UserResumeCreateNestedOneWithoutJobapplicationInput
  }

  export type JobApplicationUncheckedCreateWithoutJobInput = {
    id?: number
    resumeId: number
    status: string
    appliedAt?: Date | string
    note?: string | null
  }

  export type JobApplicationCreateOrConnectWithoutJobInput = {
    where: JobApplicationWhereUniqueInput
    create: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput>
  }

  export type JobApplicationCreateManyJobInputEnvelope = {
    data: JobApplicationCreateManyJobInput | JobApplicationCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutJobPostingInput = {
    update: XOR<CompanyUpdateWithoutJobPostingInput, CompanyUncheckedUpdateWithoutJobPostingInput>
    create: XOR<CompanyCreateWithoutJobPostingInput, CompanyUncheckedCreateWithoutJobPostingInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutJobPostingInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutJobPostingInput, CompanyUncheckedUpdateWithoutJobPostingInput>
  }

  export type CompanyUpdateWithoutJobPostingInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUpdateManyWithoutIssuedByNestedInput
  }

  export type CompanyUncheckedUpdateWithoutJobPostingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    resumes?: UserResumeUncheckedUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUncheckedUpdateManyWithoutIssuedByNestedInput
  }

  export type JobApplicationUpsertWithWhereUniqueWithoutJobInput = {
    where: JobApplicationWhereUniqueInput
    update: XOR<JobApplicationUpdateWithoutJobInput, JobApplicationUncheckedUpdateWithoutJobInput>
    create: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput>
  }

  export type JobApplicationUpdateWithWhereUniqueWithoutJobInput = {
    where: JobApplicationWhereUniqueInput
    data: XOR<JobApplicationUpdateWithoutJobInput, JobApplicationUncheckedUpdateWithoutJobInput>
  }

  export type JobApplicationUpdateManyWithWhereWithoutJobInput = {
    where: JobApplicationScalarWhereInput
    data: XOR<JobApplicationUpdateManyMutationInput, JobApplicationUncheckedUpdateManyWithoutJobInput>
  }

  export type JobApplicationScalarWhereInput = {
    AND?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
    OR?: JobApplicationScalarWhereInput[]
    NOT?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
    id?: IntFilter<"JobApplication"> | number
    jobId?: IntFilter<"JobApplication"> | number
    resumeId?: IntFilter<"JobApplication"> | number
    status?: StringFilter<"JobApplication"> | string
    appliedAt?: DateTimeFilter<"JobApplication"> | Date | string
    note?: StringNullableFilter<"JobApplication"> | string | null
  }

  export type JobPostingCreateWithoutApplicationsInput = {
    title: string
    description: string
    location?: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange?: string | null
    isActive?: boolean
    postedAt?: Date | string
    expiredAt?: Date | string | null
    company: CompanyCreateNestedOneWithoutJobPostingInput
  }

  export type JobPostingUncheckedCreateWithoutApplicationsInput = {
    id?: number
    companyId: number
    title: string
    description: string
    location?: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange?: string | null
    isActive?: boolean
    postedAt?: Date | string
    expiredAt?: Date | string | null
  }

  export type JobPostingCreateOrConnectWithoutApplicationsInput = {
    where: JobPostingWhereUniqueInput
    create: XOR<JobPostingCreateWithoutApplicationsInput, JobPostingUncheckedCreateWithoutApplicationsInput>
  }

  export type UserResumeCreateWithoutJobapplicationInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutJobapplicationInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutJobapplicationInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutJobapplicationInput, UserResumeUncheckedCreateWithoutJobapplicationInput>
  }

  export type JobPostingUpsertWithoutApplicationsInput = {
    update: XOR<JobPostingUpdateWithoutApplicationsInput, JobPostingUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobPostingCreateWithoutApplicationsInput, JobPostingUncheckedCreateWithoutApplicationsInput>
    where?: JobPostingWhereInput
  }

  export type JobPostingUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobPostingWhereInput
    data: XOR<JobPostingUpdateWithoutApplicationsInput, JobPostingUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobPostingUpdateWithoutApplicationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company?: CompanyUpdateOneRequiredWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserResumeUpsertWithoutJobapplicationInput = {
    update: XOR<UserResumeUpdateWithoutJobapplicationInput, UserResumeUncheckedUpdateWithoutJobapplicationInput>
    create: XOR<UserResumeCreateWithoutJobapplicationInput, UserResumeUncheckedCreateWithoutJobapplicationInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutJobapplicationInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutJobapplicationInput, UserResumeUncheckedUpdateWithoutJobapplicationInput>
  }

  export type UserResumeUpdateWithoutJobapplicationInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutJobapplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutMessageThreadsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutMessageThreadsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutMessageThreadsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutMessageThreadsInput, UserResumeUncheckedCreateWithoutMessageThreadsInput>
  }

  export type UserCreateWithoutCreatedThreadsInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutCreatedThreadsInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutCreatedThreadsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedThreadsInput, UserUncheckedCreateWithoutCreatedThreadsInput>
  }

  export type MessageLogCreateWithoutThreadInput = {
    content: string
    sentAt?: Date | string
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageLogUncheckedCreateWithoutThreadInput = {
    id?: number
    senderId: number
    content: string
    sentAt?: Date | string
  }

  export type MessageLogCreateOrConnectWithoutThreadInput = {
    where: MessageLogWhereUniqueInput
    create: XOR<MessageLogCreateWithoutThreadInput, MessageLogUncheckedCreateWithoutThreadInput>
  }

  export type MessageLogCreateManyThreadInputEnvelope = {
    data: MessageLogCreateManyThreadInput | MessageLogCreateManyThreadInput[]
    skipDuplicates?: boolean
  }

  export type UserResumeUpsertWithoutMessageThreadsInput = {
    update: XOR<UserResumeUpdateWithoutMessageThreadsInput, UserResumeUncheckedUpdateWithoutMessageThreadsInput>
    create: XOR<UserResumeCreateWithoutMessageThreadsInput, UserResumeUncheckedCreateWithoutMessageThreadsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutMessageThreadsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutMessageThreadsInput, UserResumeUncheckedUpdateWithoutMessageThreadsInput>
  }

  export type UserResumeUpdateWithoutMessageThreadsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutMessageThreadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserUpsertWithoutCreatedThreadsInput = {
    update: XOR<UserUpdateWithoutCreatedThreadsInput, UserUncheckedUpdateWithoutCreatedThreadsInput>
    create: XOR<UserCreateWithoutCreatedThreadsInput, UserUncheckedCreateWithoutCreatedThreadsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedThreadsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedThreadsInput, UserUncheckedUpdateWithoutCreatedThreadsInput>
  }

  export type UserUpdateWithoutCreatedThreadsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedThreadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type MessageLogUpsertWithWhereUniqueWithoutThreadInput = {
    where: MessageLogWhereUniqueInput
    update: XOR<MessageLogUpdateWithoutThreadInput, MessageLogUncheckedUpdateWithoutThreadInput>
    create: XOR<MessageLogCreateWithoutThreadInput, MessageLogUncheckedCreateWithoutThreadInput>
  }

  export type MessageLogUpdateWithWhereUniqueWithoutThreadInput = {
    where: MessageLogWhereUniqueInput
    data: XOR<MessageLogUpdateWithoutThreadInput, MessageLogUncheckedUpdateWithoutThreadInput>
  }

  export type MessageLogUpdateManyWithWhereWithoutThreadInput = {
    where: MessageLogScalarWhereInput
    data: XOR<MessageLogUpdateManyMutationInput, MessageLogUncheckedUpdateManyWithoutThreadInput>
  }

  export type MessageLogScalarWhereInput = {
    AND?: MessageLogScalarWhereInput | MessageLogScalarWhereInput[]
    OR?: MessageLogScalarWhereInput[]
    NOT?: MessageLogScalarWhereInput | MessageLogScalarWhereInput[]
    id?: IntFilter<"MessageLog"> | number
    threadId?: IntFilter<"MessageLog"> | number
    senderId?: IntFilter<"MessageLog"> | number
    content?: StringFilter<"MessageLog"> | string
    sentAt?: DateTimeFilter<"MessageLog"> | Date | string
  }

  export type MessageThreadCreateWithoutMessagesInput = {
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutMessageThreadsInput
    createdBy: UserCreateNestedOneWithoutCreatedThreadsInput
  }

  export type MessageThreadUncheckedCreateWithoutMessagesInput = {
    id?: number
    resumeId: number
    createdById: number
    createdAt?: Date | string
  }

  export type MessageThreadCreateOrConnectWithoutMessagesInput = {
    where: MessageThreadWhereUniqueInput
    create: XOR<MessageThreadCreateWithoutMessagesInput, MessageThreadUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutSentMessagesInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type MessageThreadUpsertWithoutMessagesInput = {
    update: XOR<MessageThreadUpdateWithoutMessagesInput, MessageThreadUncheckedUpdateWithoutMessagesInput>
    create: XOR<MessageThreadCreateWithoutMessagesInput, MessageThreadUncheckedCreateWithoutMessagesInput>
    where?: MessageThreadWhereInput
  }

  export type MessageThreadUpdateToOneWithWhereWithoutMessagesInput = {
    where?: MessageThreadWhereInput
    data: XOR<MessageThreadUpdateWithoutMessagesInput, MessageThreadUncheckedUpdateWithoutMessagesInput>
  }

  export type MessageThreadUpdateWithoutMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutMessageThreadsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedThreadsNestedInput
  }

  export type MessageThreadUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutResumesInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutResumesInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutResumesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumesInput, UserUncheckedCreateWithoutResumesInput>
  }

  export type UserCreateWithoutResumeInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutResumeInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutResumeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumeInput, UserUncheckedCreateWithoutResumeInput>
  }

  export type CompanyCreateWithoutResumesInput = {
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutResumesInput = {
    id?: number
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipUncheckedCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutResumesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutResumesInput, CompanyUncheckedCreateWithoutResumesInput>
  }

  export type LanguageCreateWithoutResumeInput = {
    name: string
    level: $Enums.LanguageLevel
    levelOther?: string | null
  }

  export type LanguageUncheckedCreateWithoutResumeInput = {
    id?: number
    name: string
    level: $Enums.LanguageLevel
    levelOther?: string | null
  }

  export type LanguageCreateOrConnectWithoutResumeInput = {
    where: LanguageWhereUniqueInput
    create: XOR<LanguageCreateWithoutResumeInput, LanguageUncheckedCreateWithoutResumeInput>
  }

  export type LanguageCreateManyResumeInputEnvelope = {
    data: LanguageCreateManyResumeInput | LanguageCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type EducationCreateWithoutResumeInput = {
    school: string
    department: string
    status: $Enums.EducationStatus
    statusOther?: string | null
    startDate: Date | string
    endDate: Date | string
  }

  export type EducationUncheckedCreateWithoutResumeInput = {
    id?: number
    school: string
    department: string
    status: $Enums.EducationStatus
    statusOther?: string | null
    startDate: Date | string
    endDate: Date | string
  }

  export type EducationCreateOrConnectWithoutResumeInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutResumeInput, EducationUncheckedCreateWithoutResumeInput>
  }

  export type EducationCreateManyResumeInputEnvelope = {
    data: EducationCreateManyResumeInput | EducationCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ExperienceCreateWithoutResumeInput = {
    company: string
    title: string
    startDate: Date | string
    endDate: Date | string
    description: string
  }

  export type ExperienceUncheckedCreateWithoutResumeInput = {
    id?: number
    company: string
    title: string
    startDate: Date | string
    endDate: Date | string
    description: string
  }

  export type ExperienceCreateOrConnectWithoutResumeInput = {
    where: ExperienceWhereUniqueInput
    create: XOR<ExperienceCreateWithoutResumeInput, ExperienceUncheckedCreateWithoutResumeInput>
  }

  export type ExperienceCreateManyResumeInputEnvelope = {
    data: ExperienceCreateManyResumeInput | ExperienceCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type SkillCreateWithoutResumeInput = {
    name: string
  }

  export type SkillUncheckedCreateWithoutResumeInput = {
    id?: number
    name: string
  }

  export type SkillCreateOrConnectWithoutResumeInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutResumeInput, SkillUncheckedCreateWithoutResumeInput>
  }

  export type SkillCreateManyResumeInputEnvelope = {
    data: SkillCreateManyResumeInput | SkillCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type CertificateCreateWithoutResumeInput = {
    name: string
    expiry?: Date | string | null
  }

  export type CertificateUncheckedCreateWithoutResumeInput = {
    id?: number
    name: string
    expiry?: Date | string | null
  }

  export type CertificateCreateOrConnectWithoutResumeInput = {
    where: CertificateWhereUniqueInput
    create: XOR<CertificateCreateWithoutResumeInput, CertificateUncheckedCreateWithoutResumeInput>
  }

  export type CertificateCreateManyResumeInputEnvelope = {
    data: CertificateCreateManyResumeInput | CertificateCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type TraitCreateWithoutResumeInput = {
    personality: string
    interest?: string | null
  }

  export type TraitUncheckedCreateWithoutResumeInput = {
    id?: number
    personality: string
    interest?: string | null
  }

  export type TraitCreateOrConnectWithoutResumeInput = {
    where: TraitWhereUniqueInput
    create: XOR<TraitCreateWithoutResumeInput, TraitUncheckedCreateWithoutResumeInput>
  }

  export type TraitCreateManyResumeInputEnvelope = {
    data: TraitCreateManyResumeInput | TraitCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type CommuteCreateWithoutResumeInput = {
    method: $Enums.CommuteMethod
    methodOther?: string | null
  }

  export type CommuteUncheckedCreateWithoutResumeInput = {
    id?: number
    method: $Enums.CommuteMethod
    methodOther?: string | null
  }

  export type CommuteCreateOrConnectWithoutResumeInput = {
    where: CommuteWhereUniqueInput
    create: XOR<CommuteCreateWithoutResumeInput, CommuteUncheckedCreateWithoutResumeInput>
  }

  export type CommuteCreateManyResumeInputEnvelope = {
    data: CommuteCreateManyResumeInput | CommuteCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type WorkingTimeCreateWithoutResumeInput = {
    shift: $Enums.ShiftType
    shiftOther?: string | null
    preference: string
    expectedStart?: Date | string | null
    expectedEnd?: Date | string | null
  }

  export type WorkingTimeUncheckedCreateWithoutResumeInput = {
    id?: number
    shift: $Enums.ShiftType
    shiftOther?: string | null
    preference: string
    expectedStart?: Date | string | null
    expectedEnd?: Date | string | null
  }

  export type WorkingTimeCreateOrConnectWithoutResumeInput = {
    where: WorkingTimeWhereUniqueInput
    create: XOR<WorkingTimeCreateWithoutResumeInput, WorkingTimeUncheckedCreateWithoutResumeInput>
  }

  export type WorkingTimeCreateManyResumeInputEnvelope = {
    data: WorkingTimeCreateManyResumeInput | WorkingTimeCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type WorkIdentityCreateWithoutResumeInput = {
    identity: $Enums.WorkIdentityType
    identityOther?: string | null
  }

  export type WorkIdentityUncheckedCreateWithoutResumeInput = {
    id?: number
    identity: $Enums.WorkIdentityType
    identityOther?: string | null
  }

  export type WorkIdentityCreateOrConnectWithoutResumeInput = {
    where: WorkIdentityWhereUniqueInput
    create: XOR<WorkIdentityCreateWithoutResumeInput, WorkIdentityUncheckedCreateWithoutResumeInput>
  }

  export type WorkIdentityCreateManyResumeInputEnvelope = {
    data: WorkIdentityCreateManyResumeInput | WorkIdentityCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type JobTypeCreateWithoutResumeInput = {
    type: $Enums.JobTypeEnum
    typeOther?: string | null
  }

  export type JobTypeUncheckedCreateWithoutResumeInput = {
    id?: number
    type: $Enums.JobTypeEnum
    typeOther?: string | null
  }

  export type JobTypeCreateOrConnectWithoutResumeInput = {
    where: JobTypeWhereUniqueInput
    create: XOR<JobTypeCreateWithoutResumeInput, JobTypeUncheckedCreateWithoutResumeInput>
  }

  export type JobTypeCreateManyResumeInputEnvelope = {
    data: JobTypeCreateManyResumeInput | JobTypeCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type EmergencyContactCreateWithoutResumeInput = {
    firstName: string
    lastName: string
    phoneNumber: string
    relation: $Enums.ContactRelation
    relationOther?: string | null
  }

  export type EmergencyContactUncheckedCreateWithoutResumeInput = {
    id?: number
    firstName: string
    lastName: string
    phoneNumber: string
    relation: $Enums.ContactRelation
    relationOther?: string | null
  }

  export type EmergencyContactCreateOrConnectWithoutResumeInput = {
    where: EmergencyContactWhereUniqueInput
    create: XOR<EmergencyContactCreateWithoutResumeInput, EmergencyContactUncheckedCreateWithoutResumeInput>
  }

  export type EmergencyContactCreateManyResumeInputEnvelope = {
    data: EmergencyContactCreateManyResumeInput | EmergencyContactCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type BiographyCreateWithoutResumeInput = {
    content: string
  }

  export type BiographyUncheckedCreateWithoutResumeInput = {
    id?: number
    content: string
  }

  export type BiographyCreateOrConnectWithoutResumeInput = {
    where: BiographyWhereUniqueInput
    create: XOR<BiographyCreateWithoutResumeInput, BiographyUncheckedCreateWithoutResumeInput>
  }

  export type PortfolioCreateWithoutResumeInput = {
    externalUrl: string
    title?: string | null
    description?: string | null
  }

  export type PortfolioUncheckedCreateWithoutResumeInput = {
    id?: number
    externalUrl: string
    title?: string | null
    description?: string | null
  }

  export type PortfolioCreateOrConnectWithoutResumeInput = {
    where: PortfolioWhereUniqueInput
    create: XOR<PortfolioCreateWithoutResumeInput, PortfolioUncheckedCreateWithoutResumeInput>
  }

  export type PortfolioCreateManyResumeInputEnvelope = {
    data: PortfolioCreateManyResumeInput | PortfolioCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ProfilePhotoCreateWithoutResumeInput = {
    fileUrl: string
    type?: string | null
  }

  export type ProfilePhotoUncheckedCreateWithoutResumeInput = {
    id?: number
    fileUrl: string
    type?: string | null
  }

  export type ProfilePhotoCreateOrConnectWithoutResumeInput = {
    where: ProfilePhotoWhereUniqueInput
    create: XOR<ProfilePhotoCreateWithoutResumeInput, ProfilePhotoUncheckedCreateWithoutResumeInput>
  }

  export type ProfilePhotoCreateManyResumeInputEnvelope = {
    data: ProfilePhotoCreateManyResumeInput | ProfilePhotoCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ResumeVersionCreateWithoutResumeInput = {
    snapshot: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    version?: string | null
    note?: string | null
    isCurrent?: boolean
  }

  export type ResumeVersionUncheckedCreateWithoutResumeInput = {
    id?: number
    snapshot: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    version?: string | null
    note?: string | null
    isCurrent?: boolean
  }

  export type ResumeVersionCreateOrConnectWithoutResumeInput = {
    where: ResumeVersionWhereUniqueInput
    create: XOR<ResumeVersionCreateWithoutResumeInput, ResumeVersionUncheckedCreateWithoutResumeInput>
  }

  export type ResumeVersionCreateManyResumeInputEnvelope = {
    data: ResumeVersionCreateManyResumeInput | ResumeVersionCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ResumeVisibilityCreateWithoutResumeInput = {
    isPublic?: boolean
    allowedAudience?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
  }

  export type ResumeVisibilityUncheckedCreateWithoutResumeInput = {
    id?: number
    isPublic?: boolean
    allowedAudience?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
  }

  export type ResumeVisibilityCreateOrConnectWithoutResumeInput = {
    where: ResumeVisibilityWhereUniqueInput
    create: XOR<ResumeVisibilityCreateWithoutResumeInput, ResumeVisibilityUncheckedCreateWithoutResumeInput>
  }

  export type ResumeReviewStatusCreateWithoutResumeInput = {
    viewerId: number
    viewerType: string
    viewedAt?: Date | string
  }

  export type ResumeReviewStatusUncheckedCreateWithoutResumeInput = {
    id?: number
    viewerId: number
    viewerType: string
    viewedAt?: Date | string
  }

  export type ResumeReviewStatusCreateOrConnectWithoutResumeInput = {
    where: ResumeReviewStatusWhereUniqueInput
    create: XOR<ResumeReviewStatusCreateWithoutResumeInput, ResumeReviewStatusUncheckedCreateWithoutResumeInput>
  }

  export type ResumeReviewStatusCreateManyResumeInputEnvelope = {
    data: ResumeReviewStatusCreateManyResumeInput | ResumeReviewStatusCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ResumeViewLogCreateWithoutResumeInput = {
    viewedAt?: Date | string
    admin: UserCreateNestedOneWithoutResumeViewLogsInput
    userViewedBy: UserCreateNestedOneWithoutResumesUserViewedInput
  }

  export type ResumeViewLogUncheckedCreateWithoutResumeInput = {
    id?: number
    adminId: number
    userViewedById: number
    viewedAt?: Date | string
  }

  export type ResumeViewLogCreateOrConnectWithoutResumeInput = {
    where: ResumeViewLogWhereUniqueInput
    create: XOR<ResumeViewLogCreateWithoutResumeInput, ResumeViewLogUncheckedCreateWithoutResumeInput>
  }

  export type ResumeViewLogCreateManyResumeInputEnvelope = {
    data: ResumeViewLogCreateManyResumeInput | ResumeViewLogCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ResumePDFCreateWithoutResumeInput = {
    fileUrl: string
    template?: string | null
    createdAt?: Date | string
  }

  export type ResumePDFUncheckedCreateWithoutResumeInput = {
    id?: number
    fileUrl: string
    template?: string | null
    createdAt?: Date | string
  }

  export type ResumePDFCreateOrConnectWithoutResumeInput = {
    where: ResumePDFWhereUniqueInput
    create: XOR<ResumePDFCreateWithoutResumeInput, ResumePDFUncheckedCreateWithoutResumeInput>
  }

  export type ResumePDFCreateManyResumeInputEnvelope = {
    data: ResumePDFCreateManyResumeInput | ResumePDFCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ResumeReviewLogCreateWithoutResumeInput = {
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
    reviewer: UserCreateNestedOneWithoutResumeReviewsGivenInput
    tags?: ResumeReviewTagCreateNestedManyWithoutReviewInput
  }

  export type ResumeReviewLogUncheckedCreateWithoutResumeInput = {
    id?: number
    reviewerId: number
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
    tags?: ResumeReviewTagUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ResumeReviewLogCreateOrConnectWithoutResumeInput = {
    where: ResumeReviewLogWhereUniqueInput
    create: XOR<ResumeReviewLogCreateWithoutResumeInput, ResumeReviewLogUncheckedCreateWithoutResumeInput>
  }

  export type ResumeReviewLogCreateManyResumeInputEnvelope = {
    data: ResumeReviewLogCreateManyResumeInput | ResumeReviewLogCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type MessageThreadCreateWithoutResumeInput = {
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedThreadsInput
    messages?: MessageLogCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadUncheckedCreateWithoutResumeInput = {
    id?: number
    createdById: number
    createdAt?: Date | string
    messages?: MessageLogUncheckedCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadCreateOrConnectWithoutResumeInput = {
    where: MessageThreadWhereUniqueInput
    create: XOR<MessageThreadCreateWithoutResumeInput, MessageThreadUncheckedCreateWithoutResumeInput>
  }

  export type MessageThreadCreateManyResumeInputEnvelope = {
    data: MessageThreadCreateManyResumeInput | MessageThreadCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ResumeAccessGrantCreateWithoutResumeInput = {
    createdAt?: Date | string
    grantedTo: UserCreateNestedOneWithoutResumesGrantedToMeInput
    grantedBy: UserCreateNestedOneWithoutResumesGrantedByMeInput
  }

  export type ResumeAccessGrantUncheckedCreateWithoutResumeInput = {
    id?: number
    grantedToId: number
    grantedById: number
    createdAt?: Date | string
  }

  export type ResumeAccessGrantCreateOrConnectWithoutResumeInput = {
    where: ResumeAccessGrantWhereUniqueInput
    create: XOR<ResumeAccessGrantCreateWithoutResumeInput, ResumeAccessGrantUncheckedCreateWithoutResumeInput>
  }

  export type ResumeAccessGrantCreateManyResumeInputEnvelope = {
    data: ResumeAccessGrantCreateManyResumeInput | ResumeAccessGrantCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type JobApplicationCreateWithoutResumeInput = {
    status: string
    appliedAt?: Date | string
    note?: string | null
    job: JobPostingCreateNestedOneWithoutApplicationsInput
  }

  export type JobApplicationUncheckedCreateWithoutResumeInput = {
    id?: number
    jobId: number
    status: string
    appliedAt?: Date | string
    note?: string | null
  }

  export type JobApplicationCreateOrConnectWithoutResumeInput = {
    where: JobApplicationWhereUniqueInput
    create: XOR<JobApplicationCreateWithoutResumeInput, JobApplicationUncheckedCreateWithoutResumeInput>
  }

  export type JobApplicationCreateManyResumeInputEnvelope = {
    data: JobApplicationCreateManyResumeInput | JobApplicationCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutResumesInput = {
    update: XOR<UserUpdateWithoutResumesInput, UserUncheckedUpdateWithoutResumesInput>
    create: XOR<UserCreateWithoutResumesInput, UserUncheckedCreateWithoutResumesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumesInput, UserUncheckedUpdateWithoutResumesInput>
  }

  export type UserUpdateWithoutResumesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutResumesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutResumeInput = {
    update: XOR<UserUpdateWithoutResumeInput, UserUncheckedUpdateWithoutResumeInput>
    create: XOR<UserCreateWithoutResumeInput, UserUncheckedCreateWithoutResumeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumeInput, UserUncheckedUpdateWithoutResumeInput>
  }

  export type UserUpdateWithoutResumeInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CompanyUpsertWithoutResumesInput = {
    update: XOR<CompanyUpdateWithoutResumesInput, CompanyUncheckedUpdateWithoutResumesInput>
    create: XOR<CompanyCreateWithoutResumesInput, CompanyUncheckedCreateWithoutResumesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutResumesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutResumesInput, CompanyUncheckedUpdateWithoutResumesInput>
  }

  export type CompanyUpdateWithoutResumesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutResumesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUncheckedUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type LanguageUpsertWithWhereUniqueWithoutResumeInput = {
    where: LanguageWhereUniqueInput
    update: XOR<LanguageUpdateWithoutResumeInput, LanguageUncheckedUpdateWithoutResumeInput>
    create: XOR<LanguageCreateWithoutResumeInput, LanguageUncheckedCreateWithoutResumeInput>
  }

  export type LanguageUpdateWithWhereUniqueWithoutResumeInput = {
    where: LanguageWhereUniqueInput
    data: XOR<LanguageUpdateWithoutResumeInput, LanguageUncheckedUpdateWithoutResumeInput>
  }

  export type LanguageUpdateManyWithWhereWithoutResumeInput = {
    where: LanguageScalarWhereInput
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyWithoutResumeInput>
  }

  export type LanguageScalarWhereInput = {
    AND?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
    OR?: LanguageScalarWhereInput[]
    NOT?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
    id?: IntFilter<"Language"> | number
    resumeId?: IntFilter<"Language"> | number
    name?: StringFilter<"Language"> | string
    level?: EnumLanguageLevelFilter<"Language"> | $Enums.LanguageLevel
    levelOther?: StringNullableFilter<"Language"> | string | null
  }

  export type EducationUpsertWithWhereUniqueWithoutResumeInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutResumeInput, EducationUncheckedUpdateWithoutResumeInput>
    create: XOR<EducationCreateWithoutResumeInput, EducationUncheckedCreateWithoutResumeInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutResumeInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutResumeInput, EducationUncheckedUpdateWithoutResumeInput>
  }

  export type EducationUpdateManyWithWhereWithoutResumeInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutResumeInput>
  }

  export type EducationScalarWhereInput = {
    AND?: EducationScalarWhereInput | EducationScalarWhereInput[]
    OR?: EducationScalarWhereInput[]
    NOT?: EducationScalarWhereInput | EducationScalarWhereInput[]
    id?: IntFilter<"Education"> | number
    resumeId?: IntFilter<"Education"> | number
    school?: StringFilter<"Education"> | string
    department?: StringFilter<"Education"> | string
    status?: EnumEducationStatusFilter<"Education"> | $Enums.EducationStatus
    statusOther?: StringNullableFilter<"Education"> | string | null
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeFilter<"Education"> | Date | string
  }

  export type ExperienceUpsertWithWhereUniqueWithoutResumeInput = {
    where: ExperienceWhereUniqueInput
    update: XOR<ExperienceUpdateWithoutResumeInput, ExperienceUncheckedUpdateWithoutResumeInput>
    create: XOR<ExperienceCreateWithoutResumeInput, ExperienceUncheckedCreateWithoutResumeInput>
  }

  export type ExperienceUpdateWithWhereUniqueWithoutResumeInput = {
    where: ExperienceWhereUniqueInput
    data: XOR<ExperienceUpdateWithoutResumeInput, ExperienceUncheckedUpdateWithoutResumeInput>
  }

  export type ExperienceUpdateManyWithWhereWithoutResumeInput = {
    where: ExperienceScalarWhereInput
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyWithoutResumeInput>
  }

  export type ExperienceScalarWhereInput = {
    AND?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
    OR?: ExperienceScalarWhereInput[]
    NOT?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
    id?: IntFilter<"Experience"> | number
    resumeId?: IntFilter<"Experience"> | number
    company?: StringFilter<"Experience"> | string
    title?: StringFilter<"Experience"> | string
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeFilter<"Experience"> | Date | string
    description?: StringFilter<"Experience"> | string
  }

  export type SkillUpsertWithWhereUniqueWithoutResumeInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutResumeInput, SkillUncheckedUpdateWithoutResumeInput>
    create: XOR<SkillCreateWithoutResumeInput, SkillUncheckedCreateWithoutResumeInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutResumeInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutResumeInput, SkillUncheckedUpdateWithoutResumeInput>
  }

  export type SkillUpdateManyWithWhereWithoutResumeInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutResumeInput>
  }

  export type SkillScalarWhereInput = {
    AND?: SkillScalarWhereInput | SkillScalarWhereInput[]
    OR?: SkillScalarWhereInput[]
    NOT?: SkillScalarWhereInput | SkillScalarWhereInput[]
    id?: IntFilter<"Skill"> | number
    resumeId?: IntFilter<"Skill"> | number
    name?: StringFilter<"Skill"> | string
  }

  export type CertificateUpsertWithWhereUniqueWithoutResumeInput = {
    where: CertificateWhereUniqueInput
    update: XOR<CertificateUpdateWithoutResumeInput, CertificateUncheckedUpdateWithoutResumeInput>
    create: XOR<CertificateCreateWithoutResumeInput, CertificateUncheckedCreateWithoutResumeInput>
  }

  export type CertificateUpdateWithWhereUniqueWithoutResumeInput = {
    where: CertificateWhereUniqueInput
    data: XOR<CertificateUpdateWithoutResumeInput, CertificateUncheckedUpdateWithoutResumeInput>
  }

  export type CertificateUpdateManyWithWhereWithoutResumeInput = {
    where: CertificateScalarWhereInput
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyWithoutResumeInput>
  }

  export type CertificateScalarWhereInput = {
    AND?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
    OR?: CertificateScalarWhereInput[]
    NOT?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
    id?: IntFilter<"Certificate"> | number
    resumeId?: IntFilter<"Certificate"> | number
    name?: StringFilter<"Certificate"> | string
    expiry?: DateTimeNullableFilter<"Certificate"> | Date | string | null
  }

  export type TraitUpsertWithWhereUniqueWithoutResumeInput = {
    where: TraitWhereUniqueInput
    update: XOR<TraitUpdateWithoutResumeInput, TraitUncheckedUpdateWithoutResumeInput>
    create: XOR<TraitCreateWithoutResumeInput, TraitUncheckedCreateWithoutResumeInput>
  }

  export type TraitUpdateWithWhereUniqueWithoutResumeInput = {
    where: TraitWhereUniqueInput
    data: XOR<TraitUpdateWithoutResumeInput, TraitUncheckedUpdateWithoutResumeInput>
  }

  export type TraitUpdateManyWithWhereWithoutResumeInput = {
    where: TraitScalarWhereInput
    data: XOR<TraitUpdateManyMutationInput, TraitUncheckedUpdateManyWithoutResumeInput>
  }

  export type TraitScalarWhereInput = {
    AND?: TraitScalarWhereInput | TraitScalarWhereInput[]
    OR?: TraitScalarWhereInput[]
    NOT?: TraitScalarWhereInput | TraitScalarWhereInput[]
    id?: IntFilter<"Trait"> | number
    resumeId?: IntFilter<"Trait"> | number
    personality?: StringFilter<"Trait"> | string
    interest?: StringNullableFilter<"Trait"> | string | null
  }

  export type CommuteUpsertWithWhereUniqueWithoutResumeInput = {
    where: CommuteWhereUniqueInput
    update: XOR<CommuteUpdateWithoutResumeInput, CommuteUncheckedUpdateWithoutResumeInput>
    create: XOR<CommuteCreateWithoutResumeInput, CommuteUncheckedCreateWithoutResumeInput>
  }

  export type CommuteUpdateWithWhereUniqueWithoutResumeInput = {
    where: CommuteWhereUniqueInput
    data: XOR<CommuteUpdateWithoutResumeInput, CommuteUncheckedUpdateWithoutResumeInput>
  }

  export type CommuteUpdateManyWithWhereWithoutResumeInput = {
    where: CommuteScalarWhereInput
    data: XOR<CommuteUpdateManyMutationInput, CommuteUncheckedUpdateManyWithoutResumeInput>
  }

  export type CommuteScalarWhereInput = {
    AND?: CommuteScalarWhereInput | CommuteScalarWhereInput[]
    OR?: CommuteScalarWhereInput[]
    NOT?: CommuteScalarWhereInput | CommuteScalarWhereInput[]
    id?: IntFilter<"Commute"> | number
    resumeId?: IntFilter<"Commute"> | number
    method?: EnumCommuteMethodFilter<"Commute"> | $Enums.CommuteMethod
    methodOther?: StringNullableFilter<"Commute"> | string | null
  }

  export type WorkingTimeUpsertWithWhereUniqueWithoutResumeInput = {
    where: WorkingTimeWhereUniqueInput
    update: XOR<WorkingTimeUpdateWithoutResumeInput, WorkingTimeUncheckedUpdateWithoutResumeInput>
    create: XOR<WorkingTimeCreateWithoutResumeInput, WorkingTimeUncheckedCreateWithoutResumeInput>
  }

  export type WorkingTimeUpdateWithWhereUniqueWithoutResumeInput = {
    where: WorkingTimeWhereUniqueInput
    data: XOR<WorkingTimeUpdateWithoutResumeInput, WorkingTimeUncheckedUpdateWithoutResumeInput>
  }

  export type WorkingTimeUpdateManyWithWhereWithoutResumeInput = {
    where: WorkingTimeScalarWhereInput
    data: XOR<WorkingTimeUpdateManyMutationInput, WorkingTimeUncheckedUpdateManyWithoutResumeInput>
  }

  export type WorkingTimeScalarWhereInput = {
    AND?: WorkingTimeScalarWhereInput | WorkingTimeScalarWhereInput[]
    OR?: WorkingTimeScalarWhereInput[]
    NOT?: WorkingTimeScalarWhereInput | WorkingTimeScalarWhereInput[]
    id?: IntFilter<"WorkingTime"> | number
    resumeId?: IntFilter<"WorkingTime"> | number
    shift?: EnumShiftTypeFilter<"WorkingTime"> | $Enums.ShiftType
    shiftOther?: StringNullableFilter<"WorkingTime"> | string | null
    preference?: StringFilter<"WorkingTime"> | string
    expectedStart?: DateTimeNullableFilter<"WorkingTime"> | Date | string | null
    expectedEnd?: DateTimeNullableFilter<"WorkingTime"> | Date | string | null
  }

  export type WorkIdentityUpsertWithWhereUniqueWithoutResumeInput = {
    where: WorkIdentityWhereUniqueInput
    update: XOR<WorkIdentityUpdateWithoutResumeInput, WorkIdentityUncheckedUpdateWithoutResumeInput>
    create: XOR<WorkIdentityCreateWithoutResumeInput, WorkIdentityUncheckedCreateWithoutResumeInput>
  }

  export type WorkIdentityUpdateWithWhereUniqueWithoutResumeInput = {
    where: WorkIdentityWhereUniqueInput
    data: XOR<WorkIdentityUpdateWithoutResumeInput, WorkIdentityUncheckedUpdateWithoutResumeInput>
  }

  export type WorkIdentityUpdateManyWithWhereWithoutResumeInput = {
    where: WorkIdentityScalarWhereInput
    data: XOR<WorkIdentityUpdateManyMutationInput, WorkIdentityUncheckedUpdateManyWithoutResumeInput>
  }

  export type WorkIdentityScalarWhereInput = {
    AND?: WorkIdentityScalarWhereInput | WorkIdentityScalarWhereInput[]
    OR?: WorkIdentityScalarWhereInput[]
    NOT?: WorkIdentityScalarWhereInput | WorkIdentityScalarWhereInput[]
    id?: IntFilter<"WorkIdentity"> | number
    resumeId?: IntFilter<"WorkIdentity"> | number
    identity?: EnumWorkIdentityTypeFilter<"WorkIdentity"> | $Enums.WorkIdentityType
    identityOther?: StringNullableFilter<"WorkIdentity"> | string | null
  }

  export type JobTypeUpsertWithWhereUniqueWithoutResumeInput = {
    where: JobTypeWhereUniqueInput
    update: XOR<JobTypeUpdateWithoutResumeInput, JobTypeUncheckedUpdateWithoutResumeInput>
    create: XOR<JobTypeCreateWithoutResumeInput, JobTypeUncheckedCreateWithoutResumeInput>
  }

  export type JobTypeUpdateWithWhereUniqueWithoutResumeInput = {
    where: JobTypeWhereUniqueInput
    data: XOR<JobTypeUpdateWithoutResumeInput, JobTypeUncheckedUpdateWithoutResumeInput>
  }

  export type JobTypeUpdateManyWithWhereWithoutResumeInput = {
    where: JobTypeScalarWhereInput
    data: XOR<JobTypeUpdateManyMutationInput, JobTypeUncheckedUpdateManyWithoutResumeInput>
  }

  export type JobTypeScalarWhereInput = {
    AND?: JobTypeScalarWhereInput | JobTypeScalarWhereInput[]
    OR?: JobTypeScalarWhereInput[]
    NOT?: JobTypeScalarWhereInput | JobTypeScalarWhereInput[]
    id?: IntFilter<"JobType"> | number
    resumeId?: IntFilter<"JobType"> | number
    type?: EnumJobTypeEnumFilter<"JobType"> | $Enums.JobTypeEnum
    typeOther?: StringNullableFilter<"JobType"> | string | null
  }

  export type EmergencyContactUpsertWithWhereUniqueWithoutResumeInput = {
    where: EmergencyContactWhereUniqueInput
    update: XOR<EmergencyContactUpdateWithoutResumeInput, EmergencyContactUncheckedUpdateWithoutResumeInput>
    create: XOR<EmergencyContactCreateWithoutResumeInput, EmergencyContactUncheckedCreateWithoutResumeInput>
  }

  export type EmergencyContactUpdateWithWhereUniqueWithoutResumeInput = {
    where: EmergencyContactWhereUniqueInput
    data: XOR<EmergencyContactUpdateWithoutResumeInput, EmergencyContactUncheckedUpdateWithoutResumeInput>
  }

  export type EmergencyContactUpdateManyWithWhereWithoutResumeInput = {
    where: EmergencyContactScalarWhereInput
    data: XOR<EmergencyContactUpdateManyMutationInput, EmergencyContactUncheckedUpdateManyWithoutResumeInput>
  }

  export type EmergencyContactScalarWhereInput = {
    AND?: EmergencyContactScalarWhereInput | EmergencyContactScalarWhereInput[]
    OR?: EmergencyContactScalarWhereInput[]
    NOT?: EmergencyContactScalarWhereInput | EmergencyContactScalarWhereInput[]
    id?: IntFilter<"EmergencyContact"> | number
    resumeId?: IntFilter<"EmergencyContact"> | number
    firstName?: StringFilter<"EmergencyContact"> | string
    lastName?: StringFilter<"EmergencyContact"> | string
    phoneNumber?: StringFilter<"EmergencyContact"> | string
    relation?: EnumContactRelationFilter<"EmergencyContact"> | $Enums.ContactRelation
    relationOther?: StringNullableFilter<"EmergencyContact"> | string | null
  }

  export type BiographyUpsertWithoutResumeInput = {
    update: XOR<BiographyUpdateWithoutResumeInput, BiographyUncheckedUpdateWithoutResumeInput>
    create: XOR<BiographyCreateWithoutResumeInput, BiographyUncheckedCreateWithoutResumeInput>
    where?: BiographyWhereInput
  }

  export type BiographyUpdateToOneWithWhereWithoutResumeInput = {
    where?: BiographyWhereInput
    data: XOR<BiographyUpdateWithoutResumeInput, BiographyUncheckedUpdateWithoutResumeInput>
  }

  export type BiographyUpdateWithoutResumeInput = {
    content?: StringFieldUpdateOperationsInput | string
  }

  export type BiographyUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PortfolioUpsertWithWhereUniqueWithoutResumeInput = {
    where: PortfolioWhereUniqueInput
    update: XOR<PortfolioUpdateWithoutResumeInput, PortfolioUncheckedUpdateWithoutResumeInput>
    create: XOR<PortfolioCreateWithoutResumeInput, PortfolioUncheckedCreateWithoutResumeInput>
  }

  export type PortfolioUpdateWithWhereUniqueWithoutResumeInput = {
    where: PortfolioWhereUniqueInput
    data: XOR<PortfolioUpdateWithoutResumeInput, PortfolioUncheckedUpdateWithoutResumeInput>
  }

  export type PortfolioUpdateManyWithWhereWithoutResumeInput = {
    where: PortfolioScalarWhereInput
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyWithoutResumeInput>
  }

  export type PortfolioScalarWhereInput = {
    AND?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
    OR?: PortfolioScalarWhereInput[]
    NOT?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
    id?: IntFilter<"Portfolio"> | number
    resumeId?: IntFilter<"Portfolio"> | number
    externalUrl?: StringFilter<"Portfolio"> | string
    title?: StringNullableFilter<"Portfolio"> | string | null
    description?: StringNullableFilter<"Portfolio"> | string | null
  }

  export type ProfilePhotoUpsertWithWhereUniqueWithoutResumeInput = {
    where: ProfilePhotoWhereUniqueInput
    update: XOR<ProfilePhotoUpdateWithoutResumeInput, ProfilePhotoUncheckedUpdateWithoutResumeInput>
    create: XOR<ProfilePhotoCreateWithoutResumeInput, ProfilePhotoUncheckedCreateWithoutResumeInput>
  }

  export type ProfilePhotoUpdateWithWhereUniqueWithoutResumeInput = {
    where: ProfilePhotoWhereUniqueInput
    data: XOR<ProfilePhotoUpdateWithoutResumeInput, ProfilePhotoUncheckedUpdateWithoutResumeInput>
  }

  export type ProfilePhotoUpdateManyWithWhereWithoutResumeInput = {
    where: ProfilePhotoScalarWhereInput
    data: XOR<ProfilePhotoUpdateManyMutationInput, ProfilePhotoUncheckedUpdateManyWithoutResumeInput>
  }

  export type ProfilePhotoScalarWhereInput = {
    AND?: ProfilePhotoScalarWhereInput | ProfilePhotoScalarWhereInput[]
    OR?: ProfilePhotoScalarWhereInput[]
    NOT?: ProfilePhotoScalarWhereInput | ProfilePhotoScalarWhereInput[]
    id?: IntFilter<"ProfilePhoto"> | number
    resumeId?: IntFilter<"ProfilePhoto"> | number
    fileUrl?: StringFilter<"ProfilePhoto"> | string
    type?: StringNullableFilter<"ProfilePhoto"> | string | null
  }

  export type ResumeVersionUpsertWithWhereUniqueWithoutResumeInput = {
    where: ResumeVersionWhereUniqueInput
    update: XOR<ResumeVersionUpdateWithoutResumeInput, ResumeVersionUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumeVersionCreateWithoutResumeInput, ResumeVersionUncheckedCreateWithoutResumeInput>
  }

  export type ResumeVersionUpdateWithWhereUniqueWithoutResumeInput = {
    where: ResumeVersionWhereUniqueInput
    data: XOR<ResumeVersionUpdateWithoutResumeInput, ResumeVersionUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeVersionUpdateManyWithWhereWithoutResumeInput = {
    where: ResumeVersionScalarWhereInput
    data: XOR<ResumeVersionUpdateManyMutationInput, ResumeVersionUncheckedUpdateManyWithoutResumeInput>
  }

  export type ResumeVersionScalarWhereInput = {
    AND?: ResumeVersionScalarWhereInput | ResumeVersionScalarWhereInput[]
    OR?: ResumeVersionScalarWhereInput[]
    NOT?: ResumeVersionScalarWhereInput | ResumeVersionScalarWhereInput[]
    id?: IntFilter<"ResumeVersion"> | number
    resumeId?: IntFilter<"ResumeVersion"> | number
    snapshot?: JsonFilter<"ResumeVersion">
    createdAt?: DateTimeFilter<"ResumeVersion"> | Date | string
    version?: StringNullableFilter<"ResumeVersion"> | string | null
    note?: StringNullableFilter<"ResumeVersion"> | string | null
    isCurrent?: BoolFilter<"ResumeVersion"> | boolean
  }

  export type ResumeVisibilityUpsertWithoutResumeInput = {
    update: XOR<ResumeVisibilityUpdateWithoutResumeInput, ResumeVisibilityUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumeVisibilityCreateWithoutResumeInput, ResumeVisibilityUncheckedCreateWithoutResumeInput>
    where?: ResumeVisibilityWhereInput
  }

  export type ResumeVisibilityUpdateToOneWithWhereWithoutResumeInput = {
    where?: ResumeVisibilityWhereInput
    data: XOR<ResumeVisibilityUpdateWithoutResumeInput, ResumeVisibilityUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeVisibilityUpdateWithoutResumeInput = {
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedAudience?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeVisibilityUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedAudience?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeReviewStatusUpsertWithWhereUniqueWithoutResumeInput = {
    where: ResumeReviewStatusWhereUniqueInput
    update: XOR<ResumeReviewStatusUpdateWithoutResumeInput, ResumeReviewStatusUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumeReviewStatusCreateWithoutResumeInput, ResumeReviewStatusUncheckedCreateWithoutResumeInput>
  }

  export type ResumeReviewStatusUpdateWithWhereUniqueWithoutResumeInput = {
    where: ResumeReviewStatusWhereUniqueInput
    data: XOR<ResumeReviewStatusUpdateWithoutResumeInput, ResumeReviewStatusUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeReviewStatusUpdateManyWithWhereWithoutResumeInput = {
    where: ResumeReviewStatusScalarWhereInput
    data: XOR<ResumeReviewStatusUpdateManyMutationInput, ResumeReviewStatusUncheckedUpdateManyWithoutResumeInput>
  }

  export type ResumeReviewStatusScalarWhereInput = {
    AND?: ResumeReviewStatusScalarWhereInput | ResumeReviewStatusScalarWhereInput[]
    OR?: ResumeReviewStatusScalarWhereInput[]
    NOT?: ResumeReviewStatusScalarWhereInput | ResumeReviewStatusScalarWhereInput[]
    id?: IntFilter<"ResumeReviewStatus"> | number
    resumeId?: IntFilter<"ResumeReviewStatus"> | number
    viewerId?: IntFilter<"ResumeReviewStatus"> | number
    viewerType?: StringFilter<"ResumeReviewStatus"> | string
    viewedAt?: DateTimeFilter<"ResumeReviewStatus"> | Date | string
  }

  export type ResumeViewLogUpsertWithWhereUniqueWithoutResumeInput = {
    where: ResumeViewLogWhereUniqueInput
    update: XOR<ResumeViewLogUpdateWithoutResumeInput, ResumeViewLogUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumeViewLogCreateWithoutResumeInput, ResumeViewLogUncheckedCreateWithoutResumeInput>
  }

  export type ResumeViewLogUpdateWithWhereUniqueWithoutResumeInput = {
    where: ResumeViewLogWhereUniqueInput
    data: XOR<ResumeViewLogUpdateWithoutResumeInput, ResumeViewLogUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeViewLogUpdateManyWithWhereWithoutResumeInput = {
    where: ResumeViewLogScalarWhereInput
    data: XOR<ResumeViewLogUpdateManyMutationInput, ResumeViewLogUncheckedUpdateManyWithoutResumeInput>
  }

  export type ResumeViewLogScalarWhereInput = {
    AND?: ResumeViewLogScalarWhereInput | ResumeViewLogScalarWhereInput[]
    OR?: ResumeViewLogScalarWhereInput[]
    NOT?: ResumeViewLogScalarWhereInput | ResumeViewLogScalarWhereInput[]
    id?: IntFilter<"ResumeViewLog"> | number
    adminId?: IntFilter<"ResumeViewLog"> | number
    userViewedById?: IntFilter<"ResumeViewLog"> | number
    resumeId?: IntFilter<"ResumeViewLog"> | number
    viewedAt?: DateTimeFilter<"ResumeViewLog"> | Date | string
  }

  export type ResumePDFUpsertWithWhereUniqueWithoutResumeInput = {
    where: ResumePDFWhereUniqueInput
    update: XOR<ResumePDFUpdateWithoutResumeInput, ResumePDFUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumePDFCreateWithoutResumeInput, ResumePDFUncheckedCreateWithoutResumeInput>
  }

  export type ResumePDFUpdateWithWhereUniqueWithoutResumeInput = {
    where: ResumePDFWhereUniqueInput
    data: XOR<ResumePDFUpdateWithoutResumeInput, ResumePDFUncheckedUpdateWithoutResumeInput>
  }

  export type ResumePDFUpdateManyWithWhereWithoutResumeInput = {
    where: ResumePDFScalarWhereInput
    data: XOR<ResumePDFUpdateManyMutationInput, ResumePDFUncheckedUpdateManyWithoutResumeInput>
  }

  export type ResumePDFScalarWhereInput = {
    AND?: ResumePDFScalarWhereInput | ResumePDFScalarWhereInput[]
    OR?: ResumePDFScalarWhereInput[]
    NOT?: ResumePDFScalarWhereInput | ResumePDFScalarWhereInput[]
    id?: IntFilter<"ResumePDF"> | number
    resumeId?: IntFilter<"ResumePDF"> | number
    fileUrl?: StringFilter<"ResumePDF"> | string
    template?: StringNullableFilter<"ResumePDF"> | string | null
    createdAt?: DateTimeFilter<"ResumePDF"> | Date | string
  }

  export type ResumeReviewLogUpsertWithWhereUniqueWithoutResumeInput = {
    where: ResumeReviewLogWhereUniqueInput
    update: XOR<ResumeReviewLogUpdateWithoutResumeInput, ResumeReviewLogUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumeReviewLogCreateWithoutResumeInput, ResumeReviewLogUncheckedCreateWithoutResumeInput>
  }

  export type ResumeReviewLogUpdateWithWhereUniqueWithoutResumeInput = {
    where: ResumeReviewLogWhereUniqueInput
    data: XOR<ResumeReviewLogUpdateWithoutResumeInput, ResumeReviewLogUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeReviewLogUpdateManyWithWhereWithoutResumeInput = {
    where: ResumeReviewLogScalarWhereInput
    data: XOR<ResumeReviewLogUpdateManyMutationInput, ResumeReviewLogUncheckedUpdateManyWithoutResumeInput>
  }

  export type ResumeReviewLogScalarWhereInput = {
    AND?: ResumeReviewLogScalarWhereInput | ResumeReviewLogScalarWhereInput[]
    OR?: ResumeReviewLogScalarWhereInput[]
    NOT?: ResumeReviewLogScalarWhereInput | ResumeReviewLogScalarWhereInput[]
    id?: IntFilter<"ResumeReviewLog"> | number
    resumeId?: IntFilter<"ResumeReviewLog"> | number
    reviewerId?: IntFilter<"ResumeReviewLog"> | number
    score?: IntNullableFilter<"ResumeReviewLog"> | number | null
    status?: EnumReviewStatusFilter<"ResumeReviewLog"> | $Enums.ReviewStatus
    note?: StringNullableFilter<"ResumeReviewLog"> | string | null
    createdAt?: DateTimeFilter<"ResumeReviewLog"> | Date | string
  }

  export type MessageThreadUpsertWithWhereUniqueWithoutResumeInput = {
    where: MessageThreadWhereUniqueInput
    update: XOR<MessageThreadUpdateWithoutResumeInput, MessageThreadUncheckedUpdateWithoutResumeInput>
    create: XOR<MessageThreadCreateWithoutResumeInput, MessageThreadUncheckedCreateWithoutResumeInput>
  }

  export type MessageThreadUpdateWithWhereUniqueWithoutResumeInput = {
    where: MessageThreadWhereUniqueInput
    data: XOR<MessageThreadUpdateWithoutResumeInput, MessageThreadUncheckedUpdateWithoutResumeInput>
  }

  export type MessageThreadUpdateManyWithWhereWithoutResumeInput = {
    where: MessageThreadScalarWhereInput
    data: XOR<MessageThreadUpdateManyMutationInput, MessageThreadUncheckedUpdateManyWithoutResumeInput>
  }

  export type MessageThreadScalarWhereInput = {
    AND?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
    OR?: MessageThreadScalarWhereInput[]
    NOT?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
    id?: IntFilter<"MessageThread"> | number
    resumeId?: IntFilter<"MessageThread"> | number
    createdById?: IntFilter<"MessageThread"> | number
    createdAt?: DateTimeFilter<"MessageThread"> | Date | string
  }

  export type ResumeAccessGrantUpsertWithWhereUniqueWithoutResumeInput = {
    where: ResumeAccessGrantWhereUniqueInput
    update: XOR<ResumeAccessGrantUpdateWithoutResumeInput, ResumeAccessGrantUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumeAccessGrantCreateWithoutResumeInput, ResumeAccessGrantUncheckedCreateWithoutResumeInput>
  }

  export type ResumeAccessGrantUpdateWithWhereUniqueWithoutResumeInput = {
    where: ResumeAccessGrantWhereUniqueInput
    data: XOR<ResumeAccessGrantUpdateWithoutResumeInput, ResumeAccessGrantUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeAccessGrantUpdateManyWithWhereWithoutResumeInput = {
    where: ResumeAccessGrantScalarWhereInput
    data: XOR<ResumeAccessGrantUpdateManyMutationInput, ResumeAccessGrantUncheckedUpdateManyWithoutResumeInput>
  }

  export type ResumeAccessGrantScalarWhereInput = {
    AND?: ResumeAccessGrantScalarWhereInput | ResumeAccessGrantScalarWhereInput[]
    OR?: ResumeAccessGrantScalarWhereInput[]
    NOT?: ResumeAccessGrantScalarWhereInput | ResumeAccessGrantScalarWhereInput[]
    id?: IntFilter<"ResumeAccessGrant"> | number
    resumeId?: IntFilter<"ResumeAccessGrant"> | number
    grantedToId?: IntFilter<"ResumeAccessGrant"> | number
    grantedById?: IntFilter<"ResumeAccessGrant"> | number
    createdAt?: DateTimeFilter<"ResumeAccessGrant"> | Date | string
  }

  export type JobApplicationUpsertWithWhereUniqueWithoutResumeInput = {
    where: JobApplicationWhereUniqueInput
    update: XOR<JobApplicationUpdateWithoutResumeInput, JobApplicationUncheckedUpdateWithoutResumeInput>
    create: XOR<JobApplicationCreateWithoutResumeInput, JobApplicationUncheckedCreateWithoutResumeInput>
  }

  export type JobApplicationUpdateWithWhereUniqueWithoutResumeInput = {
    where: JobApplicationWhereUniqueInput
    data: XOR<JobApplicationUpdateWithoutResumeInput, JobApplicationUncheckedUpdateWithoutResumeInput>
  }

  export type JobApplicationUpdateManyWithWhereWithoutResumeInput = {
    where: JobApplicationScalarWhereInput
    data: XOR<JobApplicationUpdateManyMutationInput, JobApplicationUncheckedUpdateManyWithoutResumeInput>
  }

  export type UserResumeCreateWithoutLanguagesInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutLanguagesInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutLanguagesInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutLanguagesInput, UserResumeUncheckedCreateWithoutLanguagesInput>
  }

  export type UserResumeUpsertWithoutLanguagesInput = {
    update: XOR<UserResumeUpdateWithoutLanguagesInput, UserResumeUncheckedUpdateWithoutLanguagesInput>
    create: XOR<UserResumeCreateWithoutLanguagesInput, UserResumeUncheckedCreateWithoutLanguagesInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutLanguagesInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutLanguagesInput, UserResumeUncheckedUpdateWithoutLanguagesInput>
  }

  export type UserResumeUpdateWithoutLanguagesInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutLanguagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutEducationsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutEducationsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutEducationsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutEducationsInput, UserResumeUncheckedCreateWithoutEducationsInput>
  }

  export type UserResumeUpsertWithoutEducationsInput = {
    update: XOR<UserResumeUpdateWithoutEducationsInput, UserResumeUncheckedUpdateWithoutEducationsInput>
    create: XOR<UserResumeCreateWithoutEducationsInput, UserResumeUncheckedCreateWithoutEducationsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutEducationsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutEducationsInput, UserResumeUncheckedUpdateWithoutEducationsInput>
  }

  export type UserResumeUpdateWithoutEducationsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutEducationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutExperiencesInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutExperiencesInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutExperiencesInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutExperiencesInput, UserResumeUncheckedCreateWithoutExperiencesInput>
  }

  export type UserResumeUpsertWithoutExperiencesInput = {
    update: XOR<UserResumeUpdateWithoutExperiencesInput, UserResumeUncheckedUpdateWithoutExperiencesInput>
    create: XOR<UserResumeCreateWithoutExperiencesInput, UserResumeUncheckedCreateWithoutExperiencesInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutExperiencesInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutExperiencesInput, UserResumeUncheckedUpdateWithoutExperiencesInput>
  }

  export type UserResumeUpdateWithoutExperiencesInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutExperiencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutSkillsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutSkillsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutSkillsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutSkillsInput, UserResumeUncheckedCreateWithoutSkillsInput>
  }

  export type UserResumeUpsertWithoutSkillsInput = {
    update: XOR<UserResumeUpdateWithoutSkillsInput, UserResumeUncheckedUpdateWithoutSkillsInput>
    create: XOR<UserResumeCreateWithoutSkillsInput, UserResumeUncheckedCreateWithoutSkillsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutSkillsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutSkillsInput, UserResumeUncheckedUpdateWithoutSkillsInput>
  }

  export type UserResumeUpdateWithoutSkillsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutCertificatesInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutCertificatesInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutCertificatesInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutCertificatesInput, UserResumeUncheckedCreateWithoutCertificatesInput>
  }

  export type UserResumeUpsertWithoutCertificatesInput = {
    update: XOR<UserResumeUpdateWithoutCertificatesInput, UserResumeUncheckedUpdateWithoutCertificatesInput>
    create: XOR<UserResumeCreateWithoutCertificatesInput, UserResumeUncheckedCreateWithoutCertificatesInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutCertificatesInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutCertificatesInput, UserResumeUncheckedUpdateWithoutCertificatesInput>
  }

  export type UserResumeUpdateWithoutCertificatesInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutCertificatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutTraitsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutTraitsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutTraitsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutTraitsInput, UserResumeUncheckedCreateWithoutTraitsInput>
  }

  export type UserResumeUpsertWithoutTraitsInput = {
    update: XOR<UserResumeUpdateWithoutTraitsInput, UserResumeUncheckedUpdateWithoutTraitsInput>
    create: XOR<UserResumeCreateWithoutTraitsInput, UserResumeUncheckedCreateWithoutTraitsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutTraitsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutTraitsInput, UserResumeUncheckedUpdateWithoutTraitsInput>
  }

  export type UserResumeUpdateWithoutTraitsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutTraitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutCommuteOptionsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutCommuteOptionsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutCommuteOptionsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutCommuteOptionsInput, UserResumeUncheckedCreateWithoutCommuteOptionsInput>
  }

  export type UserResumeUpsertWithoutCommuteOptionsInput = {
    update: XOR<UserResumeUpdateWithoutCommuteOptionsInput, UserResumeUncheckedUpdateWithoutCommuteOptionsInput>
    create: XOR<UserResumeCreateWithoutCommuteOptionsInput, UserResumeUncheckedCreateWithoutCommuteOptionsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutCommuteOptionsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutCommuteOptionsInput, UserResumeUncheckedUpdateWithoutCommuteOptionsInput>
  }

  export type UserResumeUpdateWithoutCommuteOptionsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutCommuteOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutWorkingTimesInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutWorkingTimesInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutWorkingTimesInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutWorkingTimesInput, UserResumeUncheckedCreateWithoutWorkingTimesInput>
  }

  export type UserResumeUpsertWithoutWorkingTimesInput = {
    update: XOR<UserResumeUpdateWithoutWorkingTimesInput, UserResumeUncheckedUpdateWithoutWorkingTimesInput>
    create: XOR<UserResumeCreateWithoutWorkingTimesInput, UserResumeUncheckedCreateWithoutWorkingTimesInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutWorkingTimesInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutWorkingTimesInput, UserResumeUncheckedUpdateWithoutWorkingTimesInput>
  }

  export type UserResumeUpdateWithoutWorkingTimesInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutWorkingTimesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutWorkIdentitiesInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutWorkIdentitiesInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutWorkIdentitiesInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutWorkIdentitiesInput, UserResumeUncheckedCreateWithoutWorkIdentitiesInput>
  }

  export type UserResumeUpsertWithoutWorkIdentitiesInput = {
    update: XOR<UserResumeUpdateWithoutWorkIdentitiesInput, UserResumeUncheckedUpdateWithoutWorkIdentitiesInput>
    create: XOR<UserResumeCreateWithoutWorkIdentitiesInput, UserResumeUncheckedCreateWithoutWorkIdentitiesInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutWorkIdentitiesInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutWorkIdentitiesInput, UserResumeUncheckedUpdateWithoutWorkIdentitiesInput>
  }

  export type UserResumeUpdateWithoutWorkIdentitiesInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutWorkIdentitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutJobPreferencesInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutJobPreferencesInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutJobPreferencesInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutJobPreferencesInput, UserResumeUncheckedCreateWithoutJobPreferencesInput>
  }

  export type UserResumeUpsertWithoutJobPreferencesInput = {
    update: XOR<UserResumeUpdateWithoutJobPreferencesInput, UserResumeUncheckedUpdateWithoutJobPreferencesInput>
    create: XOR<UserResumeCreateWithoutJobPreferencesInput, UserResumeUncheckedCreateWithoutJobPreferencesInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutJobPreferencesInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutJobPreferencesInput, UserResumeUncheckedUpdateWithoutJobPreferencesInput>
  }

  export type UserResumeUpdateWithoutJobPreferencesInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutJobPreferencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutEmergencyContactsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutEmergencyContactsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutEmergencyContactsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutEmergencyContactsInput, UserResumeUncheckedCreateWithoutEmergencyContactsInput>
  }

  export type UserResumeUpsertWithoutEmergencyContactsInput = {
    update: XOR<UserResumeUpdateWithoutEmergencyContactsInput, UserResumeUncheckedUpdateWithoutEmergencyContactsInput>
    create: XOR<UserResumeCreateWithoutEmergencyContactsInput, UserResumeUncheckedCreateWithoutEmergencyContactsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutEmergencyContactsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutEmergencyContactsInput, UserResumeUncheckedUpdateWithoutEmergencyContactsInput>
  }

  export type UserResumeUpdateWithoutEmergencyContactsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutEmergencyContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutBiographyInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutBiographyInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutBiographyInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutBiographyInput, UserResumeUncheckedCreateWithoutBiographyInput>
  }

  export type UserResumeUpsertWithoutBiographyInput = {
    update: XOR<UserResumeUpdateWithoutBiographyInput, UserResumeUncheckedUpdateWithoutBiographyInput>
    create: XOR<UserResumeCreateWithoutBiographyInput, UserResumeUncheckedCreateWithoutBiographyInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutBiographyInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutBiographyInput, UserResumeUncheckedUpdateWithoutBiographyInput>
  }

  export type UserResumeUpdateWithoutBiographyInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutBiographyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutPortfolioInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutPortfolioInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutPortfolioInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutPortfolioInput, UserResumeUncheckedCreateWithoutPortfolioInput>
  }

  export type UserResumeUpsertWithoutPortfolioInput = {
    update: XOR<UserResumeUpdateWithoutPortfolioInput, UserResumeUncheckedUpdateWithoutPortfolioInput>
    create: XOR<UserResumeCreateWithoutPortfolioInput, UserResumeUncheckedCreateWithoutPortfolioInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutPortfolioInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutPortfolioInput, UserResumeUncheckedUpdateWithoutPortfolioInput>
  }

  export type UserResumeUpdateWithoutPortfolioInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutPortfolioInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutProfilePhotosInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutProfilePhotosInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutProfilePhotosInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutProfilePhotosInput, UserResumeUncheckedCreateWithoutProfilePhotosInput>
  }

  export type UserResumeUpsertWithoutProfilePhotosInput = {
    update: XOR<UserResumeUpdateWithoutProfilePhotosInput, UserResumeUncheckedUpdateWithoutProfilePhotosInput>
    create: XOR<UserResumeCreateWithoutProfilePhotosInput, UserResumeUncheckedCreateWithoutProfilePhotosInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutProfilePhotosInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutProfilePhotosInput, UserResumeUncheckedUpdateWithoutProfilePhotosInput>
  }

  export type UserResumeUpdateWithoutProfilePhotosInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutProfilePhotosInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutResumeVersionsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutResumeVersionsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutResumeVersionsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutResumeVersionsInput, UserResumeUncheckedCreateWithoutResumeVersionsInput>
  }

  export type UserResumeUpsertWithoutResumeVersionsInput = {
    update: XOR<UserResumeUpdateWithoutResumeVersionsInput, UserResumeUncheckedUpdateWithoutResumeVersionsInput>
    create: XOR<UserResumeCreateWithoutResumeVersionsInput, UserResumeUncheckedCreateWithoutResumeVersionsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutResumeVersionsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutResumeVersionsInput, UserResumeUncheckedUpdateWithoutResumeVersionsInput>
  }

  export type UserResumeUpdateWithoutResumeVersionsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutResumeVersionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutResumeVisibilityInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutResumeVisibilityInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutResumeVisibilityInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutResumeVisibilityInput, UserResumeUncheckedCreateWithoutResumeVisibilityInput>
  }

  export type UserResumeUpsertWithoutResumeVisibilityInput = {
    update: XOR<UserResumeUpdateWithoutResumeVisibilityInput, UserResumeUncheckedUpdateWithoutResumeVisibilityInput>
    create: XOR<UserResumeCreateWithoutResumeVisibilityInput, UserResumeUncheckedCreateWithoutResumeVisibilityInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutResumeVisibilityInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutResumeVisibilityInput, UserResumeUncheckedUpdateWithoutResumeVisibilityInput>
  }

  export type UserResumeUpdateWithoutResumeVisibilityInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutResumeVisibilityInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutResumeReviewStatusesInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutResumeReviewStatusesInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutResumeReviewStatusesInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutResumeReviewStatusesInput, UserResumeUncheckedCreateWithoutResumeReviewStatusesInput>
  }

  export type UserResumeUpsertWithoutResumeReviewStatusesInput = {
    update: XOR<UserResumeUpdateWithoutResumeReviewStatusesInput, UserResumeUncheckedUpdateWithoutResumeReviewStatusesInput>
    create: XOR<UserResumeCreateWithoutResumeReviewStatusesInput, UserResumeUncheckedCreateWithoutResumeReviewStatusesInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutResumeReviewStatusesInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutResumeReviewStatusesInput, UserResumeUncheckedUpdateWithoutResumeReviewStatusesInput>
  }

  export type UserResumeUpdateWithoutResumeReviewStatusesInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutResumeReviewStatusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeCreateWithoutResumePDFsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutResumePDFsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutResumePDFsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutResumePDFsInput, UserResumeUncheckedCreateWithoutResumePDFsInput>
  }

  export type UserResumeUpsertWithoutResumePDFsInput = {
    update: XOR<UserResumeUpdateWithoutResumePDFsInput, UserResumeUncheckedUpdateWithoutResumePDFsInput>
    create: XOR<UserResumeCreateWithoutResumePDFsInput, UserResumeUncheckedCreateWithoutResumePDFsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutResumePDFsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutResumePDFsInput, UserResumeUncheckedUpdateWithoutResumePDFsInput>
  }

  export type UserResumeUpdateWithoutResumePDFsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutResumePDFsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserCreateWithoutUserReviewsReceivedInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUserReviewsReceivedInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUserReviewsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserReviewsReceivedInput, UserUncheckedCreateWithoutUserReviewsReceivedInput>
  }

  export type UserCreateWithoutUserReviewsGivenInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUserReviewsGivenInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUserReviewsGivenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserReviewsGivenInput, UserUncheckedCreateWithoutUserReviewsGivenInput>
  }

  export type UserReviewTagCreateWithoutReviewInput = {
    tag: ReviewTagOptionCreateNestedOneWithoutUserTagsInput
  }

  export type UserReviewTagUncheckedCreateWithoutReviewInput = {
    id?: number
    tagId: number
  }

  export type UserReviewTagCreateOrConnectWithoutReviewInput = {
    where: UserReviewTagWhereUniqueInput
    create: XOR<UserReviewTagCreateWithoutReviewInput, UserReviewTagUncheckedCreateWithoutReviewInput>
  }

  export type UserReviewTagCreateManyReviewInputEnvelope = {
    data: UserReviewTagCreateManyReviewInput | UserReviewTagCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUserReviewsReceivedInput = {
    update: XOR<UserUpdateWithoutUserReviewsReceivedInput, UserUncheckedUpdateWithoutUserReviewsReceivedInput>
    create: XOR<UserCreateWithoutUserReviewsReceivedInput, UserUncheckedCreateWithoutUserReviewsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserReviewsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserReviewsReceivedInput, UserUncheckedUpdateWithoutUserReviewsReceivedInput>
  }

  export type UserUpdateWithoutUserReviewsReceivedInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUserReviewsReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUserReviewsGivenInput = {
    update: XOR<UserUpdateWithoutUserReviewsGivenInput, UserUncheckedUpdateWithoutUserReviewsGivenInput>
    create: XOR<UserCreateWithoutUserReviewsGivenInput, UserUncheckedCreateWithoutUserReviewsGivenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserReviewsGivenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserReviewsGivenInput, UserUncheckedUpdateWithoutUserReviewsGivenInput>
  }

  export type UserUpdateWithoutUserReviewsGivenInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUserReviewsGivenInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserReviewTagUpsertWithWhereUniqueWithoutReviewInput = {
    where: UserReviewTagWhereUniqueInput
    update: XOR<UserReviewTagUpdateWithoutReviewInput, UserReviewTagUncheckedUpdateWithoutReviewInput>
    create: XOR<UserReviewTagCreateWithoutReviewInput, UserReviewTagUncheckedCreateWithoutReviewInput>
  }

  export type UserReviewTagUpdateWithWhereUniqueWithoutReviewInput = {
    where: UserReviewTagWhereUniqueInput
    data: XOR<UserReviewTagUpdateWithoutReviewInput, UserReviewTagUncheckedUpdateWithoutReviewInput>
  }

  export type UserReviewTagUpdateManyWithWhereWithoutReviewInput = {
    where: UserReviewTagScalarWhereInput
    data: XOR<UserReviewTagUpdateManyMutationInput, UserReviewTagUncheckedUpdateManyWithoutReviewInput>
  }

  export type UserReviewTagScalarWhereInput = {
    AND?: UserReviewTagScalarWhereInput | UserReviewTagScalarWhereInput[]
    OR?: UserReviewTagScalarWhereInput[]
    NOT?: UserReviewTagScalarWhereInput | UserReviewTagScalarWhereInput[]
    id?: IntFilter<"UserReviewTag"> | number
    tagId?: IntFilter<"UserReviewTag"> | number
    reviewId?: IntFilter<"UserReviewTag"> | number
  }

  export type UserResumeCreateWithoutResumeReviewLogsInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutResumeReviewLogsInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutResumeReviewLogsInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutResumeReviewLogsInput, UserResumeUncheckedCreateWithoutResumeReviewLogsInput>
  }

  export type UserCreateWithoutResumeReviewsGivenInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutResumeReviewsGivenInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutResumeReviewsGivenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumeReviewsGivenInput, UserUncheckedCreateWithoutResumeReviewsGivenInput>
  }

  export type ResumeReviewTagCreateWithoutReviewInput = {
    tag: ReviewTagOptionCreateNestedOneWithoutResumeTagsInput
  }

  export type ResumeReviewTagUncheckedCreateWithoutReviewInput = {
    id?: number
    tagId: number
  }

  export type ResumeReviewTagCreateOrConnectWithoutReviewInput = {
    where: ResumeReviewTagWhereUniqueInput
    create: XOR<ResumeReviewTagCreateWithoutReviewInput, ResumeReviewTagUncheckedCreateWithoutReviewInput>
  }

  export type ResumeReviewTagCreateManyReviewInputEnvelope = {
    data: ResumeReviewTagCreateManyReviewInput | ResumeReviewTagCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type UserResumeUpsertWithoutResumeReviewLogsInput = {
    update: XOR<UserResumeUpdateWithoutResumeReviewLogsInput, UserResumeUncheckedUpdateWithoutResumeReviewLogsInput>
    create: XOR<UserResumeCreateWithoutResumeReviewLogsInput, UserResumeUncheckedCreateWithoutResumeReviewLogsInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutResumeReviewLogsInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutResumeReviewLogsInput, UserResumeUncheckedUpdateWithoutResumeReviewLogsInput>
  }

  export type UserResumeUpdateWithoutResumeReviewLogsInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutResumeReviewLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserUpsertWithoutResumeReviewsGivenInput = {
    update: XOR<UserUpdateWithoutResumeReviewsGivenInput, UserUncheckedUpdateWithoutResumeReviewsGivenInput>
    create: XOR<UserCreateWithoutResumeReviewsGivenInput, UserUncheckedCreateWithoutResumeReviewsGivenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumeReviewsGivenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumeReviewsGivenInput, UserUncheckedUpdateWithoutResumeReviewsGivenInput>
  }

  export type UserUpdateWithoutResumeReviewsGivenInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutResumeReviewsGivenInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ResumeReviewTagUpsertWithWhereUniqueWithoutReviewInput = {
    where: ResumeReviewTagWhereUniqueInput
    update: XOR<ResumeReviewTagUpdateWithoutReviewInput, ResumeReviewTagUncheckedUpdateWithoutReviewInput>
    create: XOR<ResumeReviewTagCreateWithoutReviewInput, ResumeReviewTagUncheckedCreateWithoutReviewInput>
  }

  export type ResumeReviewTagUpdateWithWhereUniqueWithoutReviewInput = {
    where: ResumeReviewTagWhereUniqueInput
    data: XOR<ResumeReviewTagUpdateWithoutReviewInput, ResumeReviewTagUncheckedUpdateWithoutReviewInput>
  }

  export type ResumeReviewTagUpdateManyWithWhereWithoutReviewInput = {
    where: ResumeReviewTagScalarWhereInput
    data: XOR<ResumeReviewTagUpdateManyMutationInput, ResumeReviewTagUncheckedUpdateManyWithoutReviewInput>
  }

  export type ResumeReviewTagScalarWhereInput = {
    AND?: ResumeReviewTagScalarWhereInput | ResumeReviewTagScalarWhereInput[]
    OR?: ResumeReviewTagScalarWhereInput[]
    NOT?: ResumeReviewTagScalarWhereInput | ResumeReviewTagScalarWhereInput[]
    id?: IntFilter<"ResumeReviewTag"> | number
    tagId?: IntFilter<"ResumeReviewTag"> | number
    reviewId?: IntFilter<"ResumeReviewTag"> | number
  }

  export type ReviewTagOptionCreateWithoutUserTagsInput = {
    label: string
    type?: string | null
    isPublic?: boolean
    resumeTags?: ResumeReviewTagCreateNestedManyWithoutTagInput
  }

  export type ReviewTagOptionUncheckedCreateWithoutUserTagsInput = {
    id?: number
    label: string
    type?: string | null
    isPublic?: boolean
    resumeTags?: ResumeReviewTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type ReviewTagOptionCreateOrConnectWithoutUserTagsInput = {
    where: ReviewTagOptionWhereUniqueInput
    create: XOR<ReviewTagOptionCreateWithoutUserTagsInput, ReviewTagOptionUncheckedCreateWithoutUserTagsInput>
  }

  export type UserReviewLogCreateWithoutTagsInput = {
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
    targetUser: UserCreateNestedOneWithoutUserReviewsReceivedInput
    reviewer: UserCreateNestedOneWithoutUserReviewsGivenInput
  }

  export type UserReviewLogUncheckedCreateWithoutTagsInput = {
    id?: number
    targetUserId: number
    reviewerId: number
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
  }

  export type UserReviewLogCreateOrConnectWithoutTagsInput = {
    where: UserReviewLogWhereUniqueInput
    create: XOR<UserReviewLogCreateWithoutTagsInput, UserReviewLogUncheckedCreateWithoutTagsInput>
  }

  export type ReviewTagOptionUpsertWithoutUserTagsInput = {
    update: XOR<ReviewTagOptionUpdateWithoutUserTagsInput, ReviewTagOptionUncheckedUpdateWithoutUserTagsInput>
    create: XOR<ReviewTagOptionCreateWithoutUserTagsInput, ReviewTagOptionUncheckedCreateWithoutUserTagsInput>
    where?: ReviewTagOptionWhereInput
  }

  export type ReviewTagOptionUpdateToOneWithWhereWithoutUserTagsInput = {
    where?: ReviewTagOptionWhereInput
    data: XOR<ReviewTagOptionUpdateWithoutUserTagsInput, ReviewTagOptionUncheckedUpdateWithoutUserTagsInput>
  }

  export type ReviewTagOptionUpdateWithoutUserTagsInput = {
    label?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    resumeTags?: ResumeReviewTagUpdateManyWithoutTagNestedInput
  }

  export type ReviewTagOptionUncheckedUpdateWithoutUserTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    resumeTags?: ResumeReviewTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type UserReviewLogUpsertWithoutTagsInput = {
    update: XOR<UserReviewLogUpdateWithoutTagsInput, UserReviewLogUncheckedUpdateWithoutTagsInput>
    create: XOR<UserReviewLogCreateWithoutTagsInput, UserReviewLogUncheckedCreateWithoutTagsInput>
    where?: UserReviewLogWhereInput
  }

  export type UserReviewLogUpdateToOneWithWhereWithoutTagsInput = {
    where?: UserReviewLogWhereInput
    data: XOR<UserReviewLogUpdateWithoutTagsInput, UserReviewLogUncheckedUpdateWithoutTagsInput>
  }

  export type UserReviewLogUpdateWithoutTagsInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetUser?: UserUpdateOneRequiredWithoutUserReviewsReceivedNestedInput
    reviewer?: UserUpdateOneRequiredWithoutUserReviewsGivenNestedInput
  }

  export type UserReviewLogUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewTagOptionCreateWithoutResumeTagsInput = {
    label: string
    type?: string | null
    isPublic?: boolean
    userTags?: UserReviewTagCreateNestedManyWithoutTagInput
  }

  export type ReviewTagOptionUncheckedCreateWithoutResumeTagsInput = {
    id?: number
    label: string
    type?: string | null
    isPublic?: boolean
    userTags?: UserReviewTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type ReviewTagOptionCreateOrConnectWithoutResumeTagsInput = {
    where: ReviewTagOptionWhereUniqueInput
    create: XOR<ReviewTagOptionCreateWithoutResumeTagsInput, ReviewTagOptionUncheckedCreateWithoutResumeTagsInput>
  }

  export type ResumeReviewLogCreateWithoutTagsInput = {
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutResumeReviewLogsInput
    reviewer: UserCreateNestedOneWithoutResumeReviewsGivenInput
  }

  export type ResumeReviewLogUncheckedCreateWithoutTagsInput = {
    id?: number
    resumeId: number
    reviewerId: number
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
  }

  export type ResumeReviewLogCreateOrConnectWithoutTagsInput = {
    where: ResumeReviewLogWhereUniqueInput
    create: XOR<ResumeReviewLogCreateWithoutTagsInput, ResumeReviewLogUncheckedCreateWithoutTagsInput>
  }

  export type ReviewTagOptionUpsertWithoutResumeTagsInput = {
    update: XOR<ReviewTagOptionUpdateWithoutResumeTagsInput, ReviewTagOptionUncheckedUpdateWithoutResumeTagsInput>
    create: XOR<ReviewTagOptionCreateWithoutResumeTagsInput, ReviewTagOptionUncheckedCreateWithoutResumeTagsInput>
    where?: ReviewTagOptionWhereInput
  }

  export type ReviewTagOptionUpdateToOneWithWhereWithoutResumeTagsInput = {
    where?: ReviewTagOptionWhereInput
    data: XOR<ReviewTagOptionUpdateWithoutResumeTagsInput, ReviewTagOptionUncheckedUpdateWithoutResumeTagsInput>
  }

  export type ReviewTagOptionUpdateWithoutResumeTagsInput = {
    label?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    userTags?: UserReviewTagUpdateManyWithoutTagNestedInput
  }

  export type ReviewTagOptionUncheckedUpdateWithoutResumeTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    userTags?: UserReviewTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type ResumeReviewLogUpsertWithoutTagsInput = {
    update: XOR<ResumeReviewLogUpdateWithoutTagsInput, ResumeReviewLogUncheckedUpdateWithoutTagsInput>
    create: XOR<ResumeReviewLogCreateWithoutTagsInput, ResumeReviewLogUncheckedCreateWithoutTagsInput>
    where?: ResumeReviewLogWhereInput
  }

  export type ResumeReviewLogUpdateToOneWithWhereWithoutTagsInput = {
    where?: ResumeReviewLogWhereInput
    data: XOR<ResumeReviewLogUpdateWithoutTagsInput, ResumeReviewLogUncheckedUpdateWithoutTagsInput>
  }

  export type ResumeReviewLogUpdateWithoutTagsInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutResumeReviewLogsNestedInput
    reviewer?: UserUpdateOneRequiredWithoutResumeReviewsGivenNestedInput
  }

  export type ResumeReviewLogUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewTagCreateWithoutTagInput = {
    review: ResumeReviewLogCreateNestedOneWithoutTagsInput
  }

  export type ResumeReviewTagUncheckedCreateWithoutTagInput = {
    id?: number
    reviewId: number
  }

  export type ResumeReviewTagCreateOrConnectWithoutTagInput = {
    where: ResumeReviewTagWhereUniqueInput
    create: XOR<ResumeReviewTagCreateWithoutTagInput, ResumeReviewTagUncheckedCreateWithoutTagInput>
  }

  export type ResumeReviewTagCreateManyTagInputEnvelope = {
    data: ResumeReviewTagCreateManyTagInput | ResumeReviewTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type UserReviewTagCreateWithoutTagInput = {
    review: UserReviewLogCreateNestedOneWithoutTagsInput
  }

  export type UserReviewTagUncheckedCreateWithoutTagInput = {
    id?: number
    reviewId: number
  }

  export type UserReviewTagCreateOrConnectWithoutTagInput = {
    where: UserReviewTagWhereUniqueInput
    create: XOR<UserReviewTagCreateWithoutTagInput, UserReviewTagUncheckedCreateWithoutTagInput>
  }

  export type UserReviewTagCreateManyTagInputEnvelope = {
    data: UserReviewTagCreateManyTagInput | UserReviewTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type ResumeReviewTagUpsertWithWhereUniqueWithoutTagInput = {
    where: ResumeReviewTagWhereUniqueInput
    update: XOR<ResumeReviewTagUpdateWithoutTagInput, ResumeReviewTagUncheckedUpdateWithoutTagInput>
    create: XOR<ResumeReviewTagCreateWithoutTagInput, ResumeReviewTagUncheckedCreateWithoutTagInput>
  }

  export type ResumeReviewTagUpdateWithWhereUniqueWithoutTagInput = {
    where: ResumeReviewTagWhereUniqueInput
    data: XOR<ResumeReviewTagUpdateWithoutTagInput, ResumeReviewTagUncheckedUpdateWithoutTagInput>
  }

  export type ResumeReviewTagUpdateManyWithWhereWithoutTagInput = {
    where: ResumeReviewTagScalarWhereInput
    data: XOR<ResumeReviewTagUpdateManyMutationInput, ResumeReviewTagUncheckedUpdateManyWithoutTagInput>
  }

  export type UserReviewTagUpsertWithWhereUniqueWithoutTagInput = {
    where: UserReviewTagWhereUniqueInput
    update: XOR<UserReviewTagUpdateWithoutTagInput, UserReviewTagUncheckedUpdateWithoutTagInput>
    create: XOR<UserReviewTagCreateWithoutTagInput, UserReviewTagUncheckedCreateWithoutTagInput>
  }

  export type UserReviewTagUpdateWithWhereUniqueWithoutTagInput = {
    where: UserReviewTagWhereUniqueInput
    data: XOR<UserReviewTagUpdateWithoutTagInput, UserReviewTagUncheckedUpdateWithoutTagInput>
  }

  export type UserReviewTagUpdateManyWithWhereWithoutTagInput = {
    where: UserReviewTagScalarWhereInput
    data: XOR<UserReviewTagUpdateManyMutationInput, UserReviewTagUncheckedUpdateManyWithoutTagInput>
  }

  export type CompanyCreateWithoutUsersInput = {
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    resumes?: UserResumeCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    type?: $Enums.CompanyType
    isApproved?: boolean
    isActive?: boolean
    resumes?: UserResumeUncheckedCreateNestedManyWithoutCompanyInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutCompanyInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutCompanyInput
    issuedPaySlips?: PaySlipUncheckedCreateNestedManyWithoutIssuedByInput
    jobPosting?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUsersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
  }

  export type UserResumeCreateWithoutPrimaryOfInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResumesInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutPrimaryOfInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutPrimaryOfInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutPrimaryOfInput, UserResumeUncheckedCreateWithoutPrimaryOfInput>
  }

  export type UserResumeCreateWithoutUserInput = {
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserCreateNestedOneWithoutResumeInput
    company: CompanyCreateNestedOneWithoutResumesInput
    languages?: LanguageCreateNestedManyWithoutResumeInput
    educations?: EducationCreateNestedManyWithoutResumeInput
    experiences?: ExperienceCreateNestedManyWithoutResumeInput
    skills?: SkillCreateNestedManyWithoutResumeInput
    certificates?: CertificateCreateNestedManyWithoutResumeInput
    traits?: TraitCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutResumeInput
    biography?: BiographyCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationCreateNestedManyWithoutResumeInput
  }

  export type UserResumeUncheckedCreateWithoutUserInput = {
    id?: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryOf?: UserUncheckedCreateNestedOneWithoutResumeInput
    languages?: LanguageUncheckedCreateNestedManyWithoutResumeInput
    educations?: EducationUncheckedCreateNestedManyWithoutResumeInput
    experiences?: ExperienceUncheckedCreateNestedManyWithoutResumeInput
    skills?: SkillUncheckedCreateNestedManyWithoutResumeInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutResumeInput
    traits?: TraitUncheckedCreateNestedManyWithoutResumeInput
    commuteOptions?: CommuteUncheckedCreateNestedManyWithoutResumeInput
    workingTimes?: WorkingTimeUncheckedCreateNestedManyWithoutResumeInput
    workIdentities?: WorkIdentityUncheckedCreateNestedManyWithoutResumeInput
    jobPreferences?: JobTypeUncheckedCreateNestedManyWithoutResumeInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutResumeInput
    biography?: BiographyUncheckedCreateNestedOneWithoutResumeInput
    portfolio?: PortfolioUncheckedCreateNestedManyWithoutResumeInput
    profilePhotos?: ProfilePhotoUncheckedCreateNestedManyWithoutResumeInput
    resumeVersions?: ResumeVersionUncheckedCreateNestedManyWithoutResumeInput
    resumeVisibility?: ResumeVisibilityUncheckedCreateNestedOneWithoutResumeInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedCreateNestedManyWithoutResumeInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutResumeInput
    resumePDFs?: ResumePDFUncheckedCreateNestedManyWithoutResumeInput
    resumeReviewLogs?: ResumeReviewLogUncheckedCreateNestedManyWithoutResumeInput
    messageThreads?: MessageThreadUncheckedCreateNestedManyWithoutResumeInput
    accessGrants?: ResumeAccessGrantUncheckedCreateNestedManyWithoutResumeInput
    jobapplication?: JobApplicationUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UserResumeCreateOrConnectWithoutUserInput = {
    where: UserResumeWhereUniqueInput
    create: XOR<UserResumeCreateWithoutUserInput, UserResumeUncheckedCreateWithoutUserInput>
  }

  export type UserResumeCreateManyUserInputEnvelope = {
    data: UserResumeCreateManyUserInput | UserResumeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type IpRecordCreateWithoutUserInput = {
    ipAddress: string
    location?: string | null
    createdAt?: Date | string
  }

  export type IpRecordUncheckedCreateWithoutUserInput = {
    id?: number
    ipAddress: string
    location?: string | null
    createdAt?: Date | string
  }

  export type IpRecordCreateOrConnectWithoutUserInput = {
    where: IpRecordWhereUniqueInput
    create: XOR<IpRecordCreateWithoutUserInput, IpRecordUncheckedCreateWithoutUserInput>
  }

  export type IpRecordCreateManyUserInputEnvelope = {
    data: IpRecordCreateManyUserInput | IpRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DeviceRecordCreateWithoutUserInput = {
    deviceInfo: string
    platform?: string | null
    createdAt?: Date | string
  }

  export type DeviceRecordUncheckedCreateWithoutUserInput = {
    id?: number
    deviceInfo: string
    platform?: string | null
    createdAt?: Date | string
  }

  export type DeviceRecordCreateOrConnectWithoutUserInput = {
    where: DeviceRecordWhereUniqueInput
    create: XOR<DeviceRecordCreateWithoutUserInput, DeviceRecordUncheckedCreateWithoutUserInput>
  }

  export type DeviceRecordCreateManyUserInputEnvelope = {
    data: DeviceRecordCreateManyUserInput | DeviceRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ResumeViewLogCreateWithoutAdminInput = {
    viewedAt?: Date | string
    userViewedBy: UserCreateNestedOneWithoutResumesUserViewedInput
    resume: UserResumeCreateNestedOneWithoutResumeViewLogsInput
  }

  export type ResumeViewLogUncheckedCreateWithoutAdminInput = {
    id?: number
    userViewedById: number
    resumeId: number
    viewedAt?: Date | string
  }

  export type ResumeViewLogCreateOrConnectWithoutAdminInput = {
    where: ResumeViewLogWhereUniqueInput
    create: XOR<ResumeViewLogCreateWithoutAdminInput, ResumeViewLogUncheckedCreateWithoutAdminInput>
  }

  export type ResumeViewLogCreateManyAdminInputEnvelope = {
    data: ResumeViewLogCreateManyAdminInput | ResumeViewLogCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type ResumeViewLogCreateWithoutUserViewedByInput = {
    viewedAt?: Date | string
    admin: UserCreateNestedOneWithoutResumeViewLogsInput
    resume: UserResumeCreateNestedOneWithoutResumeViewLogsInput
  }

  export type ResumeViewLogUncheckedCreateWithoutUserViewedByInput = {
    id?: number
    adminId: number
    resumeId: number
    viewedAt?: Date | string
  }

  export type ResumeViewLogCreateOrConnectWithoutUserViewedByInput = {
    where: ResumeViewLogWhereUniqueInput
    create: XOR<ResumeViewLogCreateWithoutUserViewedByInput, ResumeViewLogUncheckedCreateWithoutUserViewedByInput>
  }

  export type ResumeViewLogCreateManyUserViewedByInputEnvelope = {
    data: ResumeViewLogCreateManyUserViewedByInput | ResumeViewLogCreateManyUserViewedByInput[]
    skipDuplicates?: boolean
  }

  export type ResumeReviewLogCreateWithoutReviewerInput = {
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutResumeReviewLogsInput
    tags?: ResumeReviewTagCreateNestedManyWithoutReviewInput
  }

  export type ResumeReviewLogUncheckedCreateWithoutReviewerInput = {
    id?: number
    resumeId: number
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
    tags?: ResumeReviewTagUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ResumeReviewLogCreateOrConnectWithoutReviewerInput = {
    where: ResumeReviewLogWhereUniqueInput
    create: XOR<ResumeReviewLogCreateWithoutReviewerInput, ResumeReviewLogUncheckedCreateWithoutReviewerInput>
  }

  export type ResumeReviewLogCreateManyReviewerInputEnvelope = {
    data: ResumeReviewLogCreateManyReviewerInput | ResumeReviewLogCreateManyReviewerInput[]
    skipDuplicates?: boolean
  }

  export type UserReviewLogCreateWithoutReviewerInput = {
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
    targetUser: UserCreateNestedOneWithoutUserReviewsReceivedInput
    tags?: UserReviewTagCreateNestedManyWithoutReviewInput
  }

  export type UserReviewLogUncheckedCreateWithoutReviewerInput = {
    id?: number
    targetUserId: number
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
    tags?: UserReviewTagUncheckedCreateNestedManyWithoutReviewInput
  }

  export type UserReviewLogCreateOrConnectWithoutReviewerInput = {
    where: UserReviewLogWhereUniqueInput
    create: XOR<UserReviewLogCreateWithoutReviewerInput, UserReviewLogUncheckedCreateWithoutReviewerInput>
  }

  export type UserReviewLogCreateManyReviewerInputEnvelope = {
    data: UserReviewLogCreateManyReviewerInput | UserReviewLogCreateManyReviewerInput[]
    skipDuplicates?: boolean
  }

  export type UserReviewLogCreateWithoutTargetUserInput = {
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
    reviewer: UserCreateNestedOneWithoutUserReviewsGivenInput
    tags?: UserReviewTagCreateNestedManyWithoutReviewInput
  }

  export type UserReviewLogUncheckedCreateWithoutTargetUserInput = {
    id?: number
    reviewerId: number
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
    tags?: UserReviewTagUncheckedCreateNestedManyWithoutReviewInput
  }

  export type UserReviewLogCreateOrConnectWithoutTargetUserInput = {
    where: UserReviewLogWhereUniqueInput
    create: XOR<UserReviewLogCreateWithoutTargetUserInput, UserReviewLogUncheckedCreateWithoutTargetUserInput>
  }

  export type UserReviewLogCreateManyTargetUserInputEnvelope = {
    data: UserReviewLogCreateManyTargetUserInput | UserReviewLogCreateManyTargetUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountHistoryLogCreateWithoutOperatedByInput = {
    action: string
    note?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAccountActionsReceivedInput
  }

  export type AccountHistoryLogUncheckedCreateWithoutOperatedByInput = {
    id?: number
    userId: number
    action: string
    note?: string | null
    createdAt?: Date | string
  }

  export type AccountHistoryLogCreateOrConnectWithoutOperatedByInput = {
    where: AccountHistoryLogWhereUniqueInput
    create: XOR<AccountHistoryLogCreateWithoutOperatedByInput, AccountHistoryLogUncheckedCreateWithoutOperatedByInput>
  }

  export type AccountHistoryLogCreateManyOperatedByInputEnvelope = {
    data: AccountHistoryLogCreateManyOperatedByInput | AccountHistoryLogCreateManyOperatedByInput[]
    skipDuplicates?: boolean
  }

  export type AccountHistoryLogCreateWithoutUserInput = {
    action: string
    note?: string | null
    createdAt?: Date | string
    operatedBy?: UserCreateNestedOneWithoutAccountActionsTakenInput
  }

  export type AccountHistoryLogUncheckedCreateWithoutUserInput = {
    id?: number
    operatorId?: number | null
    action: string
    note?: string | null
    createdAt?: Date | string
  }

  export type AccountHistoryLogCreateOrConnectWithoutUserInput = {
    where: AccountHistoryLogWhereUniqueInput
    create: XOR<AccountHistoryLogCreateWithoutUserInput, AccountHistoryLogUncheckedCreateWithoutUserInput>
  }

  export type AccountHistoryLogCreateManyUserInputEnvelope = {
    data: AccountHistoryLogCreateManyUserInput | AccountHistoryLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ResumeAccessGrantCreateWithoutGrantedByInput = {
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutAccessGrantsInput
    grantedTo: UserCreateNestedOneWithoutResumesGrantedToMeInput
  }

  export type ResumeAccessGrantUncheckedCreateWithoutGrantedByInput = {
    id?: number
    resumeId: number
    grantedToId: number
    createdAt?: Date | string
  }

  export type ResumeAccessGrantCreateOrConnectWithoutGrantedByInput = {
    where: ResumeAccessGrantWhereUniqueInput
    create: XOR<ResumeAccessGrantCreateWithoutGrantedByInput, ResumeAccessGrantUncheckedCreateWithoutGrantedByInput>
  }

  export type ResumeAccessGrantCreateManyGrantedByInputEnvelope = {
    data: ResumeAccessGrantCreateManyGrantedByInput | ResumeAccessGrantCreateManyGrantedByInput[]
    skipDuplicates?: boolean
  }

  export type ResumeAccessGrantCreateWithoutGrantedToInput = {
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutAccessGrantsInput
    grantedBy: UserCreateNestedOneWithoutResumesGrantedByMeInput
  }

  export type ResumeAccessGrantUncheckedCreateWithoutGrantedToInput = {
    id?: number
    resumeId: number
    grantedById: number
    createdAt?: Date | string
  }

  export type ResumeAccessGrantCreateOrConnectWithoutGrantedToInput = {
    where: ResumeAccessGrantWhereUniqueInput
    create: XOR<ResumeAccessGrantCreateWithoutGrantedToInput, ResumeAccessGrantUncheckedCreateWithoutGrantedToInput>
  }

  export type ResumeAccessGrantCreateManyGrantedToInputEnvelope = {
    data: ResumeAccessGrantCreateManyGrantedToInput | ResumeAccessGrantCreateManyGrantedToInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceLogCreateWithoutUserInput = {
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    company: CompanyCreateNestedOneWithoutAttendanceLogsInput
    schedule?: ShiftScheduleCreateNestedOneWithoutAttendanceLogsInput
  }

  export type AttendanceLogUncheckedCreateWithoutUserInput = {
    id?: number
    companyId: number
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    scheduleId?: number | null
  }

  export type AttendanceLogCreateOrConnectWithoutUserInput = {
    where: AttendanceLogWhereUniqueInput
    create: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput>
  }

  export type AttendanceLogCreateManyUserInputEnvelope = {
    data: AttendanceLogCreateManyUserInput | AttendanceLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ShiftScheduleCreateWithoutUserInput = {
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
    company: CompanyCreateNestedOneWithoutSchedulesInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutScheduleInput
  }

  export type ShiftScheduleUncheckedCreateWithoutUserInput = {
    id?: number
    companyId: number
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ShiftScheduleCreateOrConnectWithoutUserInput = {
    where: ShiftScheduleWhereUniqueInput
    create: XOR<ShiftScheduleCreateWithoutUserInput, ShiftScheduleUncheckedCreateWithoutUserInput>
  }

  export type ShiftScheduleCreateManyUserInputEnvelope = {
    data: ShiftScheduleCreateManyUserInput | ShiftScheduleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PaySlipCreateWithoutUserInput = {
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
    issuedBy: CompanyCreateNestedOneWithoutIssuedPaySlipsInput
  }

  export type PaySlipUncheckedCreateWithoutUserInput = {
    id?: number
    issuedById: number
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type PaySlipCreateOrConnectWithoutUserInput = {
    where: PaySlipWhereUniqueInput
    create: XOR<PaySlipCreateWithoutUserInput, PaySlipUncheckedCreateWithoutUserInput>
  }

  export type PaySlipCreateManyUserInputEnvelope = {
    data: PaySlipCreateManyUserInput | PaySlipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageLogCreateWithoutSenderInput = {
    content: string
    sentAt?: Date | string
    thread: MessageThreadCreateNestedOneWithoutMessagesInput
  }

  export type MessageLogUncheckedCreateWithoutSenderInput = {
    id?: number
    threadId: number
    content: string
    sentAt?: Date | string
  }

  export type MessageLogCreateOrConnectWithoutSenderInput = {
    where: MessageLogWhereUniqueInput
    create: XOR<MessageLogCreateWithoutSenderInput, MessageLogUncheckedCreateWithoutSenderInput>
  }

  export type MessageLogCreateManySenderInputEnvelope = {
    data: MessageLogCreateManySenderInput | MessageLogCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type MessageThreadCreateWithoutCreatedByInput = {
    createdAt?: Date | string
    resume: UserResumeCreateNestedOneWithoutMessageThreadsInput
    messages?: MessageLogCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadUncheckedCreateWithoutCreatedByInput = {
    id?: number
    resumeId: number
    createdAt?: Date | string
    messages?: MessageLogUncheckedCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadCreateOrConnectWithoutCreatedByInput = {
    where: MessageThreadWhereUniqueInput
    create: XOR<MessageThreadCreateWithoutCreatedByInput, MessageThreadUncheckedCreateWithoutCreatedByInput>
  }

  export type MessageThreadCreateManyCreatedByInputEnvelope = {
    data: MessageThreadCreateManyCreatedByInput | MessageThreadCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutUsersInput = {
    update: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUsersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type CompanyUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resumes?: UserResumeUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCompanyTypeFieldUpdateOperationsInput | $Enums.CompanyType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resumes?: UserResumeUncheckedUpdateManyWithoutCompanyNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutCompanyNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutCompanyNestedInput
    issuedPaySlips?: PaySlipUncheckedUpdateManyWithoutIssuedByNestedInput
    jobPosting?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserResumeUpsertWithoutPrimaryOfInput = {
    update: XOR<UserResumeUpdateWithoutPrimaryOfInput, UserResumeUncheckedUpdateWithoutPrimaryOfInput>
    create: XOR<UserResumeCreateWithoutPrimaryOfInput, UserResumeUncheckedCreateWithoutPrimaryOfInput>
    where?: UserResumeWhereInput
  }

  export type UserResumeUpdateToOneWithWhereWithoutPrimaryOfInput = {
    where?: UserResumeWhereInput
    data: XOR<UserResumeUpdateWithoutPrimaryOfInput, UserResumeUncheckedUpdateWithoutPrimaryOfInput>
  }

  export type UserResumeUpdateWithoutPrimaryOfInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutPrimaryOfInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserResumeWhereUniqueInput
    update: XOR<UserResumeUpdateWithoutUserInput, UserResumeUncheckedUpdateWithoutUserInput>
    create: XOR<UserResumeCreateWithoutUserInput, UserResumeUncheckedCreateWithoutUserInput>
  }

  export type UserResumeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserResumeWhereUniqueInput
    data: XOR<UserResumeUpdateWithoutUserInput, UserResumeUncheckedUpdateWithoutUserInput>
  }

  export type UserResumeUpdateManyWithWhereWithoutUserInput = {
    where: UserResumeScalarWhereInput
    data: XOR<UserResumeUpdateManyMutationInput, UserResumeUncheckedUpdateManyWithoutUserInput>
  }

  export type IpRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: IpRecordWhereUniqueInput
    update: XOR<IpRecordUpdateWithoutUserInput, IpRecordUncheckedUpdateWithoutUserInput>
    create: XOR<IpRecordCreateWithoutUserInput, IpRecordUncheckedCreateWithoutUserInput>
  }

  export type IpRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: IpRecordWhereUniqueInput
    data: XOR<IpRecordUpdateWithoutUserInput, IpRecordUncheckedUpdateWithoutUserInput>
  }

  export type IpRecordUpdateManyWithWhereWithoutUserInput = {
    where: IpRecordScalarWhereInput
    data: XOR<IpRecordUpdateManyMutationInput, IpRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type IpRecordScalarWhereInput = {
    AND?: IpRecordScalarWhereInput | IpRecordScalarWhereInput[]
    OR?: IpRecordScalarWhereInput[]
    NOT?: IpRecordScalarWhereInput | IpRecordScalarWhereInput[]
    id?: IntFilter<"IpRecord"> | number
    userId?: IntFilter<"IpRecord"> | number
    ipAddress?: StringFilter<"IpRecord"> | string
    location?: StringNullableFilter<"IpRecord"> | string | null
    createdAt?: DateTimeFilter<"IpRecord"> | Date | string
  }

  export type DeviceRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: DeviceRecordWhereUniqueInput
    update: XOR<DeviceRecordUpdateWithoutUserInput, DeviceRecordUncheckedUpdateWithoutUserInput>
    create: XOR<DeviceRecordCreateWithoutUserInput, DeviceRecordUncheckedCreateWithoutUserInput>
  }

  export type DeviceRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: DeviceRecordWhereUniqueInput
    data: XOR<DeviceRecordUpdateWithoutUserInput, DeviceRecordUncheckedUpdateWithoutUserInput>
  }

  export type DeviceRecordUpdateManyWithWhereWithoutUserInput = {
    where: DeviceRecordScalarWhereInput
    data: XOR<DeviceRecordUpdateManyMutationInput, DeviceRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type DeviceRecordScalarWhereInput = {
    AND?: DeviceRecordScalarWhereInput | DeviceRecordScalarWhereInput[]
    OR?: DeviceRecordScalarWhereInput[]
    NOT?: DeviceRecordScalarWhereInput | DeviceRecordScalarWhereInput[]
    id?: IntFilter<"DeviceRecord"> | number
    userId?: IntFilter<"DeviceRecord"> | number
    deviceInfo?: StringFilter<"DeviceRecord"> | string
    platform?: StringNullableFilter<"DeviceRecord"> | string | null
    createdAt?: DateTimeFilter<"DeviceRecord"> | Date | string
  }

  export type ResumeViewLogUpsertWithWhereUniqueWithoutAdminInput = {
    where: ResumeViewLogWhereUniqueInput
    update: XOR<ResumeViewLogUpdateWithoutAdminInput, ResumeViewLogUncheckedUpdateWithoutAdminInput>
    create: XOR<ResumeViewLogCreateWithoutAdminInput, ResumeViewLogUncheckedCreateWithoutAdminInput>
  }

  export type ResumeViewLogUpdateWithWhereUniqueWithoutAdminInput = {
    where: ResumeViewLogWhereUniqueInput
    data: XOR<ResumeViewLogUpdateWithoutAdminInput, ResumeViewLogUncheckedUpdateWithoutAdminInput>
  }

  export type ResumeViewLogUpdateManyWithWhereWithoutAdminInput = {
    where: ResumeViewLogScalarWhereInput
    data: XOR<ResumeViewLogUpdateManyMutationInput, ResumeViewLogUncheckedUpdateManyWithoutAdminInput>
  }

  export type ResumeViewLogUpsertWithWhereUniqueWithoutUserViewedByInput = {
    where: ResumeViewLogWhereUniqueInput
    update: XOR<ResumeViewLogUpdateWithoutUserViewedByInput, ResumeViewLogUncheckedUpdateWithoutUserViewedByInput>
    create: XOR<ResumeViewLogCreateWithoutUserViewedByInput, ResumeViewLogUncheckedCreateWithoutUserViewedByInput>
  }

  export type ResumeViewLogUpdateWithWhereUniqueWithoutUserViewedByInput = {
    where: ResumeViewLogWhereUniqueInput
    data: XOR<ResumeViewLogUpdateWithoutUserViewedByInput, ResumeViewLogUncheckedUpdateWithoutUserViewedByInput>
  }

  export type ResumeViewLogUpdateManyWithWhereWithoutUserViewedByInput = {
    where: ResumeViewLogScalarWhereInput
    data: XOR<ResumeViewLogUpdateManyMutationInput, ResumeViewLogUncheckedUpdateManyWithoutUserViewedByInput>
  }

  export type ResumeReviewLogUpsertWithWhereUniqueWithoutReviewerInput = {
    where: ResumeReviewLogWhereUniqueInput
    update: XOR<ResumeReviewLogUpdateWithoutReviewerInput, ResumeReviewLogUncheckedUpdateWithoutReviewerInput>
    create: XOR<ResumeReviewLogCreateWithoutReviewerInput, ResumeReviewLogUncheckedCreateWithoutReviewerInput>
  }

  export type ResumeReviewLogUpdateWithWhereUniqueWithoutReviewerInput = {
    where: ResumeReviewLogWhereUniqueInput
    data: XOR<ResumeReviewLogUpdateWithoutReviewerInput, ResumeReviewLogUncheckedUpdateWithoutReviewerInput>
  }

  export type ResumeReviewLogUpdateManyWithWhereWithoutReviewerInput = {
    where: ResumeReviewLogScalarWhereInput
    data: XOR<ResumeReviewLogUpdateManyMutationInput, ResumeReviewLogUncheckedUpdateManyWithoutReviewerInput>
  }

  export type UserReviewLogUpsertWithWhereUniqueWithoutReviewerInput = {
    where: UserReviewLogWhereUniqueInput
    update: XOR<UserReviewLogUpdateWithoutReviewerInput, UserReviewLogUncheckedUpdateWithoutReviewerInput>
    create: XOR<UserReviewLogCreateWithoutReviewerInput, UserReviewLogUncheckedCreateWithoutReviewerInput>
  }

  export type UserReviewLogUpdateWithWhereUniqueWithoutReviewerInput = {
    where: UserReviewLogWhereUniqueInput
    data: XOR<UserReviewLogUpdateWithoutReviewerInput, UserReviewLogUncheckedUpdateWithoutReviewerInput>
  }

  export type UserReviewLogUpdateManyWithWhereWithoutReviewerInput = {
    where: UserReviewLogScalarWhereInput
    data: XOR<UserReviewLogUpdateManyMutationInput, UserReviewLogUncheckedUpdateManyWithoutReviewerInput>
  }

  export type UserReviewLogScalarWhereInput = {
    AND?: UserReviewLogScalarWhereInput | UserReviewLogScalarWhereInput[]
    OR?: UserReviewLogScalarWhereInput[]
    NOT?: UserReviewLogScalarWhereInput | UserReviewLogScalarWhereInput[]
    id?: IntFilter<"UserReviewLog"> | number
    targetUserId?: IntFilter<"UserReviewLog"> | number
    reviewerId?: IntFilter<"UserReviewLog"> | number
    score?: IntNullableFilter<"UserReviewLog"> | number | null
    reviewType?: StringNullableFilter<"UserReviewLog"> | string | null
    isBlacklisted?: BoolFilter<"UserReviewLog"> | boolean
    note?: StringNullableFilter<"UserReviewLog"> | string | null
    createdAt?: DateTimeFilter<"UserReviewLog"> | Date | string
  }

  export type UserReviewLogUpsertWithWhereUniqueWithoutTargetUserInput = {
    where: UserReviewLogWhereUniqueInput
    update: XOR<UserReviewLogUpdateWithoutTargetUserInput, UserReviewLogUncheckedUpdateWithoutTargetUserInput>
    create: XOR<UserReviewLogCreateWithoutTargetUserInput, UserReviewLogUncheckedCreateWithoutTargetUserInput>
  }

  export type UserReviewLogUpdateWithWhereUniqueWithoutTargetUserInput = {
    where: UserReviewLogWhereUniqueInput
    data: XOR<UserReviewLogUpdateWithoutTargetUserInput, UserReviewLogUncheckedUpdateWithoutTargetUserInput>
  }

  export type UserReviewLogUpdateManyWithWhereWithoutTargetUserInput = {
    where: UserReviewLogScalarWhereInput
    data: XOR<UserReviewLogUpdateManyMutationInput, UserReviewLogUncheckedUpdateManyWithoutTargetUserInput>
  }

  export type AccountHistoryLogUpsertWithWhereUniqueWithoutOperatedByInput = {
    where: AccountHistoryLogWhereUniqueInput
    update: XOR<AccountHistoryLogUpdateWithoutOperatedByInput, AccountHistoryLogUncheckedUpdateWithoutOperatedByInput>
    create: XOR<AccountHistoryLogCreateWithoutOperatedByInput, AccountHistoryLogUncheckedCreateWithoutOperatedByInput>
  }

  export type AccountHistoryLogUpdateWithWhereUniqueWithoutOperatedByInput = {
    where: AccountHistoryLogWhereUniqueInput
    data: XOR<AccountHistoryLogUpdateWithoutOperatedByInput, AccountHistoryLogUncheckedUpdateWithoutOperatedByInput>
  }

  export type AccountHistoryLogUpdateManyWithWhereWithoutOperatedByInput = {
    where: AccountHistoryLogScalarWhereInput
    data: XOR<AccountHistoryLogUpdateManyMutationInput, AccountHistoryLogUncheckedUpdateManyWithoutOperatedByInput>
  }

  export type AccountHistoryLogScalarWhereInput = {
    AND?: AccountHistoryLogScalarWhereInput | AccountHistoryLogScalarWhereInput[]
    OR?: AccountHistoryLogScalarWhereInput[]
    NOT?: AccountHistoryLogScalarWhereInput | AccountHistoryLogScalarWhereInput[]
    id?: IntFilter<"AccountHistoryLog"> | number
    userId?: IntFilter<"AccountHistoryLog"> | number
    operatorId?: IntNullableFilter<"AccountHistoryLog"> | number | null
    action?: StringFilter<"AccountHistoryLog"> | string
    note?: StringNullableFilter<"AccountHistoryLog"> | string | null
    createdAt?: DateTimeFilter<"AccountHistoryLog"> | Date | string
  }

  export type AccountHistoryLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountHistoryLogWhereUniqueInput
    update: XOR<AccountHistoryLogUpdateWithoutUserInput, AccountHistoryLogUncheckedUpdateWithoutUserInput>
    create: XOR<AccountHistoryLogCreateWithoutUserInput, AccountHistoryLogUncheckedCreateWithoutUserInput>
  }

  export type AccountHistoryLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountHistoryLogWhereUniqueInput
    data: XOR<AccountHistoryLogUpdateWithoutUserInput, AccountHistoryLogUncheckedUpdateWithoutUserInput>
  }

  export type AccountHistoryLogUpdateManyWithWhereWithoutUserInput = {
    where: AccountHistoryLogScalarWhereInput
    data: XOR<AccountHistoryLogUpdateManyMutationInput, AccountHistoryLogUncheckedUpdateManyWithoutUserInput>
  }

  export type ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedByInput = {
    where: ResumeAccessGrantWhereUniqueInput
    update: XOR<ResumeAccessGrantUpdateWithoutGrantedByInput, ResumeAccessGrantUncheckedUpdateWithoutGrantedByInput>
    create: XOR<ResumeAccessGrantCreateWithoutGrantedByInput, ResumeAccessGrantUncheckedCreateWithoutGrantedByInput>
  }

  export type ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedByInput = {
    where: ResumeAccessGrantWhereUniqueInput
    data: XOR<ResumeAccessGrantUpdateWithoutGrantedByInput, ResumeAccessGrantUncheckedUpdateWithoutGrantedByInput>
  }

  export type ResumeAccessGrantUpdateManyWithWhereWithoutGrantedByInput = {
    where: ResumeAccessGrantScalarWhereInput
    data: XOR<ResumeAccessGrantUpdateManyMutationInput, ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByInput>
  }

  export type ResumeAccessGrantUpsertWithWhereUniqueWithoutGrantedToInput = {
    where: ResumeAccessGrantWhereUniqueInput
    update: XOR<ResumeAccessGrantUpdateWithoutGrantedToInput, ResumeAccessGrantUncheckedUpdateWithoutGrantedToInput>
    create: XOR<ResumeAccessGrantCreateWithoutGrantedToInput, ResumeAccessGrantUncheckedCreateWithoutGrantedToInput>
  }

  export type ResumeAccessGrantUpdateWithWhereUniqueWithoutGrantedToInput = {
    where: ResumeAccessGrantWhereUniqueInput
    data: XOR<ResumeAccessGrantUpdateWithoutGrantedToInput, ResumeAccessGrantUncheckedUpdateWithoutGrantedToInput>
  }

  export type ResumeAccessGrantUpdateManyWithWhereWithoutGrantedToInput = {
    where: ResumeAccessGrantScalarWhereInput
    data: XOR<ResumeAccessGrantUpdateManyMutationInput, ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToInput>
  }

  export type AttendanceLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AttendanceLogWhereUniqueInput
    update: XOR<AttendanceLogUpdateWithoutUserInput, AttendanceLogUncheckedUpdateWithoutUserInput>
    create: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput>
  }

  export type AttendanceLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AttendanceLogWhereUniqueInput
    data: XOR<AttendanceLogUpdateWithoutUserInput, AttendanceLogUncheckedUpdateWithoutUserInput>
  }

  export type AttendanceLogUpdateManyWithWhereWithoutUserInput = {
    where: AttendanceLogScalarWhereInput
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyWithoutUserInput>
  }

  export type ShiftScheduleUpsertWithWhereUniqueWithoutUserInput = {
    where: ShiftScheduleWhereUniqueInput
    update: XOR<ShiftScheduleUpdateWithoutUserInput, ShiftScheduleUncheckedUpdateWithoutUserInput>
    create: XOR<ShiftScheduleCreateWithoutUserInput, ShiftScheduleUncheckedCreateWithoutUserInput>
  }

  export type ShiftScheduleUpdateWithWhereUniqueWithoutUserInput = {
    where: ShiftScheduleWhereUniqueInput
    data: XOR<ShiftScheduleUpdateWithoutUserInput, ShiftScheduleUncheckedUpdateWithoutUserInput>
  }

  export type ShiftScheduleUpdateManyWithWhereWithoutUserInput = {
    where: ShiftScheduleScalarWhereInput
    data: XOR<ShiftScheduleUpdateManyMutationInput, ShiftScheduleUncheckedUpdateManyWithoutUserInput>
  }

  export type PaySlipUpsertWithWhereUniqueWithoutUserInput = {
    where: PaySlipWhereUniqueInput
    update: XOR<PaySlipUpdateWithoutUserInput, PaySlipUncheckedUpdateWithoutUserInput>
    create: XOR<PaySlipCreateWithoutUserInput, PaySlipUncheckedCreateWithoutUserInput>
  }

  export type PaySlipUpdateWithWhereUniqueWithoutUserInput = {
    where: PaySlipWhereUniqueInput
    data: XOR<PaySlipUpdateWithoutUserInput, PaySlipUncheckedUpdateWithoutUserInput>
  }

  export type PaySlipUpdateManyWithWhereWithoutUserInput = {
    where: PaySlipScalarWhereInput
    data: XOR<PaySlipUpdateManyMutationInput, PaySlipUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageLogUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageLogWhereUniqueInput
    update: XOR<MessageLogUpdateWithoutSenderInput, MessageLogUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageLogCreateWithoutSenderInput, MessageLogUncheckedCreateWithoutSenderInput>
  }

  export type MessageLogUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageLogWhereUniqueInput
    data: XOR<MessageLogUpdateWithoutSenderInput, MessageLogUncheckedUpdateWithoutSenderInput>
  }

  export type MessageLogUpdateManyWithWhereWithoutSenderInput = {
    where: MessageLogScalarWhereInput
    data: XOR<MessageLogUpdateManyMutationInput, MessageLogUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageThreadUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: MessageThreadWhereUniqueInput
    update: XOR<MessageThreadUpdateWithoutCreatedByInput, MessageThreadUncheckedUpdateWithoutCreatedByInput>
    create: XOR<MessageThreadCreateWithoutCreatedByInput, MessageThreadUncheckedCreateWithoutCreatedByInput>
  }

  export type MessageThreadUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: MessageThreadWhereUniqueInput
    data: XOR<MessageThreadUpdateWithoutCreatedByInput, MessageThreadUncheckedUpdateWithoutCreatedByInput>
  }

  export type MessageThreadUpdateManyWithWhereWithoutCreatedByInput = {
    where: MessageThreadScalarWhereInput
    data: XOR<MessageThreadUpdateManyMutationInput, MessageThreadUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type UserCreateWithoutIpRecordsInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutIpRecordsInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutIpRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIpRecordsInput, UserUncheckedCreateWithoutIpRecordsInput>
  }

  export type UserUpsertWithoutIpRecordsInput = {
    update: XOR<UserUpdateWithoutIpRecordsInput, UserUncheckedUpdateWithoutIpRecordsInput>
    create: XOR<UserCreateWithoutIpRecordsInput, UserUncheckedCreateWithoutIpRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutIpRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutIpRecordsInput, UserUncheckedUpdateWithoutIpRecordsInput>
  }

  export type UserUpdateWithoutIpRecordsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutIpRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutDeviceRecordsInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutDeviceRecordsInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutDeviceRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDeviceRecordsInput, UserUncheckedCreateWithoutDeviceRecordsInput>
  }

  export type UserUpsertWithoutDeviceRecordsInput = {
    update: XOR<UserUpdateWithoutDeviceRecordsInput, UserUncheckedUpdateWithoutDeviceRecordsInput>
    create: XOR<UserCreateWithoutDeviceRecordsInput, UserUncheckedCreateWithoutDeviceRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDeviceRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDeviceRecordsInput, UserUncheckedUpdateWithoutDeviceRecordsInput>
  }

  export type UserUpdateWithoutDeviceRecordsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDeviceRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutAccountActionsReceivedInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogCreateNestedManyWithoutOperatedByInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAccountActionsReceivedInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsTaken?: AccountHistoryLogUncheckedCreateNestedManyWithoutOperatedByInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAccountActionsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountActionsReceivedInput, UserUncheckedCreateWithoutAccountActionsReceivedInput>
  }

  export type UserCreateWithoutAccountActionsTakenInput = {
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    company?: CompanyCreateNestedOneWithoutUsersInput
    resume?: UserResumeCreateNestedOneWithoutPrimaryOfInput
    resumes?: UserResumeCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogCreateNestedManyWithoutTargetUserInput
    accountActionsReceived?: AccountHistoryLogCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleCreateNestedManyWithoutUserInput
    paySlips?: PaySlipCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAccountActionsTakenInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    companyId?: number | null
    role?: $Enums.UserRole
    resumeId?: number | null
    resumes?: UserResumeUncheckedCreateNestedManyWithoutUserInput
    ipRecords?: IpRecordUncheckedCreateNestedManyWithoutUserInput
    deviceRecords?: DeviceRecordUncheckedCreateNestedManyWithoutUserInput
    resumeViewLogs?: ResumeViewLogUncheckedCreateNestedManyWithoutAdminInput
    resumesUserViewed?: ResumeViewLogUncheckedCreateNestedManyWithoutUserViewedByInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsGiven?: UserReviewLogUncheckedCreateNestedManyWithoutReviewerInput
    userReviewsReceived?: UserReviewLogUncheckedCreateNestedManyWithoutTargetUserInput
    accountActionsReceived?: AccountHistoryLogUncheckedCreateNestedManyWithoutUserInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedByInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedCreateNestedManyWithoutGrantedToInput
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    schedules?: ShiftScheduleUncheckedCreateNestedManyWithoutUserInput
    paySlips?: PaySlipUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageLogUncheckedCreateNestedManyWithoutSenderInput
    createdThreads?: MessageThreadUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAccountActionsTakenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountActionsTakenInput, UserUncheckedCreateWithoutAccountActionsTakenInput>
  }

  export type UserUpsertWithoutAccountActionsReceivedInput = {
    update: XOR<UserUpdateWithoutAccountActionsReceivedInput, UserUncheckedUpdateWithoutAccountActionsReceivedInput>
    create: XOR<UserCreateWithoutAccountActionsReceivedInput, UserUncheckedCreateWithoutAccountActionsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountActionsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountActionsReceivedInput, UserUncheckedUpdateWithoutAccountActionsReceivedInput>
  }

  export type UserUpdateWithoutAccountActionsReceivedInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountActionsReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutAccountActionsTakenInput = {
    update: XOR<UserUpdateWithoutAccountActionsTakenInput, UserUncheckedUpdateWithoutAccountActionsTakenInput>
    create: XOR<UserCreateWithoutAccountActionsTakenInput, UserUncheckedCreateWithoutAccountActionsTakenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountActionsTakenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountActionsTakenInput, UserUncheckedUpdateWithoutAccountActionsTakenInput>
  }

  export type UserUpdateWithoutAccountActionsTakenInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    company?: CompanyUpdateOneWithoutUsersNestedInput
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountActionsTakenInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyCompanyInput = {
    id?: number
    email?: string | null
    googleId?: string | null
    facebookId?: string | null
    lineId?: string | null
    lastLogin?: Date | string | null
    lastLoginIp?: string | null
    skipRegistration?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    deletedAt?: Date | string | null
    isAnonymized?: boolean
    deletionReason?: string | null
    role?: $Enums.UserRole
    resumeId?: number | null
  }

  export type UserResumeCreateManyCompanyInput = {
    id?: number
    userId: number
    isPrimary?: boolean
    title?: string | null
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceLogCreateManyCompanyInput = {
    id?: number
    userId: number
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    scheduleId?: number | null
  }

  export type ShiftScheduleCreateManyCompanyInput = {
    id?: number
    userId: number
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
  }

  export type PaySlipCreateManyIssuedByInput = {
    id?: number
    userId: number
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type JobPostingCreateManyCompanyInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    jobType: $Enums.JobTypeEnum
    salaryRange?: string | null
    isActive?: boolean
    postedAt?: Date | string
    expiredAt?: Date | string | null
  }

  export type UserUpdateWithoutCompanyInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resume?: UserResumeUpdateOneWithoutPrimaryOfNestedInput
    resumes?: UserResumeUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
    resumes?: UserResumeUncheckedUpdateManyWithoutUserNestedInput
    ipRecords?: IpRecordUncheckedUpdateManyWithoutUserNestedInput
    deviceRecords?: DeviceRecordUncheckedUpdateManyWithoutUserNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutAdminNestedInput
    resumesUserViewed?: ResumeViewLogUncheckedUpdateManyWithoutUserViewedByNestedInput
    resumeReviewsGiven?: ResumeReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsGiven?: UserReviewLogUncheckedUpdateManyWithoutReviewerNestedInput
    userReviewsReceived?: UserReviewLogUncheckedUpdateManyWithoutTargetUserNestedInput
    accountActionsTaken?: AccountHistoryLogUncheckedUpdateManyWithoutOperatedByNestedInput
    accountActionsReceived?: AccountHistoryLogUncheckedUpdateManyWithoutUserNestedInput
    resumesGrantedByMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByNestedInput
    resumesGrantedToMe?: ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToNestedInput
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    schedules?: ShiftScheduleUncheckedUpdateManyWithoutUserNestedInput
    paySlips?: PaySlipUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageLogUncheckedUpdateManyWithoutSenderNestedInput
    createdThreads?: MessageThreadUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    skipRegistration?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAnonymized?: BoolFieldUpdateOperationsInput | boolean
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    resumeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserResumeUpdateWithoutCompanyInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLogUpdateWithoutCompanyInput = {
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAttendanceLogsNestedInput
    schedule?: ShiftScheduleUpdateOneWithoutAttendanceLogsNestedInput
  }

  export type AttendanceLogUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendanceLogUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftScheduleUpdateWithoutCompanyInput = {
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSchedulesNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutScheduleNestedInput
  }

  export type ShiftScheduleUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ShiftScheduleUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipUpdateWithoutIssuedByInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPaySlipsNestedInput
  }

  export type PaySlipUncheckedUpdateWithoutIssuedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaySlipUncheckedUpdateManyWithoutIssuedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobPostingUpdateWithoutCompanyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
  }

  export type JobPostingUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobPostingUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    jobType?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendanceLogCreateManyScheduleInput = {
    id?: number
    userId: number
    companyId: number
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
  }

  export type AttendanceLogUpdateWithoutScheduleInput = {
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAttendanceLogsNestedInput
    company?: CompanyUpdateOneRequiredWithoutAttendanceLogsNestedInput
  }

  export type AttendanceLogUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceLogUncheckedUpdateManyWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobApplicationCreateManyJobInput = {
    id?: number
    resumeId: number
    status: string
    appliedAt?: Date | string
    note?: string | null
  }

  export type JobApplicationUpdateWithoutJobInput = {
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: UserResumeUpdateOneRequiredWithoutJobapplicationNestedInput
  }

  export type JobApplicationUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobApplicationUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageLogCreateManyThreadInput = {
    id?: number
    senderId: number
    content: string
    sentAt?: Date | string
  }

  export type MessageLogUpdateWithoutThreadInput = {
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageLogUncheckedUpdateWithoutThreadInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageLogUncheckedUpdateManyWithoutThreadInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageCreateManyResumeInput = {
    id?: number
    name: string
    level: $Enums.LanguageLevel
    levelOther?: string | null
  }

  export type EducationCreateManyResumeInput = {
    id?: number
    school: string
    department: string
    status: $Enums.EducationStatus
    statusOther?: string | null
    startDate: Date | string
    endDate: Date | string
  }

  export type ExperienceCreateManyResumeInput = {
    id?: number
    company: string
    title: string
    startDate: Date | string
    endDate: Date | string
    description: string
  }

  export type SkillCreateManyResumeInput = {
    id?: number
    name: string
  }

  export type CertificateCreateManyResumeInput = {
    id?: number
    name: string
    expiry?: Date | string | null
  }

  export type TraitCreateManyResumeInput = {
    id?: number
    personality: string
    interest?: string | null
  }

  export type CommuteCreateManyResumeInput = {
    id?: number
    method: $Enums.CommuteMethod
    methodOther?: string | null
  }

  export type WorkingTimeCreateManyResumeInput = {
    id?: number
    shift: $Enums.ShiftType
    shiftOther?: string | null
    preference: string
    expectedStart?: Date | string | null
    expectedEnd?: Date | string | null
  }

  export type WorkIdentityCreateManyResumeInput = {
    id?: number
    identity: $Enums.WorkIdentityType
    identityOther?: string | null
  }

  export type JobTypeCreateManyResumeInput = {
    id?: number
    type: $Enums.JobTypeEnum
    typeOther?: string | null
  }

  export type EmergencyContactCreateManyResumeInput = {
    id?: number
    firstName: string
    lastName: string
    phoneNumber: string
    relation: $Enums.ContactRelation
    relationOther?: string | null
  }

  export type PortfolioCreateManyResumeInput = {
    id?: number
    externalUrl: string
    title?: string | null
    description?: string | null
  }

  export type ProfilePhotoCreateManyResumeInput = {
    id?: number
    fileUrl: string
    type?: string | null
  }

  export type ResumeVersionCreateManyResumeInput = {
    id?: number
    snapshot: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    version?: string | null
    note?: string | null
    isCurrent?: boolean
  }

  export type ResumeReviewStatusCreateManyResumeInput = {
    id?: number
    viewerId: number
    viewerType: string
    viewedAt?: Date | string
  }

  export type ResumeViewLogCreateManyResumeInput = {
    id?: number
    adminId: number
    userViewedById: number
    viewedAt?: Date | string
  }

  export type ResumePDFCreateManyResumeInput = {
    id?: number
    fileUrl: string
    template?: string | null
    createdAt?: Date | string
  }

  export type ResumeReviewLogCreateManyResumeInput = {
    id?: number
    reviewerId: number
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
  }

  export type MessageThreadCreateManyResumeInput = {
    id?: number
    createdById: number
    createdAt?: Date | string
  }

  export type ResumeAccessGrantCreateManyResumeInput = {
    id?: number
    grantedToId: number
    grantedById: number
    createdAt?: Date | string
  }

  export type JobApplicationCreateManyResumeInput = {
    id?: number
    jobId: number
    status: string
    appliedAt?: Date | string
    note?: string | null
  }

  export type LanguageUpdateWithoutResumeInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    levelOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    levelOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    levelOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationUpdateWithoutResumeInput = {
    school?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    status?: EnumEducationStatusFieldUpdateOperationsInput | $Enums.EducationStatus
    statusOther?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    status?: EnumEducationStatusFieldUpdateOperationsInput | $Enums.EducationStatus
    statusOther?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    status?: EnumEducationStatusFieldUpdateOperationsInput | $Enums.EducationStatus
    statusOther?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperienceUpdateWithoutResumeInput = {
    company?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUpdateWithoutResumeInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateUpdateWithoutResumeInput = {
    name?: StringFieldUpdateOperationsInput | string
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CertificateUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CertificateUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TraitUpdateWithoutResumeInput = {
    personality?: StringFieldUpdateOperationsInput | string
    interest?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TraitUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    personality?: StringFieldUpdateOperationsInput | string
    interest?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TraitUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    personality?: StringFieldUpdateOperationsInput | string
    interest?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommuteUpdateWithoutResumeInput = {
    method?: EnumCommuteMethodFieldUpdateOperationsInput | $Enums.CommuteMethod
    methodOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommuteUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: EnumCommuteMethodFieldUpdateOperationsInput | $Enums.CommuteMethod
    methodOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommuteUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: EnumCommuteMethodFieldUpdateOperationsInput | $Enums.CommuteMethod
    methodOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkingTimeUpdateWithoutResumeInput = {
    shift?: EnumShiftTypeFieldUpdateOperationsInput | $Enums.ShiftType
    shiftOther?: NullableStringFieldUpdateOperationsInput | string | null
    preference?: StringFieldUpdateOperationsInput | string
    expectedStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkingTimeUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    shift?: EnumShiftTypeFieldUpdateOperationsInput | $Enums.ShiftType
    shiftOther?: NullableStringFieldUpdateOperationsInput | string | null
    preference?: StringFieldUpdateOperationsInput | string
    expectedStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkingTimeUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    shift?: EnumShiftTypeFieldUpdateOperationsInput | $Enums.ShiftType
    shiftOther?: NullableStringFieldUpdateOperationsInput | string | null
    preference?: StringFieldUpdateOperationsInput | string
    expectedStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkIdentityUpdateWithoutResumeInput = {
    identity?: EnumWorkIdentityTypeFieldUpdateOperationsInput | $Enums.WorkIdentityType
    identityOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkIdentityUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    identity?: EnumWorkIdentityTypeFieldUpdateOperationsInput | $Enums.WorkIdentityType
    identityOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkIdentityUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    identity?: EnumWorkIdentityTypeFieldUpdateOperationsInput | $Enums.WorkIdentityType
    identityOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobTypeUpdateWithoutResumeInput = {
    type?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    typeOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobTypeUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    typeOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobTypeUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumJobTypeEnumFieldUpdateOperationsInput | $Enums.JobTypeEnum
    typeOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmergencyContactUpdateWithoutResumeInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    relation?: EnumContactRelationFieldUpdateOperationsInput | $Enums.ContactRelation
    relationOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmergencyContactUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    relation?: EnumContactRelationFieldUpdateOperationsInput | $Enums.ContactRelation
    relationOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmergencyContactUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    relation?: EnumContactRelationFieldUpdateOperationsInput | $Enums.ContactRelation
    relationOther?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PortfolioUpdateWithoutResumeInput = {
    externalUrl?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PortfolioUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    externalUrl?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PortfolioUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    externalUrl?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilePhotoUpdateWithoutResumeInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilePhotoUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilePhotoUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResumeVersionUpdateWithoutResumeInput = {
    snapshot?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResumeVersionUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    snapshot?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResumeVersionUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    snapshot?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResumeReviewStatusUpdateWithoutResumeInput = {
    viewerId?: IntFieldUpdateOperationsInput | number
    viewerType?: StringFieldUpdateOperationsInput | string
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewStatusUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    viewerId?: IntFieldUpdateOperationsInput | number
    viewerType?: StringFieldUpdateOperationsInput | string
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewStatusUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    viewerId?: IntFieldUpdateOperationsInput | number
    viewerType?: StringFieldUpdateOperationsInput | string
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogUpdateWithoutResumeInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneRequiredWithoutResumeViewLogsNestedInput
    userViewedBy?: UserUpdateOneRequiredWithoutResumesUserViewedNestedInput
  }

  export type ResumeViewLogUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    userViewedById?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    userViewedById?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumePDFUpdateWithoutResumeInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumePDFUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumePDFUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewLogUpdateWithoutResumeInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewer?: UserUpdateOneRequiredWithoutResumeReviewsGivenNestedInput
    tags?: ResumeReviewTagUpdateManyWithoutReviewNestedInput
  }

  export type ResumeReviewLogUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ResumeReviewTagUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ResumeReviewLogUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageThreadUpdateWithoutResumeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedThreadsNestedInput
    messages?: MessageLogUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageLogUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAccessGrantUpdateWithoutResumeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedTo?: UserUpdateOneRequiredWithoutResumesGrantedToMeNestedInput
    grantedBy?: UserUpdateOneRequiredWithoutResumesGrantedByMeNestedInput
  }

  export type ResumeAccessGrantUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    grantedToId?: IntFieldUpdateOperationsInput | number
    grantedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAccessGrantUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    grantedToId?: IntFieldUpdateOperationsInput | number
    grantedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobApplicationUpdateWithoutResumeInput = {
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    job?: JobPostingUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type JobApplicationUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobApplicationUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserReviewTagCreateManyReviewInput = {
    id?: number
    tagId: number
  }

  export type UserReviewTagUpdateWithoutReviewInput = {
    tag?: ReviewTagOptionUpdateOneRequiredWithoutUserTagsNestedInput
  }

  export type UserReviewTagUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type UserReviewTagUncheckedUpdateManyWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeReviewTagCreateManyReviewInput = {
    id?: number
    tagId: number
  }

  export type ResumeReviewTagUpdateWithoutReviewInput = {
    tag?: ReviewTagOptionUpdateOneRequiredWithoutResumeTagsNestedInput
  }

  export type ResumeReviewTagUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeReviewTagUncheckedUpdateManyWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeReviewTagCreateManyTagInput = {
    id?: number
    reviewId: number
  }

  export type UserReviewTagCreateManyTagInput = {
    id?: number
    reviewId: number
  }

  export type ResumeReviewTagUpdateWithoutTagInput = {
    review?: ResumeReviewLogUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ResumeReviewTagUncheckedUpdateWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeReviewTagUncheckedUpdateManyWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type UserReviewTagUpdateWithoutTagInput = {
    review?: UserReviewLogUpdateOneRequiredWithoutTagsNestedInput
  }

  export type UserReviewTagUncheckedUpdateWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type UserReviewTagUncheckedUpdateManyWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type UserResumeCreateManyUserInput = {
    id?: number
    isPrimary?: boolean
    title?: string | null
    companyId: number
    identityNumber?: string | null
    workPermit?: string | null
    passport?: string | null
    email?: string | null
    emailVerified?: boolean
    phoneNumber?: string | null
    phoneVerified?: boolean
    profilePicture?: string | null
    firstName: string
    lastName: string
    englishName?: string | null
    nickname?: string | null
    mailCountry?: string | null
    mailCity?: string | null
    mailDistrict?: string | null
    mailAddress?: string | null
    residentialCountry?: string | null
    residentialCity?: string | null
    residentialDistrict?: string | null
    residentialAddress?: string | null
    isRegistered?: boolean
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IpRecordCreateManyUserInput = {
    id?: number
    ipAddress: string
    location?: string | null
    createdAt?: Date | string
  }

  export type DeviceRecordCreateManyUserInput = {
    id?: number
    deviceInfo: string
    platform?: string | null
    createdAt?: Date | string
  }

  export type ResumeViewLogCreateManyAdminInput = {
    id?: number
    userViewedById: number
    resumeId: number
    viewedAt?: Date | string
  }

  export type ResumeViewLogCreateManyUserViewedByInput = {
    id?: number
    adminId: number
    resumeId: number
    viewedAt?: Date | string
  }

  export type ResumeReviewLogCreateManyReviewerInput = {
    id?: number
    resumeId: number
    score?: number | null
    status?: $Enums.ReviewStatus
    note?: string | null
    createdAt?: Date | string
  }

  export type UserReviewLogCreateManyReviewerInput = {
    id?: number
    targetUserId: number
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
  }

  export type UserReviewLogCreateManyTargetUserInput = {
    id?: number
    reviewerId: number
    score?: number | null
    reviewType?: string | null
    isBlacklisted?: boolean
    note?: string | null
    createdAt?: Date | string
  }

  export type AccountHistoryLogCreateManyOperatedByInput = {
    id?: number
    userId: number
    action: string
    note?: string | null
    createdAt?: Date | string
  }

  export type AccountHistoryLogCreateManyUserInput = {
    id?: number
    operatorId?: number | null
    action: string
    note?: string | null
    createdAt?: Date | string
  }

  export type ResumeAccessGrantCreateManyGrantedByInput = {
    id?: number
    resumeId: number
    grantedToId: number
    createdAt?: Date | string
  }

  export type ResumeAccessGrantCreateManyGrantedToInput = {
    id?: number
    resumeId: number
    grantedById: number
    createdAt?: Date | string
  }

  export type AttendanceLogCreateManyUserInput = {
    id?: number
    companyId: number
    clockIn: Date | string
    clockOut?: Date | string | null
    note?: string | null
    scheduleId?: number | null
  }

  export type ShiftScheduleCreateManyUserInput = {
    id?: number
    companyId: number
    shiftDate: Date | string
    startTime: Date | string
    endTime: Date | string
    note?: string | null
  }

  export type PaySlipCreateManyUserInput = {
    id?: number
    issuedById: number
    companyId: number
    month: Date | string
    amount: number
    note?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type MessageLogCreateManySenderInput = {
    id?: number
    threadId: number
    content: string
    sentAt?: Date | string
  }

  export type MessageThreadCreateManyCreatedByInput = {
    id?: number
    resumeId: number
    createdAt?: Date | string
  }

  export type UserResumeUpdateWithoutUserInput = {
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUpdateOneWithoutResumeNestedInput
    company?: CompanyUpdateOneRequiredWithoutResumesNestedInput
    languages?: LanguageUpdateManyWithoutResumeNestedInput
    educations?: EducationUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUpdateManyWithoutResumeNestedInput
    skills?: SkillUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUpdateManyWithoutResumeNestedInput
    traits?: TraitUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutResumeNestedInput
    biography?: BiographyUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryOf?: UserUncheckedUpdateOneWithoutResumeNestedInput
    languages?: LanguageUncheckedUpdateManyWithoutResumeNestedInput
    educations?: EducationUncheckedUpdateManyWithoutResumeNestedInput
    experiences?: ExperienceUncheckedUpdateManyWithoutResumeNestedInput
    skills?: SkillUncheckedUpdateManyWithoutResumeNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutResumeNestedInput
    traits?: TraitUncheckedUpdateManyWithoutResumeNestedInput
    commuteOptions?: CommuteUncheckedUpdateManyWithoutResumeNestedInput
    workingTimes?: WorkingTimeUncheckedUpdateManyWithoutResumeNestedInput
    workIdentities?: WorkIdentityUncheckedUpdateManyWithoutResumeNestedInput
    jobPreferences?: JobTypeUncheckedUpdateManyWithoutResumeNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutResumeNestedInput
    biography?: BiographyUncheckedUpdateOneWithoutResumeNestedInput
    portfolio?: PortfolioUncheckedUpdateManyWithoutResumeNestedInput
    profilePhotos?: ProfilePhotoUncheckedUpdateManyWithoutResumeNestedInput
    resumeVersions?: ResumeVersionUncheckedUpdateManyWithoutResumeNestedInput
    resumeVisibility?: ResumeVisibilityUncheckedUpdateOneWithoutResumeNestedInput
    resumeReviewStatuses?: ResumeReviewStatusUncheckedUpdateManyWithoutResumeNestedInput
    resumeViewLogs?: ResumeViewLogUncheckedUpdateManyWithoutResumeNestedInput
    resumePDFs?: ResumePDFUncheckedUpdateManyWithoutResumeNestedInput
    resumeReviewLogs?: ResumeReviewLogUncheckedUpdateManyWithoutResumeNestedInput
    messageThreads?: MessageThreadUncheckedUpdateManyWithoutResumeNestedInput
    accessGrants?: ResumeAccessGrantUncheckedUpdateManyWithoutResumeNestedInput
    jobapplication?: JobApplicationUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UserResumeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workPermit?: NullableStringFieldUpdateOperationsInput | string | null
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    englishName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    mailCountry?: NullableStringFieldUpdateOperationsInput | string | null
    mailCity?: NullableStringFieldUpdateOperationsInput | string | null
    mailDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    mailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCountry?: NullableStringFieldUpdateOperationsInput | string | null
    residentialCity?: NullableStringFieldUpdateOperationsInput | string | null
    residentialDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    residentialAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isRegistered?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpRecordUpdateWithoutUserInput = {
    ipAddress?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpRecordUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ipAddress?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpRecordUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ipAddress?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRecordUpdateWithoutUserInput = {
    deviceInfo?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRecordUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    deviceInfo?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRecordUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    deviceInfo?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogUpdateWithoutAdminInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userViewedBy?: UserUpdateOneRequiredWithoutResumesUserViewedNestedInput
    resume?: UserResumeUpdateOneRequiredWithoutResumeViewLogsNestedInput
  }

  export type ResumeViewLogUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    userViewedById?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    userViewedById?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogUpdateWithoutUserViewedByInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneRequiredWithoutResumeViewLogsNestedInput
    resume?: UserResumeUpdateOneRequiredWithoutResumeViewLogsNestedInput
  }

  export type ResumeViewLogUncheckedUpdateWithoutUserViewedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeViewLogUncheckedUpdateManyWithoutUserViewedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeReviewLogUpdateWithoutReviewerInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutResumeReviewLogsNestedInput
    tags?: ResumeReviewTagUpdateManyWithoutReviewNestedInput
  }

  export type ResumeReviewLogUncheckedUpdateWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ResumeReviewTagUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ResumeReviewLogUncheckedUpdateManyWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserReviewLogUpdateWithoutReviewerInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetUser?: UserUpdateOneRequiredWithoutUserReviewsReceivedNestedInput
    tags?: UserReviewTagUpdateManyWithoutReviewNestedInput
  }

  export type UserReviewLogUncheckedUpdateWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: UserReviewTagUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type UserReviewLogUncheckedUpdateManyWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserReviewLogUpdateWithoutTargetUserInput = {
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewer?: UserUpdateOneRequiredWithoutUserReviewsGivenNestedInput
    tags?: UserReviewTagUpdateManyWithoutReviewNestedInput
  }

  export type UserReviewLogUncheckedUpdateWithoutTargetUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: UserReviewTagUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type UserReviewLogUncheckedUpdateManyWithoutTargetUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    reviewType?: NullableStringFieldUpdateOperationsInput | string | null
    isBlacklisted?: BoolFieldUpdateOperationsInput | boolean
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountHistoryLogUpdateWithoutOperatedByInput = {
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountActionsReceivedNestedInput
  }

  export type AccountHistoryLogUncheckedUpdateWithoutOperatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountHistoryLogUncheckedUpdateManyWithoutOperatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountHistoryLogUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    operatedBy?: UserUpdateOneWithoutAccountActionsTakenNestedInput
  }

  export type AccountHistoryLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    operatorId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountHistoryLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    operatorId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAccessGrantUpdateWithoutGrantedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutAccessGrantsNestedInput
    grantedTo?: UserUpdateOneRequiredWithoutResumesGrantedToMeNestedInput
  }

  export type ResumeAccessGrantUncheckedUpdateWithoutGrantedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    grantedToId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAccessGrantUncheckedUpdateManyWithoutGrantedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    grantedToId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAccessGrantUpdateWithoutGrantedToInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutAccessGrantsNestedInput
    grantedBy?: UserUpdateOneRequiredWithoutResumesGrantedByMeNestedInput
  }

  export type ResumeAccessGrantUncheckedUpdateWithoutGrantedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    grantedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAccessGrantUncheckedUpdateManyWithoutGrantedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    grantedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLogUpdateWithoutUserInput = {
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    company?: CompanyUpdateOneRequiredWithoutAttendanceLogsNestedInput
    schedule?: ShiftScheduleUpdateOneWithoutAttendanceLogsNestedInput
  }

  export type AttendanceLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendanceLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    clockIn?: DateTimeFieldUpdateOperationsInput | Date | string
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftScheduleUpdateWithoutUserInput = {
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    company?: CompanyUpdateOneRequiredWithoutSchedulesNestedInput
    attendanceLogs?: AttendanceLogUpdateManyWithoutScheduleNestedInput
  }

  export type ShiftScheduleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ShiftScheduleUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    shiftDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipUpdateWithoutUserInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuedBy?: CompanyUpdateOneRequiredWithoutIssuedPaySlipsNestedInput
  }

  export type PaySlipUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    issuedById?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaySlipUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    issuedById?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageLogUpdateWithoutSenderInput = {
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thread?: MessageThreadUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageLogUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    threadId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageLogUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    threadId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageThreadUpdateWithoutCreatedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UserResumeUpdateOneRequiredWithoutMessageThreadsNestedInput
    messages?: MessageLogUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageLogUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}