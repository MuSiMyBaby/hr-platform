generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ❌ 不要寫 import
// prisma/enums.prisma
enum LanguageLevel {
  BASIC
  INTERMEDIATECompany
  UPPER_INTERMEDIATE
  ADVANCED
  OTHER
}

enum EducationStatus {
  ENROLLED
  SUSPENDED
  GRADUATED
  DROPPED_OUT
  OTHER
}

enum ShiftType {
  DAY
  SWING
  EVENING
  NIGHT
  OTHER
}

enum WorkIdentityType {
  FRESH_GRADUATE
  EXPAT
  FREELANCER
  HOUSE_PARENT
  YOUTH
  RETIREE
  WORKING_WOMAN
  STUDENT
  SOCIAL_EXPLORER
  GAP_YEAR
  OTHER
}

enum JobTypeEnum {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  FREELANCE
  OTHER
}

enum ContactRelation {
  FATHER
  MOTHER
  CHILD
  OTHER
}

enum CommuteMethod {
  CAR
  MOTORCYCLE
  WALK
  OTHER
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
  OTHER
}

enum UserRole {
  PLATFORM_ADMIN
  COMPANY_ADMIN
  HR
  REVIEWER
  MEMBER
  JOB_SEEKER
}

enum CompanyType {
  AGENCY
  CLIENT
  FREELANCER
  HEADHUNTER
  PLATFORM
  OTHER
}

// File: prisma/models/access.prisma.part
model ResumeAccessGrant {
  id       Int        @id @default(autoincrement())
  resumeId Int
  resume   UserResume @relation("ResumeToAccess", fields: [resumeId], references: [id])

  grantedToId Int
  grantedTo   User @relation("ResumeGrantedTo", fields: [grantedToId], references: [id])

  grantedById Int
  grantedBy   User @relation("ResumeGrantedBy", fields: [grantedById], references: [id])

  createdAt DateTime @default(now())

  @@unique([resumeId, grantedToId])
}

model ResumeViewLog {
  id             Int        @id @default(autoincrement())
  adminId        Int
  admin          User       @relation("AdminViewLog", fields: [adminId], references: [id])
  userViewedById Int
  userViewedBy   User       @relation("ResumeViewLog", fields: [userViewedById], references: [id])
  resumeId       Int
  resume         UserResume @relation("ResumeViewLog", fields: [resumeId], references: [id])
  viewedAt       DateTime   @default(now())
}

// File: prisma/models/company.prisma.part
model Company {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  type       CompanyType @default(CLIENT)
  isApproved Boolean     @default(false)
  isActive   Boolean     @default(true)

  users          User[]
  resumes        UserResume[]
  attendanceLogs AttendanceLog[]
  schedules      ShiftSchedule[] @relation("CompanyToSchedule")
  issuedPaySlips PaySlip[]       @relation("CompanyToPaySlip")
  jobPosting     JobPosting[]
}

model AttendanceLog {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
  clockIn   DateTime
  clockOut  DateTime?
  note      String?

  schedule   ShiftSchedule? @relation(fields: [scheduleId], references: [id])
  scheduleId Int?
}

model ShiftSchedule {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation("UserToSchedule", fields: [userId], references: [id])
  companyId Int
  company   Company  @relation("CompanyToSchedule", fields: [companyId], references: [id])
  shiftDate DateTime
  startTime DateTime
  endTime   DateTime
  note      String?

  attendanceLogs AttendanceLog[]
}

model PaySlip {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation("UserToPaySlip", fields: [userId], references: [id])
  issuedById Int
  issuedBy   Company  @relation("CompanyToPaySlip", fields: [issuedById], references: [id])
  companyId  Int
  month      DateTime
  amount     Int
  note       String?
  fileUrl    String?

  createdAt DateTime @default(now())
}

// File: prisma/models/jobs.prisma.part
model JobPosting {
  id          Int         @id @default(autoincrement())
  companyId   Int
  company     Company     @relation(fields: [companyId], references: [id])
  title       String
  description String
  location    String?
  jobType     JobTypeEnum
  salaryRange String?
  isActive    Boolean     @default(true)
  postedAt    DateTime    @default(now())
  expiredAt   DateTime?

  applications JobApplication[]

  @@index([companyId])
}

model JobApplication {
  id        Int        @id @default(autoincrement())
  jobId     Int
  job       JobPosting @relation(fields: [jobId], references: [id])
  resumeId  Int
  resume    UserResume @relation(fields: [resumeId], references: [id])
  status    String // e.g., PENDING, INTERVIEW, REJECTED, HIRED
  appliedAt DateTime   @default(now())
  note      String?
}

// File: prisma/models/message.prisma.part
model MessageThread {
  id          Int        @id @default(autoincrement())
  resumeId    Int
  resume      UserResume @relation("ResumeToThread", fields: [resumeId], references: [id])
  createdById Int
  createdBy   User       @relation("UserToThread", fields: [createdById], references: [id])
  createdAt   DateTime   @default(now())

  messages MessageLog[]
}

model MessageLog {
  id       Int           @id @default(autoincrement())
  threadId Int
  thread   MessageThread @relation(fields: [threadId], references: [id])
  senderId Int
  sender   User          @relation("UserToMessages", fields: [senderId], references: [id])
  content  String
  sentAt   DateTime      @default(now())
}

// File: prisma/models/resume.prisma.part
model UserResume {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation("UserToResumes", fields: [userId], references: [id])

  primaryOf User?   @relation("PrimaryResume")
  isPrimary Boolean @default(false)
  title     String?

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  identityNumber String? @unique
  workPermit     String? @unique
  passport       String? @unique
  email          String? @unique
  emailVerified  Boolean @default(false)
  phoneNumber    String? @unique
  phoneVerified  Boolean @default(false)
  profilePicture String?
  firstName      String
  lastName       String
  englishName    String?
  nickname       String?

  mailCountry         String?
  mailCity            String?
  mailDistrict        String?
  mailAddress         String?
  residentialCountry  String?
  residentialCity     String?
  residentialDistrict String?
  residentialAddress  String?

  isRegistered Boolean   @default(false)
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  languages            Language[]
  educations           Education[]
  experiences          Experience[]
  skills               Skill[]
  certificates         Certificate[]
  traits               Trait[]
  commuteOptions       Commute[]
  workingTimes         WorkingTime[]
  workIdentities       WorkIdentity[]
  jobPreferences       JobType[]
  emergencyContacts    EmergencyContact[]
  biography            Biography?
  portfolio            Portfolio[]
  profilePhotos        ProfilePhoto[]
  resumeVersions       ResumeVersion[]
  resumeVisibility     ResumeVisibility?
  resumeReviewStatuses ResumeReviewStatus[]
  resumeViewLogs       ResumeViewLog[]      @relation("ResumeViewLog")
  resumePDFs           ResumePDF[]
  resumeReviewLogs     ResumeReviewLog[]
  messageThreads       MessageThread[]      @relation("ResumeToThread")
  accessGrants         ResumeAccessGrant[]  @relation("ResumeToAccess")
  jobapplication       JobApplication[]

  @@unique([userId, isPrimary])
  @@index([userId])
  @@index([companyId])
}

model Language {
  id         Int           @id @default(autoincrement())
  resume     UserResume    @relation(fields: [resumeId], references: [id])
  resumeId   Int
  name       String
  level      LanguageLevel
  levelOther String?
}

model Education {
  id          Int             @id @default(autoincrement())
  resume      UserResume      @relation(fields: [resumeId], references: [id])
  resumeId    Int
  school      String
  department  String
  status      EducationStatus
  statusOther String?
  startDate   DateTime
  endDate     DateTime
}

model Experience {
  id          Int        @id @default(autoincrement())
  resume      UserResume @relation(fields: [resumeId], references: [id])
  resumeId    Int
  company     String
  title       String
  startDate   DateTime
  endDate     DateTime
  description String
}

model Skill {
  id       Int        @id @default(autoincrement())
  resume   UserResume @relation(fields: [resumeId], references: [id])
  resumeId Int
  name     String
}

model Certificate {
  id       Int        @id @default(autoincrement())
  resume   UserResume @relation(fields: [resumeId], references: [id])
  resumeId Int
  name     String
  expiry   DateTime?
}

model Trait {
  id          Int        @id @default(autoincrement())
  resume      UserResume @relation(fields: [resumeId], references: [id])
  resumeId    Int
  personality String
  interest    String?
}

model Commute {
  id          Int           @id @default(autoincrement())
  resume      UserResume    @relation(fields: [resumeId], references: [id])
  resumeId    Int
  method      CommuteMethod
  methodOther String?
}

model WorkingTime {
  id            Int        @id @default(autoincrement())
  resume        UserResume @relation(fields: [resumeId], references: [id])
  resumeId      Int
  shift         ShiftType
  shiftOther    String?
  preference    String
  expectedStart DateTime?
  expectedEnd   DateTime?
}

model WorkIdentity {
  id            Int              @id @default(autoincrement())
  resume        UserResume       @relation(fields: [resumeId], references: [id])
  resumeId      Int
  identity      WorkIdentityType
  identityOther String?
}

model JobType {
  id        Int         @id @default(autoincrement())
  resume    UserResume  @relation(fields: [resumeId], references: [id])
  resumeId  Int
  type      JobTypeEnum
  typeOther String?
}

model EmergencyContact {
  id            Int             @id @default(autoincrement())
  resume        UserResume      @relation(fields: [resumeId], references: [id])
  resumeId      Int
  firstName     String
  lastName      String
  phoneNumber   String
  relation      ContactRelation
  relationOther String?
}

model Biography {
  id       Int        @id @default(autoincrement())
  resume   UserResume @relation(fields: [resumeId], references: [id])
  resumeId Int        @unique
  content  String
}

model Portfolio {
  id          Int        @id @default(autoincrement())
  resume      UserResume @relation(fields: [resumeId], references: [id])
  resumeId    Int
  externalUrl String
  title       String?
  description String?
}

model ProfilePhoto {
  id       Int        @id @default(autoincrement())
  resume   UserResume @relation(fields: [resumeId], references: [id])
  resumeId Int
  fileUrl  String
  type     String?
}

model ResumeVersion {
  id        Int        @id @default(autoincrement())
  resume    UserResume @relation(fields: [resumeId], references: [id])
  resumeId  Int
  snapshot  Json
  createdAt DateTime   @default(now())
  version   String?
  note      String?
  isCurrent Boolean    @default(false)
}

model ResumeVisibility {
  id              Int        @id @default(autoincrement())
  resume          UserResume @relation(fields: [resumeId], references: [id])
  resumeId        Int        @unique
  isPublic        Boolean    @default(false)
  allowedAudience String?
  startDate       DateTime?
  endDate         DateTime?
}

model ResumeReviewStatus {
  id         Int        @id @default(autoincrement())
  resume     UserResume @relation(fields: [resumeId], references: [id])
  resumeId   Int
  viewerId   Int
  viewerType String
  viewedAt   DateTime   @default(now())

  @@unique([resumeId, viewerId, viewerType])
}

model ResumePDF {
  id        Int        @id @default(autoincrement())
  resume    UserResume @relation(fields: [resumeId], references: [id])
  resumeId  Int
  fileUrl   String
  template  String?
  createdAt DateTime   @default(now())
}

// File: prisma/models/review.prisma.part
model UserReviewLog {
  id           Int  @id @default(autoincrement())
  targetUser   User @relation("UserReviewed", fields: [targetUserId], references: [id])
  targetUserId Int
  reviewer     User @relation("UserReviewer", fields: [reviewerId], references: [id])
  reviewerId   Int

  score         Int?
  reviewType    String?
  isBlacklisted Boolean  @default(false)
  note          String?
  createdAt     DateTime @default(now())

  tags UserReviewTag[] // ✅ 使用正規化 tag 關聯

  @@index([targetUserId, reviewerId])
}

model ResumeReviewLog {
  id         Int        @id @default(autoincrement())
  resumeId   Int
  resume     UserResume @relation(fields: [resumeId], references: [id])
  reviewerId Int
  reviewer   User       @relation("ResumeReviewer", fields: [reviewerId], references: [id])

  score     Int?
  status    ReviewStatus @default(PENDING)
  note      String?
  createdAt DateTime     @default(now())

  tags ResumeReviewTag[] // ✅ 使用正規化 tag 關聯

  @@index([resumeId, reviewerId])
}

model UserReviewTag {
  id       Int             @id @default(autoincrement()) // ✅ 同樣主鍵
  tagId    Int
  tag      ReviewTagOption @relation(fields: [tagId], references: [id])
  reviewId Int
  review   UserReviewLog   @relation(fields: [reviewId], references: [id])
}

model ResumeReviewTag {
  id       Int             @id @default(autoincrement()) // ✅ 加上主鍵
  tagId    Int
  tag      ReviewTagOption @relation(fields: [tagId], references: [id])
  reviewId Int
  review   ResumeReviewLog @relation(fields: [reviewId], references: [id])
}

model ReviewTagOption {
  id       Int     @id @default(autoincrement())
  label    String  @unique
  type     String?
  isPublic Boolean @default(true)

  // ✅ 加上反向關聯
  resumeTags ResumeReviewTag[]
  userTags   UserReviewTag[]
}
// File: prisma/models/user.prisma.part
model User {
  id Int @id @default(autoincrement())

  // 登入相關欄位
  email      String? @unique
  googleId   String? @unique
  facebookId String? @unique
  lineId     String? @unique

  // 使用紀錄
  lastLogin   DateTime?
  lastLoginIp String?

  // 系統控制
  skipRegistration Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isDeleted        Boolean   @default(false)
  deletedAt        DateTime?
  isAnonymized     Boolean   @default(false)
  deletionReason   String?

  // 公司與角色
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  role      UserRole @default(MEMBER)

  // 主履歷（單一）
  resumeId Int?        @unique
  resume   UserResume? @relation("PrimaryResume", fields: [resumeId], references: [id])

  // 所有履歷
  resumes UserResume[] @relation("UserToResumes")

  // 關聯
  ipRecords              IpRecord[]
  deviceRecords          DeviceRecord[]
  resumeViewLogs         ResumeViewLog[]     @relation("AdminViewLog")
  resumesUserViewed      ResumeViewLog[]     @relation("ResumeViewLog")
  resumeReviewsGiven     ResumeReviewLog[]   @relation("ResumeReviewer")
  userReviewsGiven       UserReviewLog[]     @relation("UserReviewer")
  userReviewsReceived    UserReviewLog[]     @relation("UserReviewed")
  accountActionsTaken    AccountHistoryLog[] @relation("AccountOperator")
  accountActionsReceived AccountHistoryLog[] @relation("AccountOwner")
  resumesGrantedByMe     ResumeAccessGrant[] @relation("ResumeGrantedBy")
  resumesGrantedToMe     ResumeAccessGrant[] @relation("ResumeGrantedTo")
  attendanceLogs         AttendanceLog[]
  schedules              ShiftSchedule[]     @relation("UserToSchedule")
  paySlips               PaySlip[]           @relation("UserToPaySlip")
  sentMessages           MessageLog[]        @relation("UserToMessages")
  createdThreads         MessageThread[]     @relation("UserToThread")
}

model IpRecord {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  ipAddress String
  location  String?
  createdAt DateTime @default(now())
}

model DeviceRecord {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  deviceInfo String
  platform   String?
  createdAt  DateTime @default(now())
}

model AccountHistoryLog {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation("AccountOwner", fields: [userId], references: [id])

  operatorId Int?
  operatedBy User? @relation("AccountOperator", fields: [operatorId], references: [id])

  action    String
  note      String?
  createdAt DateTime @default(now())
}
